@using Cams.Web.MVCRazor
@using Cams.Common.Dto;
@Html.DevExpress().GridView(settings =>
    {
        settings.Name = "ClientsGridView";
        settings.CallbackRouteValues = new { Controller = "ClientAccount", Action = "GetClients" };
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.Settings.ShowGroupPanel = true;
        settings.Styles.Header.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.ClientSideEvents.FocusedRowChanged = "OnClientsGridViewFocusedRowChanged";
        settings.ControlStyle.CssClass = "fontName";
        settings.ControlStyle.Font.Name = "DejaVu Serif";
        settings.Settings.ShowFilterRow = true;
        settings.CommandColumn.ClearFilterButton.Visible = true;
        settings.SettingsPager.Position = System.Web.UI.WebControls.PagerPosition.Bottom;
        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        settings.SettingsPager.AlwaysShowPager = true;
        
        settings.Settings.ShowHorizontalScrollBar = true;
        

        settings.SettingsPager.PageSize = 10;
        settings.SettingsPager.ShowEmptyDataRows = true;
        
        settings.CustomCallback = (sender, e) =>
        {
            int layoutIndex = Int32.Parse(e.Parameters);
            MVCxGridView grid = (MVCxGridView)sender;

            grid.BeginUpdate();
            try
            {
                grid.ClearSort();
                switch (layoutIndex)
                {
                    case 0:
                        grid.GroupBy(grid.Columns["DisplayClientId"]);
                        break;
                    case 1:
                        grid.GroupBy(grid.Columns["CompanyName"]);
                        break;
                    case 2:
                        grid.GroupBy(grid.Columns["ClientAPMC.Name"]);
                        break;
                    case 3:
                        grid.GroupBy(grid.Columns["Status"]);
                        break;
                    case 4:
                        grid.GroupBy(grid.Columns["AccountManager.Name"]);
                        break;
                }
            }
            finally
            {
                grid.EndUpdate();
            }
            grid.ExpandAll();
        };

        settings.KeyFieldName = "CAId";
		//settings.Columns.Add("CAId", "CAId");
        settings.Columns.Add(column=>
			{
				column.FieldName = "CAId";// "DisplayClientId";
				column.Caption = "Client ID";
				column.Width = System.Web.UI.WebControls.Unit.Pixel(120);
				column.SortOrder = DevExpress.Data.ColumnSortOrder.Descending;
				//column.Settings.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value;			
				column.SetDataItemTemplateContent(c =>
				{
					ViewContext.Writer.Write(DataBinder.Eval(c.DataItem, "DisplayClientId"));
				});
			});
        

        settings.Columns.Add(column =>
        {
            column.FieldName = "CompanyName";
            column.Caption = ClientResources.Clients;
            
            column.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
            column.Settings.AllowAutoFilter = DefaultBoolean.True;
            column.Settings.SortMode = DevExpress.XtraGrid.ColumnSortMode.DisplayText;
            column.ColumnType = MVCxGridViewColumnType.HyperLink;
            column.Width = System.Web.UI.WebControls.Unit.Pixel(300);
            column.SetDataItemTemplateContent(c =>
            {
                ViewContext.Writer.Write("<table border=\"0\" width=\"100%\">");
                ViewContext.Writer.Write("<tr>");
                ViewContext.Writer.Write("<td align=\"center\" valign=\"middle\" style=\"width:60px; padding: 2px 2px 2px 2px;\">");
                string image = Convert.ToString( DataBinder.Eval(c.DataItem, "Image"));
                if (String.IsNullOrEmpty(image))
                {
                    image = "clientlogo.jpg";
                }
                else
                {
                    ViewContext.Writer.Write("<img width=\"40px\" height=\"40px\" alt=\"" + Convert.ToString(DataBinder.Eval(c.DataItem, "CompanyName")) + "\" src=\"" + Url.Content("~/Content/UploadedImages/ClientAccount/" + image + "") + "\"");
                }
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td align=\"left\" valign=\"middle\" padding: 2px 2px 2px 2px;\">");
                Html.DevExpress().HyperLink(linkSettings =>
                {
                    linkSettings.Properties.Text = Convert.ToString(DataBinder.Eval(c.DataItem, "CompanyName"));
                    linkSettings.ControlStyle.CssClass = "fontName";
                    linkSettings.NavigateUrl = Url.Action("ClientRegistrationViewIndex", "ClientAccount", new { mode = "View", usertype = Request.Params["usertype"], CAId =c.KeyValue});

                }).Render();
                string cityvillage = Convert.ToString(DataBinder.Eval(c.DataItem, "ClientAddress.CityVillage.Name"));
                if (!String.IsNullOrEmpty(cityvillage))
                    ViewContext.Writer.Write(", " + cityvillage);
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("</tr>");
                ViewContext.Writer.Write("</table>");
            });
        });

        settings.Columns.Add("ClientAPMC.Name", "APMC").Width = System.Web.UI.WebControls.Unit.Pixel(125);
        settings.Columns.Add("ClientSubscription.SubscriptionMaster.SubscriptionType", "Subscription<br/> Type ").CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
        
        settings.Columns.Add(column =>
        {
            column.FieldName = "AccountManager.Name";
            column.Caption = "Account Manager";
			//column.SortOrder = DevExpress.Data.ColumnSortOrder.Ascending;
            column.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
            column.Settings.AllowAutoFilter = DefaultBoolean.True;
            column.Settings.SortMode = DevExpress.XtraGrid.ColumnSortMode.DisplayText;
            column.Width = System.Web.UI.WebControls.Unit.Pixel(200);
            column.SetDataItemTemplateContent(c =>
            {
                ViewContext.Writer.Write(Convert.ToString(DataBinder.Eval(c.DataItem, "AccountManager.Title")) + " " + Convert.ToString(DataBinder.Eval(c.DataItem, "AccountManager.Name")));
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "Status";
            column.Caption = "Account Status";
			//column.SortOrder = DevExpress.Data.ColumnSortOrder.Ascending;
            column.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            column.Settings.AllowAutoFilter = DefaultBoolean.True;
            column.Settings.SortMode = DevExpress.XtraGrid.ColumnSortMode.DisplayText;
            column.Width = System.Web.UI.WebControls.Unit.Pixel(100);
            
            column.SetDataItemTemplateContent(c =>
            {
                string status = Convert.ToString(DataBinder.Eval(c.DataItem, "Status"));
                if (!String.IsNullOrEmpty(status) && status == Cams.Common.ClientStatus.InActive.ToString())
                {
                    status = "<span style=\"color:red;\">" + status + "</span>";
                }
                ViewContext.Writer.Write(status);
            });
        });
        settings.Columns.Add("ModifiedDate", "Modified On").PropertiesEdit.DisplayFormatString = Cams.Common.Constants.DATEFORMATFORDISPAY;
        settings.Settings.ShowFooter = true;
        
        settings.SetFooterRowTemplateContent(footer =>
            {
                Html.DevExpress().HyperLink(linkSettings =>
                {
                    linkSettings.Name = "EditButton";
                    linkSettings.ClientVisible = ((List<Cams.Common.Dto.ClientRegistration.ClientDto>)Model).Count() == 0 ? false : true;
                    linkSettings.Properties.Style.CssClass = "button_Edit";
                    linkSettings.Properties.ClientSideEvents.Click = "OnEditClick";
                    linkSettings.NavigateUrl = Url.Action("EditClientIndex", "ClientAccount", new { mode = "edit" });
                }).Render();
            });
        
    }).Bind(Model).GetHtml()


