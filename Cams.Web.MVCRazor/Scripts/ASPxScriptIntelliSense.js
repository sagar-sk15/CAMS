ASPxClientButton = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxButton control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CheckedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the button's checked state is changed.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the button receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the button loses input focus.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after a button is clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientEditBase = function() {
    ///<summary>
    ///Serves as the base object for all the editors included in the client-side object model.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientEdit = function() {
    ///<summary>
    ///Serves as the base object for all the editors that support validation.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientCalendar = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxCalendar control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the selected date has been changed within the calendar.
    ///</field>
    ///<field name = "VisibleMonthChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the month displayed within the calendar is changed.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientCaptcha = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxCaptcha control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientCheckBox = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxCheckBox control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CheckedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the editor's checked state is changed.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientRadioButton = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxRadioButton control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CheckedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the editor's checked state is changed.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientTextEdit = function() {
    ///<summary>
    ///Represents a base for client-side objects which allow single-line text input.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientTextBoxBase = function() {
    ///<summary>
    ///Represents a base for client-side editors which are capable of displaying and editing text data in their edit regions.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientButtonEditBase = function() {
    ///<summary>
    ///Represents a base for client button editor objects.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientDropDownEditBase = function() {
    ///<summary>
    ///Represents a base class for the editors that contain a drop down window.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientColorEdit = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxColorEdit control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ColorChanged" type = "ASPxClientEvent">
    ///Fires after the selected color has been changed within the color editor.
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientDropDownEdit = function() {
    ///<summary>
    ///Represents a base for client editor objects realizing the dropdown editor functionality.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientDateEdit = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxDateEdit control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "DateChanged" type = "ASPxClientEvent">
    ///Fires after the selected date has been changed within the date editor.
    ///</field>
    ///<field name = "ParseDate" type = "ASPxClientEvent">
    ///Enables you to convert the value entered by an end user into the value that will be stored by the date editor.
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientParseDateEventArgs = function() {
    ///<summary>
    ///Provides data for the ParseDate client-side event that parses a string entered into a date editor.
    ///</summary>
    ///<field name = "value">
    ///Gets the value entered into the date editor by an end user. Value: The string value entered into the date editor by an end user.
    ///</field>
    ///<field name = "date">
    ///Gets or sets the edit value of the date editor. Value: A date/time value representing the edit value of the date editor.
    ///</field>
    ///<field name = "handled">
    ///Gets or sets a value specifying whether the event was handled. Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
    ///</field>
};
ASPxClientParseDateEventHandler = function() {
    ///<summary>
    ///A method that will handle the client ParseDate event, that parses a date editor's value when entered.
    ///</summary>
};
ASPxClientComboBox = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxComboBox control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientComboBox.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientEditKeyEventHandler = function() {
    ///<summary>
    ///A method that will handle the client events involving a keyboard key being pressed or released.
    ///</summary>
};
ASPxClientEditKeyEventArgs = function() {
    ///<summary>
    ///Provides data for the client events involved with a key being pressed or released.
    ///</summary>
    ///<field name = "htmlEvent">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
};
ASPxClientEditValidationEventHandler = function() {
    ///<summary>
    ///A method that will handle client validation events.
    ///</summary>
};
ASPxClientEditValidationEventArgs = function() {
    ///<summary>
    ///Provides data for the client events that are related to data validation (see Validate).
    ///</summary>
    ///<field name = "errorText">
    ///Gets or sets the error description. Value: A string representing the error description.
    ///</field>
    ///<field name = "isValid">
    ///Gets or sets a value specifying whether the validated value is valid. Value: true if the value is valid; otherwise, false.
    ///</field>
    ///<field name = "value">
    ///Gets or sets the editor's value being validated. Value: An object that represents the validated value.
    ///</field>
};
ASPxClientFilterControl = function() {
    ///<summary>
    ///Represents the client ASPxFilterControl.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Applied" type = "ASPxClientEvent">
    ///Occurs after a new filter expression has been applied.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientFilterControl.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientFilterAppliedEventHandler = function() {
    ///<summary>
    ///A method that will handle the Applied event.
    ///</summary>
};
ASPxClientFilterAppliedEventArgs = function() {
    ///<summary>
    ///Provides data for the Applied event.
    ///</summary>
    ///<field name = "filterExpression">
    ///Gets the filter expression currently being applied. Value: A string value that specifies the filter expression currently being applied.
    ///</field>
};
ASPxClientListEdit = function() {
    ///<summary>
    ///Represents a base for client editor objects that display a list of items.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientListEditItem = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ListEditItem object.
    ///</summary>
    ///<field name = "selected">
    ///Gets a value that indicates whether a list box item is selected. Value: true if a list box item is selected; otherwise, false.
    ///</field>
    ///<field name = "listEditBase">
    ///Gets an editor to which the current item belongs. Value: An ASPxClientListEdit object that represents the item's owner editor.
    ///</field>
    ///<field name = "index">
    ///Gets the item's index. Value: An integer value that represents the item's index within the corresponding editor's item collection.
    ///</field>
    ///<field name = "imageUrl">
    ///Gets the item's assocoated image. Value: A string value that represents the path to the image displayed by the item.
    ///</field>
    ///<field name = "text">
    ///Gets the item's display text. Value: A string value that represents the item's display text.
    ///</field>
    ///<field name = "value">
    ///Gets the item's associated value. Value: An object that represents the value associated with the item.
    ///</field>
};
ASPxClientListBox = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxListBox control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientListBox.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list box has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "ItemDoubleClick" type = "ASPxClientEvent">
    ///Occurs on the client when the editor's item is selected, by double clicking.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientRadioButtonList = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxRadioButtonList control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientListEditItemSelectedChangedEventHandler = function() {
    ///<summary>
    ///A method that will handle the SelectedIndexChanged event.
    ///</summary>
};
ASPxClientListEditItemSelectedChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the SelectedIndexChanged event.
    ///</summary>
    ///<field name = "index">
    ///Gets the index of the item related to the event. Value: An integer value that represents the item's index within the corresponding editor's item collection.
    ///</field>
    ///<field name = "isSelected">
    ///Gets whether the item has been selected. Value: true if the item is selected; otherwise, false.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientProgressBar = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxProgressBar control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientSpinEditBase = function() {
    ///<summary>
    ///Represents a base class for the ASPxClientSpinEdit object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientSpinEdit = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxSpinEdit control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "NumberChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the editor's value is altered in any way.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientTimeEdit = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxTimeEdit control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "DateChanged" type = "ASPxClientEvent">
    ///Fires after the selected date has been changed within the time editor.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientStaticEdit = function() {
    ///<summary>
    ///Represents a base for client-side static editors whose values cannot be visually changed by end users.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after an end-user clicks within a static editor.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientEditEventHandler = function() {
    ///<summary>
    ///A method that will handle client-side events which concern clicking within editors.
    ///</summary>
};
ASPxClientEditClickEventArgs = function() {
    ///<summary>
    ///Provides data for the client-side events which concern clicking within editors.
    ///</summary>
    ///<field name = "htmlElement">
    ///Gets the HTML element related to the event. Value: An object that represents the clicked HTML element.
    ///</field>
    ///<field name = "htmlEvent">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
};
ASPxClientHyperLink = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxHyperLink control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after an end-user clicks within a static editor.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientImageBase = function() {
    ///<summary>
    ///Represents a base for client-side editors which are capable of displaying images.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after an end-user clicks within a static editor.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientImage = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxImage control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after an end-user clicks within a static editor.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientBinaryImage = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxBinaryImage control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after an end-user clicks within a static editor.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientLabel = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxLabel control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after an end-user clicks within a static editor.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientTextBox = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxTextBox control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientMemo = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxMemo control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientButtonEdit = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxButtonEdit control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientButtonEditClickEventHandler = function() {
    ///<summary>
    ///A method that will handle the ButtonClick event.
    ///</summary>
};
ASPxClientButtonEditClickEventArgs = function() {
    ///<summary>
    ///Provides data for the ButtonClick event.
    ///</summary>
    ///<field name = "buttonIndex">
    ///Gets the index of the clicked button. Value: An integer value representing the index of the clicked button within the editor's Buttons collection.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientValidationSummary = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxValidationSummary control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "VisibilityChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the editor's visibility is changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientValidationSummaryVisibilityChangedEventHandler = function() {
    ///<summary>
    ///A method that will handle the VisibilityChanged event.
    ///</summary>
};
ASPxClientValidationSummaryVisibilityChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the VisibilityChanged event.
    ///</summary>
    ///<field name = "visible">
    ///Gets or sets whether the editor is visible on the client. Value: true if the editor is visible; otherwise, false.
    ///</field>
};
ASPxClientGaugeControl = function() {
    ///<summary>
    ///Represents the client ASPxGaugeControl.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires when errors have occured during callback propcessing.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientGridLookup = function() {
    ///<summary>
    ///The client-side equivalent of the ASPxGridLookup control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "RowClick" type = "ASPxClientEvent">
    ///Fires on the client when a data row is clicked within the built-in dropdown grid.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientGridView = function() {
    ///<summary>
    ///Represents the client ASPxGridView.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires after the selection has been changed.
    ///</field>
    ///<field name = "FocusedRowChanged" type = "ASPxClientEvent">
    ///Fires in response to changing row focus.
    ///</field>
    ///<field name = "ColumnSorting" type = "ASPxClientEvent">
    ///Enables you to prevent columns from being sorted.
    ///</field>
    ///<field name = "ColumnGrouping" type = "ASPxClientEvent">
    ///Enables you to cancel data grouping.
    ///</field>
    ///<field name = "ColumnMoving" type = "ASPxClientEvent">
    ///Enables you to control column movement.
    ///</field>
    ///<field name = "ColumnStartDragging" type = "ASPxClientEvent">
    ///Fires when an end-user starts dragging the column's header and enables you to cancel this operation.
    ///</field>
    ///<field name = "ColumnResizing" type = "ASPxClientEvent">
    ///Enables you to prevent columns from being resized.
    ///</field>
    ///<field name = "ColumnResized" type = "ASPxClientEvent">
    ///Occurs after a column's width has been changed by an end-user.
    ///</field>
    ///<field name = "RowExpanding" type = "ASPxClientEvent">
    ///Fires before a group row is expanded.
    ///</field>
    ///<field name = "RowCollapsing" type = "ASPxClientEvent">
    ///Fires before a group row is collapsed.
    ///</field>
    ///<field name = "DetailRowExpanding" type = "ASPxClientEvent">
    ///Fires before a detail row is expanded.
    ///</field>
    ///<field name = "DetailRowCollapsing" type = "ASPxClientEvent">
    ///Fires before a detail row is collapsed.
    ///</field>
    ///<field name = "RowClick" type = "ASPxClientEvent">
    ///Fires on the client when a data row is clicked.
    ///</field>
    ///<field name = "RowDblClick" type = "ASPxClientEvent">
    ///Fires on the client when a data row is double clicked.
    ///</field>
    ///<field name = "ContextMenu" type = "ASPxClientEvent">
    ///Enables you to display a context menu.
    ///</field>
    ///<field name = "CustomizationWindowCloseUp" type = "ASPxClientEvent">
    ///Fires after the Customization Window has been closed.
    ///</field>
    ///<field name = "CustomButtonClick" type = "ASPxClientEvent">
    ///Occurs when a custom command button has been clicked.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientGridView.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientGridViewColumn = function() {
    ///<summary>
    ///Represents a client column.
    ///</summary>
    ///<field name = "name">
    ///Gets the column's name. Value: A String value that specifies the column's name.
    ///</field>
    ///<field name = "id">
    ///Gets the column's unique identifier. Value: A String value that specifies the column's unique identifier.
    ///</field>
    ///<field name = "index">
    ///Gets the column's position within the collection. Value: An integer zero-bazed index that specifies the column's position within the collection.
    ///</field>
    ///<field name = "fieldName">
    ///Gets the name of the database field assigned to the current column. Value: A String value that specifies the name of a data field.
    ///</field>
    ///<field name = "visible">
    ///Gets whether the column is visible. Value: true to display the column; otherwise, false.
    ///</field>
};
ASPxClientGridViewValuesCallback = function() {
    ///<summary>
    ///Represents a JavaScript function which receives the list of row values when the client GetSelectedFieldValues method is called.
    ///</summary>
};
ASPxClientGridViewColumnCancelEventHandler = function() {
    ///<summary>
    ///A method that will handle the cancelable events of a client ASPxGridView column.
    ///</summary>
};
ASPxClientGridViewColumnCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the cancelable events of a client ASPxGridView column.
    ///</summary>
    ///<field name = "column">
    ///Gets the processed client column. Value: An ASPxClientGridViewColumn object that represents the processed column.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientGridViewColumnProcessingModeEventHandler = function() {
    ///<summary>
    ///A method that will handle the client events concerned with column processing.
    ///</summary>
};
ASPxClientGridViewColumnProcessingModeEventArgs = function() {
    ///<summary>
    ///Provides data for the client events  concerned with column processing, and that allow the event's processing to be passed to the server side.
    ///</summary>
    ///<field name = "column">
    ///Gets a grid column related to the event. Value: An ASPxClientGridViewColumn object representing the column related to the event.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientGridViewRowCancelEventHandler = function() {
    ///<summary>
    ///A method that will handle the the RowExpanding events.
    ///</summary>
};
ASPxClientGridViewRowCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the RowExpanding events.
    ///</summary>
    ///<field name = "visibleIndex">
    ///Gets the processed row's visible index. Value: An integer zero-based index that identifies the processed row.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientGridViewSelectionEventHandler = function() {
    ///<summary>
    ///A method that will handle the SelectionChanged event.
    ///</summary>
};
ASPxClientGridViewSelectionEventArgs = function() {
    ///<summary>
    ///Provides data for the SelectionChanged event.
    ///</summary>
    ///<field name = "visibleIndex">
    ///Gets the visible index of the row whose selected state has been changed. Value: An integer value that specifies the visible index of the row whose selected state has been changed.
    ///</field>
    ///<field name = "isSelected">
    ///Gets whether the row has been selected. Value: true if the row has been selected; otherwise, false.
    ///</field>
    ///<field name = "isAllRecordsOnPage">
    ///Gets whether all rows, displayed within a page, have been selected or unselected. Value: true if all rows, displayed within a page, have been selected or unselected; otherwise, false.
    ///</field>
    ///<field name = "isChangedOnServer">
    ///Gets whether a row's selected state has been changed on the server. Value: true  if a row's selected state has been changed on the server; otherwise, false.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientGridViewRowClickEventHandler = function() {
    ///<summary>
    ///A method that will handle the RowClick event.
    ///</summary>
};
ASPxClientGridViewRowClickEventArgs = function() {
    ///<summary>
    ///Provides data for the RowClick event.
    ///</summary>
    ///<field name = "htmlEvent">
    ///Provides access to the parameters associated with the RowClick event. Value: An object that contains parameters associated with the event.
    ///</field>
    ///<field name = "visibleIndex">
    ///Gets the processed row's visible index. Value: An integer zero-based index that identifies the processed row.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientGridViewContextMenuEventHandler = function() {
    ///<summary>
    ///A method that will handle the ContextMenu event.
    ///</summary>
};
ASPxClientGridViewContextMenuEventArgs = function() {
    ///<summary>
    ///Provides data for the ContextMenu event.
    ///</summary>
    ///<field name = "objectType">
    ///Gets which grid element has been right clicked by the user. Value: A String value that specifies whether a row or column header has been right clicked by the user.
    ///</field>
    ///<field name = "index">
    ///Identifies the grid element being right clicked by the user. Value: A zero-based integer index that identifies the grid element being clicked by the user.
    ///</field>
    ///<field name = "htmlEvent">
    ///Provides access to the parameters associated with the ContextMenu event. Value: An object that contains parameters associated with the event.
    ///</field>
};
ASPxClientGridViewCustomButtonEventHandler = function() {
    ///<summary>
    ///A method that will handle the CustomButtonClick event.
    ///</summary>
};
ASPxClientGridViewCustomButtonEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomButtonClick event.
    ///</summary>
    ///<field name = "visibleIndex">
    ///Gets the value which identifies the row whose custom button has been clicked. Value: An integer value that identifies the node whose custom button has been clicked.
    ///</field>
    ///<field name = "buttonID">
    ///Gets the value which identifies the custom button. Value: An integer value that identifies the clicked custom button.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientGridViewColumnMovingEventHandler = function() {
    ///<summary>
    ///A method that will handle the ColumnMoving event.
    ///</summary>
};
ASPxClientGridViewColumnMovingEventArgs = function() {
    ///<summary>
    ///Provides data for the ColumnMoving event.
    ///</summary>
    ///<field name = "allow">
    ///Gets or sets whether a column is allowed to be moved. Value: true to allow column moving; otherwise, false.
    ///</field>
    ///<field name = "sourceColumn">
    ///Gets the column currently being dragged by an end-user. Value: An ASPxClientGridViewColumn object that represents the column currently being dragged by an end-user.
    ///</field>
    ///<field name = "destinationColumn">
    ///Gets the target column, before or after which the source column will be inserted (if dropped). Value: An ASPxClientGridViewColumn object that represents the target column. null (Nothing in Visual Basic) if the source column isn't over the column header panel.
    ///</field>
    ///<field name = "isDropBefore">
    ///Gets whether the source column will be inserted before the target column (if dropped). Value: true if the source column will be inserted before the target column (if dropped); otherwise, false.
    ///</field>
    ///<field name = "isGroupPanel">
    ///Gets whether the source column is currently over the Group Panel. Value: true if the source column is currently over the Group Panel; otherwise, false.
    ///</field>
};
ASPxClientCommandConsts = function() {
    ///<summary>
    ///Declares client constants that contain the names of the ASPxHtmlEditor's default commands.
    ///</summary>
};
ASPxClientHtmlEditorCommandEventHandler = function() {
    ///<summary>
    ///A method that will handle the client events related to command processing.
    ///</summary>
};
ASPxClientHtmlEditorCommandEventArgs = function() {
    ///<summary>
    ///Provides data for client events that relate to command processing (CustomCommand).
    ///</summary>
    ///<field name = "commandName">
    ///Gets the name of the processed command. Value: A string value representing the processed command's name.
    ///</field>
    ///<field name = "parameter">
    ///Gets an optional parameter that complements the processed command. Value: A string value containing additional information about the processed command.
    ///</field>
};
ASPxClientHtmlEditorCustomDialogEventHandler = function() {
    ///<summary>
    ///A method that will handle the client events that relate to custom dialog operations.
    ///</summary>
};
ASPxClientHtmlEditorCustomDialogEventArgs = function() {
    ///<summary>
    ///Provides data for client events that relate to custom dialog operations.
    ///</summary>
    ///<field name = "name">
    ///Gets the name that uniquely identifies the processed custom dialog. Value: A string value that represents the value assigned to the processed custom dialog's Name property.
    ///</field>
};
ASPxClientHtmlEditorCustomDialogCloseEventArgsBase = function() {
    ///<summary>
    ///Provides data for client events that relate to closing a custom dialog.
    ///</summary>
    ///<field name = "status">
    ///Gets the status of the closed custom dialog. Value: An object representing a custom dialog's closing status. By default, it's the "cancel" string if the dialog operation is canceled, or the "ok" string if a dialog is closed by submitting a file. You can also provide your custom status, if your dialog contains additional buttons.
    ///</field>
    ///<field name = "name">
    ///Gets the name that uniquely identifies the processed custom dialog. Value: A string value that represents the value assigned to the processed custom dialog's Name property.
    ///</field>
};
ASPxClientHtmlEditorCustomDialogClosingEventHandler = function() {
    ///<summary>
    ///A method that will handle the CustomDialogClosing client event.
    ///</summary>
};
ASPxClientHtmlEditorCustomDialogClosingEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomDialogClosing client event.
    ///</summary>
    ///<field name = "handled">
    ///Gets or sets a value specifying whether the event was handled. Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
    ///</field>
    ///<field name = "status">
    ///Gets the status of the closed custom dialog. Value: An object representing a custom dialog's closing status. By default, it's the "cancel" string if the dialog operation is canceled, or the "ok" string if a dialog is closed by submitting a file. You can also provide your custom status, if your dialog contains additional buttons.
    ///</field>
    ///<field name = "name">
    ///Gets the name that uniquely identifies the processed custom dialog. Value: A string value that represents the value assigned to the processed custom dialog's Name property.
    ///</field>
};
ASPxClientHtmlEditorCustomDialogClosedEventHandler = function() {
    ///<summary>
    ///A method that will handle the CustomDialogClosed client event.
    ///</summary>
};
ASPxClientHtmlEditorCustomDialogClosedEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomDialogClosed client event.
    ///</summary>
    ///<field name = "data">
    ///Gets an object associated with the closed dialog. Value: An object containing custom data associated with dialog closing.
    ///</field>
    ///<field name = "status">
    ///Gets the status of the closed custom dialog. Value: An object representing a custom dialog's closing status. By default, it's the "cancel" string if the dialog operation is canceled, or the "ok" string if a dialog is closed by submitting a file. You can also provide your custom status, if your dialog contains additional buttons.
    ///</field>
    ///<field name = "name">
    ///Gets the name that uniquely identifies the processed custom dialog. Value: A string value that represents the value assigned to the processed custom dialog's Name property.
    ///</field>
};
ASPxClientHtmlEditorValidationEventHandler = function() {
    ///<summary>
    ///A method that will handle the Validation client event.
    ///</summary>
};
ASPxClientHtmlEditorValidationEventArgs = function() {
    ///<summary>
    ///Provides data for the Validation client event.
    ///</summary>
    ///<field name = "html">
    ///Gets or sets the HTML markup that is the ASPxHtmlEditor's content. Value: A string value that specifies the HTML content to validate.
    ///</field>
    ///<field name = "isValid">
    ///Gets or sets a value specifying whether the validated value is valid. Value: true if the validation has been completed successfully; otherwise, false.
    ///</field>
    ///<field name = "errorText">
    ///Gets or sets the error text to be displayed within the editor's error frame if the editor's validation fails. Value: A string value specifying the error description.
    ///</field>
};
ASPxClientHtmlEditor = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxHtmlEditor control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CustomCommand" type = "ASPxClientEvent">
    ///Enables you to implement a custom command's logic.
    ///</field>
    ///<field name = "CommandExecuted" type = "ASPxClientEvent">
    ///Occurs after a default or custom command has been executed on the client side.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's Design View Area receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's Design View Area loses input focus.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Occurs on the client when a selection is changed within the ASPxHtmlEditor.
    ///</field>
    ///<field name = "HtmlChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the content of the editor changes.
    ///</field>
    ///<field name = "CustomDialogOpened" type = "ASPxClientEvent">
    ///Occurs on the client side after a custom dialog is opened.
    ///</field>
    ///<field name = "CustomDialogClosing" type = "ASPxClientEvent">
    ///Fires on the client side before a custom dialog is closed.
    ///</field>
    ///<field name = "CustomDialogClosed" type = "ASPxClientEvent">
    ///Occurs on the client side after a custom dialog is closed.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the ASPxHtmlEditor is valid.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientHtmlEditor.
    ///</field>
    ///<field name = "CustomDataCallback" type = "ASPxClientEvent">
    ///Fires after a callback, sent by the CustomDataCallback event handler.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientHtmlEditorSelection = function() {
    ///<summary>
    ///Represents the selection within the ASPxHtmlEditor.
    ///</summary>
};
ASPxClientPivotGrid = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxPivotGrid control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CustomizationFieldsVisibleChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the customization form's visible state has been changed.
    ///</field>
    ///<field name = "CellClick" type = "ASPxClientEvent">
    ///Occurs when a cell is clicked.
    ///</field>
    ///<field name = "CellDblClick" type = "ASPxClientEvent">
    ///Occurs when a cell is double clicked.
    ///</field>
    ///<field name = "AfterCallback" type = "ASPxClientEvent">
    ///Fires after a callback that has been processed on the server returns back to the client.
    ///</field>
    ///<field name = "BeforeCallback" type = "ASPxClientEvent">
    ///Fires before a callback is sent to the server for server-side processing.
    ///</field>
    ///<field name = "PopupMenuItemClick" type = "ASPxClientEvent">
    ///Occurs when a custom menu item has been clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientClickEventHandler = function() {
    ///<summary>
    ///A method that will handle the CellDblClick event.
    ///</summary>
};
ASPxClientClickEventArgs = function() {
    ///<summary>
    ///Provides data for the CellDblClick client events.
    ///</summary>
    ///<field name = "HtmlEvent">
    ///Provides access to the parameters associated with the CellDblClick events. Value: An object that contains parameters associated with the CellDblClick events.
    ///</field>
    ///<field name = "Value">
    ///Gets the processed cell's value. Value: An object that represents the processed cell's value.
    ///</field>
    ///<field name = "ColumnIndex">
    ///Gets the index of a column that owns the processed cell. Value: An integer value that identifies a column.
    ///</field>
    ///<field name = "RowIndex">
    ///Gets the index of a row that owns the processed cell. Value: An integer value that identifies a row.
    ///</field>
    ///<field name = "ColumnValue">
    ///Gets a column field value. Value: An object that represents a column field value.
    ///</field>
    ///<field name = "RowValue">
    ///Gets a row field value. Value: An object that represents a row field value.
    ///</field>
    ///<field name = "ColumnFieldName">
    ///Gets a column field name. Value: A String value that represents a column field name.
    ///</field>
    ///<field name = "RowFieldName">
    ///Gets a row field name. Value: A String value that represents a row field name.
    ///</field>
    ///<field name = "ColumnValueType">
    ///Gets a column value type. Value: A String value that represents a column value type.
    ///</field>
    ///<field name = "RowValueType">
    ///Gets a row value type. Value: A String value that represents a row value type.
    ///</field>
    ///<field name = "DataIndex">
    ///Gets the index of the data field which corresponds to the clicked summary value. Value: An integer value that identifies the data field.
    ///</field>
};
ASPxClientPivotMenuItemClickEventHandler = function() {
    ///<summary>
    ///A method that will handle the PopupMenuItemClick event.
    ///</summary>
};
ASPxClientPivotMenuItemClickEventArgs = function() {
    ///<summary>
    ///Provides data for the PopupMenuItemClick event.
    ///</summary>
    ///<field name = "MenuType">
    ///Gets the context menu's type. Value: A PivotGridPopupMenuType enumeration value that identifies the context menu.
    ///</field>
    ///<field name = "MenuItemName">
    ///Gets the name of the menu item currently being clicked. Value: A String value that identifies the clicked item by its name.
    ///</field>
    ///<field name = "FieldID">
    ///Gets the field's unique indentifier. Value: A string which specifies the field's unique indentifier.
    ///</field>
    ///<field name = "FieldValueIndex">
    ///Gets the index of the field value for which the popup menu has been invoked. Value: An integer value that identifies the field value.
    ///</field>
};
ASPxClientPivotCustomization = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxPivotCustomizationControl control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientAppointmentFlags = function() {
    ///<summary>
    ///Holds the information that determines what action types can be performed for appointments.
    ///</summary>
    ///<field name = "allowDelete">
    ///Gets a value that specifies whether an end-user is allowed to delete appointments. Value: true if an end-user can delete appointments; otherwise, false. Default is true.
    ///</field>
    ///<field name = "allowEdit">
    ///Gets a value that specifies whether an end-user is allowed to edit appointments. Value: true if the end-user can edit appointments; otherwise, false.
    ///</field>
    ///<field name = "allowResize">
    ///Gets a value that specifies whether an end-user is allowed to change the time boundaries of appointments. Value: true if appointment resizing is allowed; otherwise, false. Default is true.
    ///</field>
    ///<field name = "allowCopy">
    ///Gets a value that specifies whether an end-user is allowed to copy appointments. Value: true if a user can copy appointments; otherwise, false. Default is true.
    ///</field>
    ///<field name = "allowDrag">
    ///Gets a value that specifies whether an end-user is allowed to drag and drop appointments to another time slot or date. Value: true if the user can drag and drop appointments; otherwise, false.
    ///</field>
    ///<field name = "allowDragBetweenResources">
    ///Gets a value that specifies whether an end-user is allowed to drag and drop appointments between resources. Value: true if the end-user can drag appointment from one resource to another; otherwise, false.
    ///</field>
    ///<field name = "allowInplaceEditor">
    ///Gets a value that specifies whether an inplace editor can be activated for an appointment. Value: true if an inplace editor is activated; otherwise, false. Default is true.
    ///</field>
    ///<field name = "allowConflicts">
    ///Gets a value that specifies whether an end-user is allowed to share the schedule time between two or more appointments. Value: true if appointments with the same schedule time are allowed; otherwise, false. Default is true.
    ///</field>
};
ASPxClientAppointment = function() {
    ///<summary>
    ///Represents a client-side equivalent of the Appointment class.
    ///</summary>
    ///<field name = "interval">
    ///Gets the time interval of the appointment for client-side scripting. Value: An ASPxClientTimeInterval object, representing the interval assigned to an appointment.
    ///</field>
    ///<field name = "resources">
    ///Gets the identifiers of resources associated with the appointment for client-side scripting. Value: An array of string representations for resource identifiers.
    ///</field>
    ///<field name = "appointmentId">
    ///Gets the ID of an appointment for use in client-side scripts. Value: A string representation of the appointment ID.
    ///</field>
    ///<field name = "appointmentType">
    ///Gets the type of appointment for use in client-side scripts. Value: An ASPxAppointmentType enumeration member, representing the appointment's type.
    ///</field>
    ///<field name = "statusIndex">
    ///Gets the index of the availability status object associated with the appointment. Value: An integer value that specifies the index of the corresponding Statuses collection.
    ///</field>
    ///<field name = "labelIndex">
    ///Gets  the index of the label object associated with the appointment for client-side scripting. Value: An integer value that specifies the index of the corresponding Labels collection.
    ///</field>
    ///<field name = "subject">
    ///Gets the client appointment value that is equivalent in meaning to the Subject property. Value: A string representing the appointment subject.
    ///</field>
    ///<field name = "description">
    ///Gets the client appointment value that is equivalent in meaning to the Description property. Value: A string, representing the description for an appointment.
    ///</field>
    ///<field name = "location">
    ///Gets the client appointment value that is equivalent in meaning to the Location property. Value: A string representing the appointment location.
    ///</field>
    ///<field name = "allDay">
    ///Gets the client appointment value that is equivalent in meaning to the AllDay property. Value: true indicates the all-day appointment; otherwise, false.
    ///</field>
};
ASPxClientPoint = function() {
};
ASPxClientRect = function() {
};
ASPxClientRecurrenceInfo = function() {
    ///<summary>
    ///Contains information defining the occurrences of a recurring client appointment.
    ///</summary>
};
ASPxClientRecurrenceRange = function() {
    ///<summary>
    ///Contains types of the recurrence range.
    ///</summary>
    ///<field name = "NoEndDate">
    ///A recurring appointment will not have an end date, i.e. infinite recurrence Value: The "NoEndDate" string.
    ///</field>
    ///<field name = "OccurrenceCount">
    ///A recurring appointment will end after its recurrence count exceeds the value specified by the SetOccurrenceCount method. Value: The "OccurrenceCount" string.
    ///</field>
    ///<field name = "EndByDate">
    ///A recurring appointment will end after the date specified by the SetEnd method. Value: The "EndByDate" string.
    ///</field>
};
ASPxClientRecurrenceType = function() {
    ///<summary>
    ///Contains recurrence types.
    ///</summary>
    ///<field name = "Daily">
    ///The recurring appointment occurs on a daily basis. Value: The "Daily" string.
    ///</field>
    ///<field name = "Weekly">
    ///The recurring appointment reoccurs on a weekly basis. Value: The "Weekly" string.
    ///</field>
    ///<field name = "Monthly">
    ///The recurring appointment reoccurs on a monthly basis. Value: The "Monthly" string.
    ///</field>
    ///<field name = "Yearly">
    ///The recurring appointment reoccurs on an yearly basis. Value: The "Yearly" string.
    ///</field>
    ///<field name = "Hourly">
    ///The recurring appointment occurs on an hourly base. Value: The "Hourly" string.
    ///</field>
};
ASPxClientWeekDays = function() {
    ///<summary>
    ///Contains days and groups of days for use in recurrence patterns.
    ///</summary>
    ///<field name = "Sunday">
    ///Specifies Sunday. Value: The integer 1 value.
    ///</field>
    ///<field name = "Monday">
    ///Specifies Monday. Value: The integer 2 value.
    ///</field>
    ///<field name = "Tuesday">
    ///Specifies Tuesday. Value: The integer 4 value.
    ///</field>
    ///<field name = "Wednesday">
    ///Specifies Wednesday. Value: The integer 8 value.
    ///</field>
    ///<field name = "Thursday">
    ///Specifies Thursday. Value: The integer 16 value.
    ///</field>
    ///<field name = "Friday">
    ///Specifies Friday. Value: The integer 32 value.
    ///</field>
    ///<field name = "Saturday">
    ///Specifies Saturday. Value: The integer 64 value.
    ///</field>
    ///<field name = "WeekendDays">
    ///Specifies Saturday and Sunday. Value: The integer 65 value.
    ///</field>
    ///<field name = "WorkDays">
    ///Specifies work days (Monday, Tuesday, Wednesday, Thursday and Friday). Value: The integer 62 value.
    ///</field>
    ///<field name = "EveryDay">
    ///Specifies every day of the week. Value: The integer 127 value.
    ///</field>
};
ASPxClientWeekOfMonth = function() {
    ///<summary>
    ///Contains number of weeks in a month in which the event occurs.
    ///</summary>
    ///<field name = "None">
    ///There isn't any recurrence rule based on the weeks in a month. Value: The integer 0 value.
    ///</field>
    ///<field name = "First">
    ///The recurring event will occur once a month, on the specified day or days of the first week in the month. Value: The integer 1 value.
    ///</field>
    ///<field name = "Second">
    ///The recurring event will occur once a month, on the specified day or days of the second week in the month. Value: The integer 2 value.
    ///</field>
    ///<field name = "Third">
    ///The recurring event will occur once a month, on the specified day or days of the third week in the month. Value: The integer 3 value.
    ///</field>
    ///<field name = "Fourth">
    ///The recurring event will occur once a month, on the specified day or days of the fourth week in the month. Value: The integer 4 value;
    ///</field>
    ///<field name = "Last">
    ///The recurring event will occur once a month, on the specified day or days of the last week in the month. Value: The integer 5 value;
    ///</field>
};
ASPxClientWeekDaysCheckEdit = function() {
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientRecurrenceRangeControl = function() {
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientRecurrenceControlBase = function() {
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientDailyRecurrenceControl = function() {
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientWeeklyRecurrenceControl = function() {
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientMonthlyRecurrenceControl = function() {
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientYearlyRecurrenceControl = function() {
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
DefaultRecurrenceRuleValuesAccessor = function() {
};
DailyRecurrenceValuesAccessor = function() {
};
WeeklyRecurrenceValuesAccessor = function() {
};
MonthlyRecurrenceValuesAccessor = function() {
};
YearlyRecurrenceValuesAccessor = function() {
};
ASPxClientFormBase = function() {
};
ASPxClientRecurrenceTypeEdit = function() {
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
AppointmentPropertyNames = function() {
    ///<summary>
    ///Contains lists of property names for different appointment types.
    ///</summary>
    ///<field name = "Normal">
    ///Gets the list of properties characteristic for appointments of the Normal type. Value: A string array which is composed of the appointment property names.
    ///</field>
    ///<field name = "Pattern">
    ///Gets the list of properties characteristic for appointments of the Pattern type. Value: A string array which is composed of the appointment property names.
    ///</field>
};
ASPxClientTimeInterval = function() {
    ///<summary>
    ///Represents the client-side equivalent of the TimeInterval class.
    ///</summary>
};
ASPxClientSchedulerRefreshAction = function() {
    ///<summary>
    ///Holds action types for the client-side Refresh method.
    ///</summary>
    ///<field name = "None">
    ///Gets the value of the action parameter which initiates a simple reload of the control. Value: An integer representing the action parameter value.
    ///</field>
    ///<field name = "VisibleIntervalChanged">
    ///Gets the value of the action parameter which initiates reloading of the main ASPxScheduler control and its data-dependent satellites. Value: An integer representing the action parameter value.
    ///</field>
    ///<field name = "ActiveViewTypeChanged">
    ///Gets the value of the action parameter which initiates reloading of the main ASPxScheduler control and its satellite View controls. Value: An integer representing the action parameter value.
    ///</field>
};
ASPxClientAppointmentOperation = function() {
    ///<summary>
    ///Contains methods allowing you to perform or cancel an operation.
    ///</summary>
};
ASPxClientScheduler = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxScheduler control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ActiveViewChanging" type = "ASPxClientEvent">
    ///Occurs on the client side when the Scheduler control is about to change its active View.
    ///</field>
    ///<field name = "ActiveViewChanged" type = "ASPxClientEvent">
    ///Client-side event. Occurs after the active view of the ASPxScheduler has been changed.
    ///</field>
    ///<field name = "AppointmentClick" type = "ASPxClientEvent">
    ///Occurs when the end-user clicks an appointment.
    ///</field>
    ///<field name = "AppointmentDoubleClick" type = "ASPxClientEvent">
    ///Occurs when the end-user double clicks on an appointment.
    ///</field>
    ///<field name = "AppointmentsSelectionChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the user selects an appointment.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the time cell selection is changed.
    ///</field>
    ///<field name = "SelectionChanging" type = "ASPxClientEvent">
    ///Occurs on the client side when the time cell selection is about to change.
    ///</field>
    ///<field name = "VisibleIntervalChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the  time interval of the scheduling area is changed.
    ///</field>
    ///<field name = "MoreButtonClicked" type = "ASPxClientEvent">
    ///Occurs when one of  More Buttons is clicked.
    ///</field>
    ///<field name = "MenuItemClicked" type = "ASPxClientEvent">
    ///Client-side event that occurs when a popup menu item is clicked.
    ///</field>
    ///<field name = "AppointmentDrop" type = "ASPxClientEvent">
    ///Client-side event that occurs after an appointment has been dragged and dropped.
    ///</field>
    ///<field name = "AppointmentResize" type = "ASPxClientEvent">
    ///Client-side event that occurs when an appointment is resized.
    ///</field>
    ///<field name = "AppointmentDeleting" type = "ASPxClientEvent">
    ///Client-side event that fires before an appointment is deleted.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxSchedulerViewType = function() {
    ///<summary>
    ///Represents a client-side equivalent of the SchedulerViewType object.
    ///</summary>
    ///<field name = "Day">
    ///Gets a string representation equivalent of Day enumeration for use in client scripts. Value: A string "Day", indicating the DayView.
    ///</field>
    ///<field name = "WorkWeek">
    ///Gets a string representation equivalent of WorkWeek enumeration for use in client scripts. Value: A string "WorkWeek", indicating the WorkWeekView.
    ///</field>
    ///<field name = "Week">
    ///Gets a string representation equivalent of Week enumeration for use in client scripts. Value: A string "Week", indicating the WeekView.
    ///</field>
    ///<field name = "Month">
    ///Gets a string representation equivalent of Month enumeration for use in client scripts. Value: A string "Month", indicating the MonthView.
    ///</field>
    ///<field name = "Timeline">
    ///Gets a string representation equivalent of Timeline enumeration for use in client scripts. Value: A string "Timeline", indicating the TimelineView.
    ///</field>
};
ASPxSchedulerGroupType = function() {
    ///<summary>
    ///Represents a client-side equivalent of the SchedulerGroupType enumeration.
    ///</summary>
    ///<field name = "None">
    ///Gets a string representation equivalent of None enumeration for use in client scripts. Value: A "None" string value.
    ///</field>
    ///<field name = "Date">
    ///Gets a string representation equivalent of Date enumeration for use in client scripts. Value: A "Date" string value.
    ///</field>
    ///<field name = "Resource">
    ///Gets a string representation equivalent of Resource enumeration for use in client scripts. Value: A "Resource" string value.
    ///</field>
};
ASPxAppointmentType = function() {
    ///<summary>
    ///Represents a client-side equivalent of the AppointmentType enumeration.
    ///</summary>
    ///<field name = "Normal">
    ///Gets a string representation equivalent of Normal enumeration for use in client scripts. Value: A "Normal" string value.
    ///</field>
    ///<field name = "Pattern">
    ///Gets a string representation equivalent of Pattern enumeration for use in client scripts. Value: A "Pattern" string value.
    ///</field>
    ///<field name = "Occurrence">
    ///Gets a string representation equivalent of Occurrence enumeration for use in client scripts. Value: An "Occurrence" string value.
    ///</field>
    ///<field name = "ChangedOccurrence">
    ///Gets a string representation equivalent of ChangedOccurrence enumeration for use in client scripts. Value: A "ChangedOccurrence" string value.
    ///</field>
    ///<field name = "DeletedOccurrence">
    ///Gets a string representation equivalent of DeletedOccurrence enumeration for use in client scripts. Value: A "DeletedOccurrence" string value.
    ///</field>
};
ASPxClientAppointmentDeletingEventHandler = function() {
};
ASPxClientAppointmentDeletingEventArgs = function() {
    ///<summary>
    ///Provides data for the AppointmentDeleting event.
    ///</summary>
    ///<field name = "appointmentIds">
    ///Gets client IDs of the appointments that are intended to be removed. Value: An array of client appointment identifiers, representing appointments passed for deletion.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
AppointmentClickEventHandler = function() {
};
AppointmentClickEventArgs = function() {
    ///<summary>
    ///Provides data for the AppointmentDoubleClick events.
    ///</summary>
    ///<field name = "appointmentId">
    ///Gets the client appointment ID for the appointment being clicked. Value: A string, representing the client ID of the appointment.
    ///</field>
    ///<field name = "htmlElement">
    ///Gets the HTML element that the event was triggered on. Value: An object containing event data.
    ///</field>
    ///<field name = "handled">
    ///Gets or sets whether an event is handled, and that default actions are not required. Value: true if no default processing is required; otherwise, false.
    ///</field>
};
AppointmentsSelectionEventHandler = function() {
    ///<summary>
    ///A method that will handle the AppointmentsSelectionChanged event.
    ///</summary>
};
AppointmentsSelectionEventArgs = function() {
    ///<summary>
    ///Provides data for the AppointmentsSelectionChanged event.
    ///</summary>
    ///<field name = "appointmentIds">
    ///Gets identifiers of the selected appointments. Value: A comma separated list of string values, representing appointment IDs.
    ///</field>
};
ActiveViewChangingEventHandler = function() {
    ///<summary>
    ///A method that will handle the ActiveViewChanging event.
    ///</summary>
};
ActiveViewChangingEventArgs = function() {
    ///<summary>
    ///Provides data for the client-side ActiveViewChanging event.
    ///</summary>
    ///<field name = "oldView">
    ///Gets the value of the ActiveView property before modification. Value: A SchedulerViewType enumeration.
    ///</field>
    ///<field name = "newView">
    ///Gets the new value of the ActiveView property. Value: A string, which is the SchedulerViewType enumeration value.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets whether the change of  active view should be cancelled. Value: true to cancel the operation; otherwise, false.
    ///</field>
};
MoreButtonClickedEventHandler = function() {
    ///<summary>
    ///A method that will handle the MoreButtonClicked event.
    ///</summary>
};
MoreButtonClickedEventArgs = function() {
    ///<summary>
    ///Provides data for the MoreButtonClicked client-side event.
    ///</summary>
    ///<field name = "targetDateTime">
    ///Gets the Start or End values of the target appointment. Value: A DateTime value representing the target appointment's boundary.
    ///</field>
    ///<field name = "interval">
    ///Gets the time interval of the cell where the button is located. Value: An ASPxClientTimeInterval object representing the time interval of the cell which holds the button.
    ///</field>
    ///<field name = "resource">
    ///Gets the resource identifier associated with the cell where the button is located. Value: A string, corresponding to ResourceId.
    ///</field>
    ///<field name = "handled">
    ///Gets or sets whether an event is handled. If it is handled, default actions are not required. Value: true if no default processing is required; otherwise, false.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
MenuItemClickedEventHandler = function() {
    ///<summary>
    ///A method that will handle the MenuItemClicked event.
    ///</summary>
};
MenuItemClickedEventArgs = function() {
    ///<summary>
    ///Provides data for the MenuItemClicked event.
    ///</summary>
    ///<field name = "itemName">
    ///Gets the name of the menu item which is clicked. Value: A string, containing the menu item name.
    ///</field>
    ///<field name = "handled">
    ///Gets or sets whether an event is handled, and that default actions are not required. Value: true if no default processing is required; otherwise, false.
    ///</field>
};
AppointmentDropEventHandler = function() {
};
ASPxClientAppointmentDragEventArgs = function() {
    ///<summary>
    ///Provides data for the AppointmentDrop event.
    ///</summary>
    ///<field name = "handled">
    ///Gets or sets whether default event processing is required. Value: true to process an event using only custom code; otherwise, false.
    ///</field>
    ///<field name = "operation">
    ///Provides access to an object that enables you to choose an operation to perform. Value: An ASPxClientAppointmentOperation object providing methods to perform the required operation.
    ///</field>
};
AppointmentResizeEventHandler = function() {
};
ASPxClientAppointmentResizeEventArgs = function() {
    ///<summary>
    ///Provides data for the AppointmentResize event.
    ///</summary>
    ///<field name = "handled">
    ///Gets or sets whether default event processing is required. Value: true to process an event using only custom code; otherwise, false.
    ///</field>
    ///<field name = "operation">
    ///Provides access to an object that enables you to choose an operation to perform. Value: An ASPxClientAppointmentOperation object providing methods to perform the required operation.
    ///</field>
};
ASPxClientSpellChecker = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxSpellChecker class.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeforeCheck" type = "ASPxClientEvent">
    ///Client-side event that occurs before the spell check starts.
    ///</field>
    ///<field name = "CheckCompleteFormShowing" type = "ASPxClientEvent">
    ///Client-side event that occurs before a message box informing about process completion is shown.
    ///</field>
    ///<field name = "AfterCheck" type = "ASPxClientEvent">
    ///Client-side event that occurs when a spell check is finished.
    ///</field>
    ///<field name = "WordChanged" type = "ASPxClientEvent">
    ///Occurs after a word is changed in a checked text.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientBeforeCheckEventHandler = function() {
    ///<summary>
    ///Represents an object that will handle the client-side BeforeCheck event.
    ///</summary>
};
ASPxClientSpellCheckerBeforeCheckEventArgs = function() {
    ///<summary>
    ///Provides data for an event that occurs before a spelling check is started. Represents the client-side equivalent of the BeforeCheckEventArgs class.
    ///</summary>
    ///<field name = "controlId">
    ///Gets the programmatic identifier assigned to the control which is going to be checked. Value: A string, containing the control's identifier.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientAfterCheckEventHandler = function() {
    ///<summary>
    ///Represents an object that will handle the client-side AfterCheck event.
    ///</summary>
};
ASPxClientSpellCheckerAfterCheckEventArgs = function() {
    ///<summary>
    ///Provides data for the client event that occurs after a spelling check is complete.
    ///</summary>
    ///<field name = "controlId">
    ///Gets the programmatic identifier assigned to the control which has been checked. Value: A string, containing the control's identifier.
    ///</field>
    ///<field name = "checkedText">
    ///Gets the text that has been checked. Value: A string, containing checked text.
    ///</field>
};
ASPxClientWordChangedEventHandler = function() {
    ///<summary>
    ///Represents an object that will handle the client-side WordChanged event.
    ///</summary>
};
ASPxClientTreeList = function() {
    ///<summary>
    ///Represents the client ASpxTreeList.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientTreeList.
    ///</field>
    ///<field name = "ContextMenu" type = "ASPxClientEvent">
    ///Enables you to display a context menu.
    ///</field>
    ///<field name = "CustomButtonClick" type = "ASPxClientEvent">
    ///Occurs when a custom command button has been clicked.
    ///</field>
    ///<field name = "NodeFocusing" type = "ASPxClientEvent">
    ///Fires before the focused node has been changed.
    ///</field>
    ///<field name = "FocusedNodeChanged" type = "ASPxClientEvent">
    ///Fires in response to changing node focus.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires after the selection has been changed.
    ///</field>
    ///<field name = "CustomizationWindowCloseUp" type = "ASPxClientEvent">
    ///Fires after the Customization Window has been closed.
    ///</field>
    ///<field name = "CustomDataCallback" type = "ASPxClientEvent">
    ///Fires after the callback has been processed in the CustomDataCallback event handler.
    ///</field>
    ///<field name = "NodeClick" type = "ASPxClientEvent">
    ///Fires on the client when a node is clicked.
    ///</field>
    ///<field name = "NodeDblClick" type = "ASPxClientEvent">
    ///Fires on the client when a node is double clicked.
    ///</field>
    ///<field name = "NodeExpanding" type = "ASPxClientEvent">
    ///Fires before a node is expanded.
    ///</field>
    ///<field name = "NodeCollapsing" type = "ASPxClientEvent">
    ///Fires before a node is collapsed.
    ///</field>
    ///<field name = "StartDragNode" type = "ASPxClientEvent">
    ///Occurs before a node is dragged by an end-user.
    ///</field>
    ///<field name = "EndDragNode" type = "ASPxClientEvent">
    ///Occurs after a node drag and drop operation is completed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientTreeListColumn = function() {
    ///<summary>
    ///Represents a client column.
    ///</summary>
    ///<field name = "index">
    ///Gets the column's position within the collection. Value: An integer zero-bazed index that specifies the column's position within the collection.
    ///</field>
    ///<field name = "name">
    ///Gets the column's name. Value: A String value that specifies the column's name.
    ///</field>
    ///<field name = "fieldName">
    ///Gets the name of the database field assigned to the current column. Value: A String value that specifies the name of a data field.
    ///</field>
};
ASPxClientTreeListCustomDataCallbackEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomDataCallback event.
    ///</summary>
    ///<field name = "arg">
    ///Gets the information that has been collected on the client-side and sent to the  server-side CustomDataCallback event. Value: A string value that represents the information that has been collected on the client-side and sent to the server-side CustomDataCallback event.
    ///</field>
    ///<field name = "result">
    ///Gets the information passed from the server-side CustomDataCallback event. Value: An object that represents the information passed from the server-side CustomDataCallback event.
    ///</field>
};
ASPxClientTreeListCustomDataCallbackEventHandler = function() {
    ///<summary>
    ///A method that will handle the CustomDataCallback event.
    ///</summary>
};
ASPxClientTreeListNodeEventArgs = function() {
    ///<summary>
    ///Provides data for the NodeDblClick events.
    ///</summary>
    ///<field name = "nodeKey">
    ///Gets the processed node's key value. Value: A String value that identifies the processed node.
    ///</field>
    ///<field name = "htmlEvent">
    ///Provides access to the parameters associated with the NodeDblClick events. Value: An object that contains parameters associated with the event.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientTreeListNodeEventHandler = function() {
    ///<summary>
    ///A method that will handle the NodeDblClick event.
    ///</summary>
};
ASPxClientTreeListContextMenuEventArgs = function() {
    ///<summary>
    ///Provides data for the ContextMenu event.
    ///</summary>
    ///<field name = "objectType">
    ///Identifies which tree list element has been right-clicked. Value: A string value that identifies which tree list element ('Header' or 'Node') has been right-clicked.
    ///</field>
    ///<field name = "objectKey">
    ///Gets a value that identifies the right-clicked object. Value: The right-clicked object's identifier.
    ///</field>
    ///<field name = "htmlEvent">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that relates to the processed event.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets whether to invoke the browser's context menu. Value: true to hide the browser's context menu; otherwise, false.
    ///</field>
};
ASPxClientTreeListContextMenuEventHandler = function() {
    ///<summary>
    ///A method that will handle the ContextMenu event.
    ///</summary>
};
ASPxClientTreeListStartDragNodeEventArgs = function() {
    ///<summary>
    ///Provides data for the StartDragNode event.
    ///</summary>
    ///<field name = "targets">
    ///Gets an array of targets where a node can be dragged. Value: An array of objects that represent targets for the dragged node.
    ///</field>
    ///<field name = "nodeKey">
    ///Gets the processed node's key value. Value: A String value that identifies the processed node.
    ///</field>
    ///<field name = "htmlEvent">
    ///Provides access to the parameters associated with the NodeDblClick events. Value: An object that contains parameters associated with the event.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientTreeListStartDragNodeEventHandler = function() {
    ///<summary>
    ///A method that will handle the StartDragNode event.
    ///</summary>
};
ASPxClientTreeListEndDragNodeEventArgs = function() {
    ///<summary>
    ///Provides data for the EndDragNode event.
    ///</summary>
    ///<field name = "targetElement">
    ///Gets the target element. Value: An object that represents the target element to which the dragged node has been dropped.
    ///</field>
    ///<field name = "nodeKey">
    ///Gets the processed node's key value. Value: A String value that identifies the processed node.
    ///</field>
    ///<field name = "htmlEvent">
    ///Provides access to the parameters associated with the NodeDblClick events. Value: An object that contains parameters associated with the event.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientTreeListEndDragNodeEventHandler = function() {
    ///<summary>
    ///A method that will handle the EndDragNode event.
    ///</summary>
};
ASPxClientTreeListCustomButtonEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomButtonClick event.
    ///</summary>
    ///<field name = "nodeKey">
    ///Gets the key value of the node whose custom button has been clicked. Value: A string value that uniquely identifies the node whose custom button has been clicked.
    ///</field>
    ///<field name = "buttonIndex">
    ///Gets the button's index. Value: An integer value that specifies the button's position within the CustomButtons collection.
    ///</field>
    ///<field name = "buttonID">
    ///Gets the value which identifies the custom button. Value: An integer value that identifies the clicked custom button.
    ///</field>
};
ASPxClientTreeListCustomButtonEventHandler = function() {
    ///<summary>
    ///A method that will handle the CustomButtonClick event.
    ///</summary>
};
ASPxClientTreeListValuesCallback = function() {
    ///<summary>
    ///Represents a JavaScript function which receives the list of row values when a specific client method (such as the GetSelectedNodeValues) is called.
    ///</summary>
};
MVCxClientCallbackPanel = function() {
    ///<summary>
    ///A CallbackPanel client-side object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientCallbackPanel.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
MVCxClientChart = function() {
    ///<summary>
    ///A Chart client-side object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "ObjectHotTracked" type = "ASPxClientEvent">
    ///Occurs on the client side when any chart element is hot-tracked.
    ///</field>
    ///<field name = "ObjectSelected" type = "ASPxClientEvent">
    ///Occurs on the client side when any chart element is selected.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
MVCxClientComboBox = function() {
    ///<summary>
    ///A ComboBox client-side object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientComboBox.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
MVCxClientGridView = function() {
    ///<summary>
    ///A GridView client-side object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires after the selection has been changed.
    ///</field>
    ///<field name = "FocusedRowChanged" type = "ASPxClientEvent">
    ///Fires in response to changing row focus.
    ///</field>
    ///<field name = "ColumnSorting" type = "ASPxClientEvent">
    ///Enables you to prevent columns from being sorted.
    ///</field>
    ///<field name = "ColumnGrouping" type = "ASPxClientEvent">
    ///Enables you to cancel data grouping.
    ///</field>
    ///<field name = "ColumnMoving" type = "ASPxClientEvent">
    ///Enables you to control column movement.
    ///</field>
    ///<field name = "ColumnStartDragging" type = "ASPxClientEvent">
    ///Fires when an end-user starts dragging the column's header and enables you to cancel this operation.
    ///</field>
    ///<field name = "ColumnResizing" type = "ASPxClientEvent">
    ///Enables you to prevent columns from being resized.
    ///</field>
    ///<field name = "ColumnResized" type = "ASPxClientEvent">
    ///Occurs after a column's width has been changed by an end-user.
    ///</field>
    ///<field name = "RowExpanding" type = "ASPxClientEvent">
    ///Fires before a group row is expanded.
    ///</field>
    ///<field name = "RowCollapsing" type = "ASPxClientEvent">
    ///Fires before a group row is collapsed.
    ///</field>
    ///<field name = "DetailRowExpanding" type = "ASPxClientEvent">
    ///Fires before a detail row is expanded.
    ///</field>
    ///<field name = "DetailRowCollapsing" type = "ASPxClientEvent">
    ///Fires before a detail row is collapsed.
    ///</field>
    ///<field name = "RowClick" type = "ASPxClientEvent">
    ///Fires on the client when a data row is clicked.
    ///</field>
    ///<field name = "RowDblClick" type = "ASPxClientEvent">
    ///Fires on the client when a data row is double clicked.
    ///</field>
    ///<field name = "ContextMenu" type = "ASPxClientEvent">
    ///Enables you to display a context menu.
    ///</field>
    ///<field name = "CustomizationWindowCloseUp" type = "ASPxClientEvent">
    ///Fires after the Customization Window has been closed.
    ///</field>
    ///<field name = "CustomButtonClick" type = "ASPxClientEvent">
    ///Occurs when a custom command button has been clicked.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientGridView.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
MVCxClientHtmlEditor = function() {
    ///<summary>
    ///An HtmlEditor client-side object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "CustomCommand" type = "ASPxClientEvent">
    ///Enables you to implement a custom command's logic.
    ///</field>
    ///<field name = "CommandExecuted" type = "ASPxClientEvent">
    ///Occurs after a default or custom command has been executed on the client side.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's Design View Area receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's Design View Area loses input focus.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Occurs on the client when a selection is changed within the ASPxHtmlEditor.
    ///</field>
    ///<field name = "HtmlChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the content of the editor changes.
    ///</field>
    ///<field name = "CustomDialogOpened" type = "ASPxClientEvent">
    ///Occurs on the client side after a custom dialog is opened.
    ///</field>
    ///<field name = "CustomDialogClosing" type = "ASPxClientEvent">
    ///Fires on the client side before a custom dialog is closed.
    ///</field>
    ///<field name = "CustomDialogClosed" type = "ASPxClientEvent">
    ///Occurs on the client side after a custom dialog is closed.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the ASPxHtmlEditor is valid.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientHtmlEditor.
    ///</field>
    ///<field name = "CustomDataCallback" type = "ASPxClientEvent">
    ///Fires after a callback, sent by the CustomDataCallback event handler.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
MVCxClientListBox = function() {
    ///<summary>
    ///A ListBox client-side object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientListBox.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list box has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "ItemDoubleClick" type = "ASPxClientEvent">
    ///Occurs on the client when the editor's item is selected, by double clicking.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
MVCxClientNavBar = function() {
    ///<summary>
    ///A NavBar client-side object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after an item has been clicked.
    ///</field>
    ///<field name = "ExpandedChanged" type = "ASPxClientEvent">
    ///Fires on the client side after a group's expansion state has been changed.
    ///</field>
    ///<field name = "ExpandedChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the expansion state of a group is changed.
    ///</field>
    ///<field name = "HeaderClick" type = "ASPxClientEvent">
    ///Fires when a group header is clicked.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientNavBar.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
MVCxClientReportViewer = function() {
    ///<summary>
    ///Represents ReportView's client counterpart.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "PageLoad" type = "ASPxClientEvent">
    ///Occurs on the client side when another report page is loaded into this ASPxClientReportViewer instance.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
MVCxClientPageControl = function() {
    ///<summary>
    ///A PageControl client-side object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "TabClick" type = "ASPxClientEvent">
    ///Fires when a tab is clicked.
    ///</field>
    ///<field name = "ActiveTabChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the active tab has been changed within a tab control.
    ///</field>
    ///<field name = "ActiveTabChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the active tab is changed within a tab control.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by a client tab control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
MVCxClientTreeView = function() {
    ///<summary>
    ///A TreeView client-side object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "NodeClick" type = "ASPxClientEvent">
    ///Fires on the client side after a node has been clicked.
    ///</field>
    ///<field name = "ExpandedChanged" type = "ASPxClientEvent">
    ///Fires on the client side after a node's expansion state has been changed.
    ///</field>
    ///<field name = "ExpandedChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the expansion state of a node is changed.
    ///</field>
    ///<field name = "CheckedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the node's checked state is changed by clicking on a check box.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientTreeView.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
MVCxClientUploadControl = function() {
    ///<summary>
    ///An UploadControl client-side object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "FileUploadComplete" type = "ASPxClientEvent">
    ///Occurs on the client after the file uploading has been completed.
    ///</field>
    ///<field name = "FilesUploadComplete" type = "ASPxClientEvent">
    ///Occurs on the client after upload of all selected files has been completed.
    ///</field>
    ///<field name = "FileUploadStart" type = "ASPxClientEvent">
    ///Occurs on the client side when uploading of the specified file starts by the Upload method.
    ///</field>
    ///<field name = "UploadingProgressChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the progress bar indicator position is changed.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the text within the control's edit box is changed while the control has focus.
    ///</field>
    ///<field name = "FileInputCountChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the file input elements count is changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
MVCxClientBeginCallbackEventHandler = function() {
    ///<summary>
    ///A method that will handle client BeginCallback events.
    ///</summary>
};
MVCxClientBeginCallbackEventArgs = function() {
    ///<summary>
    ///Provides data for client BeginCallback events.
    ///</summary>
    ///<field name = "customArgs">
    ///Gets an object containing specific information (if any, as name/value pairs) that should be passed as a request parameter from the client to the server side for further processing. Value: A hash table object containing named values to be passed from the client to the server side via request parameters.
    ///</field>
    ///<field name = "command">
    ///Gets a command name that identifies which client action forced a callback to be occured. Value: A string value that represents the name of the command which initiated a callback.
    ///</field>
};
ASPxClientUtils = function() {
    ///<summary>
    ///Contains the FinalizeCallback method, allowing you to manually load DevExpress service resources (such as scripts, CSS files, etc.) after an external callback.
    ///</summary>
};
ASPxClientControl = function() {
    ///<summary>
    ///Serves as the base type for all the objects included in the client-side object model.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientCallback = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxCallback control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientCallback.
    ///</field>
    ///<field name = "CallbackComplete" type = "ASPxClientEvent">
    ///Fires on the client side when a callback initiated by the client Callback event's handler returns back to the client.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientCallbackCompleteEventHandler = function() {
    ///<summary>
    ///A method that will handle the client events related to completion of callback server-side processing.
    ///</summary>
};
ASPxClientEventArgs = function() {
    ///<summary>
    ///Serves as the base class for arguments of the web controls' client-side events.
    ///</summary>
};
ASPxClientCallbackCompleteEventArgs = function() {
    ///<summary>
    ///Provides data for events concerning the final processing of a callback.
    ///</summary>
    ///<field name = "parameter">
    ///Gets a string that contains specific information (if any) passed from the client side for server-side processing. Value: A string value representing specific information passed from the client to the server side.
    ///</field>
    ///<field name = "result">
    ///Gets a string that contains specific information (if any) that has been passed from the server to the client side for further processing. Value: A string value representing specific information passed from the server back to the client side.
    ///</field>
};
ASPxClientCallbackPanel = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxCallbackPanel control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientCallbackPanel.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientEvent = function() {
    ///<summary>
    ///Represents the event object used for client-side events.
    ///</summary>
};
ASPxClientEventHandler = function() {
    ///<summary>
    ///A method that will handle the client-side events of a web control's client-side equivalent.
    ///</summary>
};
ASPxClientCancelEventHandler = function() {
    ///<summary>
    ///A method that will handle the cancelable events of a web control's client-side equivalent.
    ///</summary>
};
ASPxClientCancelEventArgs = function() {
    ///<summary>
    ///Provides data for cancelable client events.
    ///</summary>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientProcessingModeEventHandler = function() {
    ///<summary>
    ///A method that will handle the client events which can't be cancelled and allow the event's processing to be passed to the server side.
    ///</summary>
};
ASPxClientProcessingModeEventArgs = function() {
    ///<summary>
    ///Provides data for the client events which can't be cancelled and allow the event's processing to be passed to the server side.
    ///</summary>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientProcessingModeCancelEventHandler = function() {
    ///<summary>
    ///A method that will handle the cancelable client-side events which allow the event's processing to be passed to the server side.
    ///</summary>
};
ASPxClientProcessingModeCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the cancelable client-side events which allow the event's processing to be passed to the server side.
    ///</summary>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientBeginCallbackEventHandler = function() {
    ///<summary>
    ///A method that will handle the client events related to the begining of a callback processing round trip.
    ///</summary>
};
ASPxClientBeginCallbackEventArgs = function() {
    ///<summary>
    ///Provides data for client events related to the beginning of a callback processing round trip.
    ///</summary>
    ///<field name = "command">
    ///Gets a command name that identifies which client action forced a callback to be occured. Value: A string value that represents the name of the command which initiated a callback.
    ///</field>
};
ASPxClientEndCallbackEventHandler = function() {
    ///<summary>
    ///A method that will handle the client events related to the completion of a callback processing round trip.
    ///</summary>
};
ASPxClientEndCallbackEventArgs = function() {
    ///<summary>
    ///Provides data for client events related to the completion of a callback processing round trip.
    ///</summary>
};
ASPxClientCustomDataCallbackEventHandler = function() {
    ///<summary>
    ///A method that will handle a CustomCallback client event exposed by some DevExpress web controls.
    ///</summary>
};
ASPxClientCustomDataCallbackEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomCallback event.
    ///</summary>
    ///<field name = "result">
    ///Gets a string that contains specific information (if any) that has been passed from the server to the client side for further processing, related to the CustomCallback event. Value: A string value representing specific information passed from the server back to the client side.
    ///</field>
};
ASPxClientCallbackErrorEventHandler = function() {
    ///<summary>
    ///A method that will handle client events related to server-side errors that occured during callback processing.
    ///</summary>
};
ASPxClientCallbackErrorEventArgs = function() {
    ///<summary>
    ///Provides data for client events related to server-side errors that occured during callback processing.
    ///</summary>
    ///<field name = "message">
    ///Gets the error message that describes the server error that occurred. Value: A string value that represents the error message.
    ///</field>
    ///<field name = "handled">
    ///Gets or sets whether the event is handled and the default error handling actions are not required. Value: true if the error is handled and no default processing is required; otherwise false.
    ///</field>
};
ASPxClientControlsInitializedEventHandler = function() {
    ///<summary>
    ///A method that will handle the client ControlsInitialized event.
    ///</summary>
};
ASPxClientControlsInitializedEventArgs = function() {
    ///<summary>
    ///Provides data for the client ControlsInitialized event.
    ///</summary>
    ///<field name = "isCallback">
    ///Gets a value that specifies whether a callback is sent during a controls initialization. Value: true if a callback is sent; otherwise, false.
    ///</field>
};
ASPxClientControlCollection = function() {
    ///<summary>
    ///A collection object used on the client side to maintain particular client control objects
    ///</summary>
    ///<field name = "ControlsInitialized" type = "ASPxClientEvent">
    ///Occurs on the client side after the collection of client control objects has been initialized, and the client controls are displayed within the browser.
    ///</field>
};
ASPxClientDataCallback = function() {
    ///<summary>
    ///Represents a JavaScript function which receives callback data obtained via a call to a specific client method (such as the PerformDataCallback).
    ///</summary>
};
ASPxClientUtils = function() {
    ///<summary>
    ///Represents an object containing service static functions and properties which can be useful when performing client-side processing.
    ///</summary>
    ///<field name = "agent">
    ///Gets the user-agent string, which identifies the client browser and provides certain system details of the client computer. Value: A string value representing the browser's user-agent string.
    ///</field>
    ///<field name = "opera">
    ///Gets a value that specifies whether the client browser is Opera. Value: true if the client browser is Opera; otherwise, false.
    ///</field>
    ///<field name = "opera9">
    ///Gets a value that specifies whether the client browser is Opera version 9. Value: true if the client browser is Opera version 9; otherwise, false.
    ///</field>
    ///<field name = "safari">
    ///Gets a value that specifies whether the client browser is Safari. Value: true if the client browser is Safari; otherwise, false.
    ///</field>
    ///<field name = "safari3">
    ///Gets a value that specifies whether the client browser is Safari version 3. Value: true if the client browser is Safari version 3; otherwise, false.
    ///</field>
    ///<field name = "safariMacOS">
    ///Gets a value that specifies whether the client browser is Safari, running under a MacOS operating system. Value: true if the client browser is Safari, running under a MacOS operating system; otherwise, false.
    ///</field>
    ///<field name = "chrome">
    ///Gets a value that specifies whether the client browser is Google Chrome. Value: true if the client browser is Google Chrome; otherwise, false.
    ///</field>
    ///<field name = "ie">
    ///Gets a value that specifies whether the client browser is Internet Explorer. Value: true if the client browser is Intenet Explorer; otherwise, false.
    ///</field>
    ///<field name = "ie55">
    ///Gets a value that specifies whether the client browser is Internet Explorer version 5.5. Value: true if the client browser is Intenet Explorer version 5.5; otherwise, false.
    ///</field>
    ///<field name = "ie7">
    ///Gets a value that specifies whether the client browser is Internet Explorer version 7. Value: true if the client browser is Intenet Explorer version 7; otherwise, false.
    ///</field>
    ///<field name = "firefox">
    ///Gets a value that specifies whether the client browser is Firefox. Value: true if the client browser is Firefox; otherwise, false.
    ///</field>
    ///<field name = "firefox3">
    ///Gets a value that specifies whether the client browser is Firefox version 3. Value: true if the client browser is Firefox version 3; otherwise, false.
    ///</field>
    ///<field name = "mozilla">
    ///Gets a value that specifies whether the client browser is Mozilla. Value: true if the client browser is Mozilla; otherwise, false.
    ///</field>
    ///<field name = "netscape">
    ///Gets a value that specifies whether the client browser is Netscape. Value: true if the client browser is Netscape; otherwise, false.
    ///</field>
    ///<field name = "browserVersion">
    ///Gets a value that specifies a client browser's full version. Value: A double precision floating-point value that specifies a client browser's version.
    ///</field>
    ///<field name = "browserMajorVersion">
    ///Gets a value that specifies a client browser's major version. Value: An integer value that specifies a client browser's major version.
    ///</field>
    ///<field name = "macOSPlatform">
    ///Gets a value that specifies whether the application is run under a MacOS platform. Value: true if the application is run under the MacOS platform; otherwise, false.
    ///</field>
    ///<field name = "windowsPlatform">
    ///Gets a value that specifies whether the application is run under the Windows platform. Value: true if the application is run under the Windows platform; otherwise, false.
    ///</field>
    ///<field name = "webKitFamily">
    ///Gets a value that specifies whether a client browser is based on WebKit. Value: true if the client browser is based on WebKit; otherwise, false.
    ///</field>
    ///<field name = "netscapeFamily">
    ///Gets a value that specifies whether a client browser is based on Netscape. Value: true if client browser is based on Netscape; otherwise, false.
    ///</field>
};
ASPxClientCloudControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxCloudControl control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after an item has been clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientCloudControlItemEventHandler = function() {
    ///<summary>
    ///A method that will handle client events involving manipulations with the control's items.
    ///</summary>
};
ASPxClientCloudControlItemEventArgs = function() {
    ///<summary>
    ///Provides data for events which involve clicking on the control's items.
    ///</summary>
    ///<field name = "name">
    ///Gets the name that uniquely identifies the processed item. Value: A string value that represents the value assigned to the item's Name property.
    ///</field>
    ///<field name = "htmlElement">
    ///Gets the HTML object that contains the processed item. Value: An object representing a container for the item related to the event.
    ///</field>
    ///<field name = "htmlEvent">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientDataView = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxDataView object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientDataView.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientDockingFilterPredicate = function() {
    ///<summary>
    ///A JavaScript function which returns a value specifying whether an object meets the criteria defined within the method specified by this delegate.
    ///</summary>
};
ASPxClientDockManager = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxDockManager   object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeforeDock" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is docked in a zone and allows you to cancel the action.
    ///</field>
    ///<field name = "AfterDock" type = "ASPxClientEvent">
    ///Fires on the client side after a panel is docked in a zone.
    ///</field>
    ///<field name = "BeforeFloat" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is undocked from a zone and allows you to cancel the action.
    ///</field>
    ///<field name = "AfterFloat" type = "ASPxClientEvent">
    ///Fires on the client side after a panel is undocked from a zone.
    ///</field>
    ///<field name = "StartPanelDragging" type = "ASPxClientEvent">
    ///Occurs when a panel dragging operation is started.
    ///</field>
    ///<field name = "EndPanelDragging" type = "ASPxClientEvent">
    ///Occurs after a panel dragging operation is complete.
    ///</field>
    ///<field name = "PanelClosing" type = "ASPxClientEvent">
    ///Occurs on the client side before a panel is closed, and allows you to cancel the action.
    ///</field>
    ///<field name = "PanelCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a panel is closed.
    ///</field>
    ///<field name = "PanelPopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a panel pops up.
    ///</field>
    ///<field name = "PanelShown" type = "ASPxClientEvent">
    ///Occurs on the client side after a panel has been invoked.
    ///</field>
    ///<field name = "PanelResize" type = "ASPxClientEvent">
    ///Occurs on the client side after a panel has been resized.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientDockManagerProcessingModeCancelEventHandler = function() {
    ///<summary>
    ///A method that will handle the client BeforeDock event.
    ///</summary>
};
ASPxClientDockManagerProcessingModeCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the BeforeDock event.
    ///</summary>
    ///<field name = "panel">
    ///Gets the panel currently being processed. Value: An ASPxClientDockPanel object that is the processed panel.
    ///</field>
    ///<field name = "zone">
    ///Gets the zone currently being processed. Value: An ASPxClientDockZone object that is the processed zone.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientDockManagerProcessingModeEventHandler = function() {
    ///<summary>
    ///A method that will handle the client AfterDock event.
    ///</summary>
};
ASPxClientDockManagerProcessingModeEventArgs = function() {
    ///<summary>
    ///Provides data for the AfterDock event.
    ///</summary>
    ///<field name = "panel">
    ///Gets the panel currently being processed. Value: An ASPxClientDockPanel object that is the processed panel.
    ///</field>
    ///<field name = "zone">
    ///Gets the zone currently being processed. Value: An ASPxClientDockZone object that is the processed zone.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientDockManagerEventHandler = function() {
    ///<summary>
    ///A method that will handle client-side events concerning manipulations with panels.
    ///</summary>
};
ASPxClientDockManagerEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern manipulations on panels.
    ///</summary>
    ///<field name = "panel">
    ///Gets the panel currently being processed. Value: An ASPxClientDockPanel object that is the processed panel.
    ///</field>
};
ASPxClientDockManagerCancelEventHandler = function() {
    ///<summary>
    ///A method that will handle the client BeforeDock event.
    ///</summary>
};
ASPxClientDockManagerCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the BeforeDock event.
    ///</summary>
    ///<field name = "panel">
    ///Gets the panel currently being processed. Value: An ASPxClientDockPanel object that is the processed panel.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientPopupControlBase = function() {
    ///<summary>
    ///Serves as a base class for the ASPxClientPopupControl classes.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeforeResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing initiates.
    ///</field>
    ///<field name = "AfterResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing completes.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the control.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window closes or hides.
    ///</field>
    ///<field name = "Closing" type = "ASPxClientEvent">
    ///Enables you to cancel window closing on the client side.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window is invoked.
    ///</field>
    ///<field name = "Resize" type = "ASPxClientEvent">
    ///Occurs on the client side after a control's window has been resized.
    ///</field>
    ///<field name = "Shown" type = "ASPxClientEvent">
    ///Occurs on the client side after a control's window has been invoked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientDockPanel = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxDockPanel object.
    ///</summary>
    ///<field name = "panelUID">
    ///Gets or sets the unique identifier of a panel on a page. Value: A string that is the unique identifier of a panel.
    ///</field>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeforeDock" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is docked in a zone and allows you to cancel the action.
    ///</field>
    ///<field name = "AfterDock" type = "ASPxClientEvent">
    ///Fires on the client side after a panel is docked in a zone.
    ///</field>
    ///<field name = "BeforeFloat" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is undocked from a zone and allows you to cancel the action.
    ///</field>
    ///<field name = "AfterFloat" type = "ASPxClientEvent">
    ///Fires on the client side after a panel is undocked from a zone.
    ///</field>
    ///<field name = "StartDragging" type = "ASPxClientEvent">
    ///Occurs when a panel dragging operation is started.
    ///</field>
    ///<field name = "EndDragging" type = "ASPxClientEvent">
    ///Occurs after a panel dragging operation is complete.
    ///</field>
    ///<field name = "BeforeResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing initiates.
    ///</field>
    ///<field name = "AfterResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing completes.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the control.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window closes or hides.
    ///</field>
    ///<field name = "Closing" type = "ASPxClientEvent">
    ///Enables you to cancel window closing on the client side.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window is invoked.
    ///</field>
    ///<field name = "Resize" type = "ASPxClientEvent">
    ///Occurs on the client side after a control's window has been resized.
    ///</field>
    ///<field name = "Shown" type = "ASPxClientEvent">
    ///Occurs on the client side after a control's window has been invoked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientDockPanelProcessingModeCancelEventHandler = function() {
    ///<summary>
    ///A method that will handle the client BeforeDock event.
    ///</summary>
};
ASPxClientDockPanelProcessingModeCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the BeforeDock event.
    ///</summary>
    ///<field name = "zone">
    ///Gets the zone currently being processed. Value: An ASPxClientDockZone object that is the processed zone.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientDockPanelProcessingModeEventHandler = function() {
    ///<summary>
    ///A method that will handle the client BeforeDock event.
    ///</summary>
};
ASPxClientDockPanelProcessingModeEventArgs = function() {
    ///<summary>
    ///Provides data for the AfterFloat event.
    ///</summary>
    ///<field name = "zone">
    ///Gets the zone currently being processed. Value: An ASPxClientDockZone object that is the processed zone.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientDockZone = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxDockZone object.
    ///</summary>
    ///<field name = "zoneUID">
    ///Gets or sets the unique identifier of a zone on a page. Value: A string that is the unique identifier of a zone.
    ///</field>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeforeDock" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is docked in a zone and allows you to cancel the action.
    ///</field>
    ///<field name = "AfterDock" type = "ASPxClientEvent">
    ///Fires on the client side after a panel is docked in a zone.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientDockZoneCancelEventHandler = function() {
    ///<summary>
    ///A method that will handle the client BeforeDock event.
    ///</summary>
};
ASPxClientDockZoneCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the BeforeDock event.
    ///</summary>
    ///<field name = "panel">
    ///Gets the panel currently being processed. Value: An ASPxClientDockPanel object that is the processed panel.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientDockZoneProcessingModeEventHandler = function() {
    ///<summary>
    ///A method that will handle the client AfterDock event.
    ///</summary>
};
ASPxClientDockZoneProcessingModeEventArgs = function() {
    ///<summary>
    ///Provides data for the AfterDock event.
    ///</summary>
    ///<field name = "panel">
    ///Gets the panel currently being processed. Value: An ASPxClientDockPanel object that is the processed panel.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientFileManager = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxFileManager control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientFileManager.
    ///</field>
    ///<field name = "SelectedFileChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the selected file has been changed.
    ///</field>
    ///<field name = "SelectedFileOpened" type = "ASPxClientEvent">
    ///Fires on the client side when an end-user opens a file by double-clicking it or pressing the Enter key.
    ///</field>
    ///<field name = "FolderCreating" type = "ASPxClientEvent">
    ///Fires on the client side before the folder is created, and allows you to cancel the action.
    ///</field>
    ///<field name = "FolderCreated" type = "ASPxClientEvent">
    ///Occurs on the client side after a folder has been created.
    ///</field>
    ///<field name = "ItemRenaming" type = "ASPxClientEvent">
    ///Fires on the client side before an item is renamed and allows you to cancel the action.
    ///</field>
    ///<field name = "ItemRenamed" type = "ASPxClientEvent">
    ///Occurs on the client side after a file manager's item has been renamed.
    ///</field>
    ///<field name = "ItemDeleting" type = "ASPxClientEvent">
    ///Fires on the client side before an item is deleted and allows you to cancel the action.
    ///</field>
    ///<field name = "ItemDeleted" type = "ASPxClientEvent">
    ///Occurs on the client side after a file manager's item has been deleted.
    ///</field>
    ///<field name = "ItemMoving" type = "ASPxClientEvent">
    ///Fires on the client side before an item is moved and allows you to cancel the action.
    ///</field>
    ///<field name = "ItemMoved" type = "ASPxClientEvent">
    ///Occurs on the client side after a file manager's item has been moved.
    ///</field>
    ///<field name = "ErrorOccurred" type = "ASPxClientEvent">
    ///Fires on the client if any error occurs while editing an item.
    ///</field>
    ///<field name = "FileUploading" type = "ASPxClientEvent">
    ///Fires on the client side before a file upload starts, and allows you to cancel the action.
    ///</field>
    ///<field name = "FileUploaded" type = "ASPxClientEvent">
    ///Occurs on the client side after a file has been uploaded.
    ///</field>
    ///<field name = "FileDownloading" type = "ASPxClientEvent">
    ///Fires on the client side before a file download starts, and allows you to cancel the action.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientFileManagerFile = function() {
    ///<summary>
    ///Represents the client-side equivalent of the FileManagerFile object.
    ///</summary>
    ///<field name = "name">
    ///Gets the name of the current file. Value: A string value that represents the file's name.
    ///</field>
};
ASPxClientFileManagerFileEventHandler = function() {
    ///<summary>
    ///A method that will handle the client SelectedFileOpened events.
    ///</summary>
};
ASPxClientFileManagerFileEventArgs = function() {
    ///<summary>
    ///Provides data for the SelectedFileOpened events.
    ///</summary>
    ///<field name = "file">
    ///Gets a file related to the event. Value: An ASPxClientFileManagerFile object that represents a file currently being processed.
    ///</field>
};
ASPxClientFileManagerFileOpenedEventHandler = function() {
    ///<summary>
    ///A method that will handle the client SelectedFileOpened event.
    ///</summary>
};
ASPxClientFileManagerFileOpenedEventArgs = function() {
    ///<summary>
    ///Provides data for the SelectedFileOpened event.
    ///</summary>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
    ///<field name = "file">
    ///Gets a file related to the event. Value: An ASPxClientFileManagerFile object that represents a file currently being processed.
    ///</field>
};
ASPxClientFileManagerActionEventArgsBase = function() {
    ///<summary>
    ///Serves as a base for classes that are used as arguments for events generated on the client side.
    ///</summary>
    ///<field name = "fullName">
    ///Gets the full name of the item currently being processed. Value: A string value that is the item's full name.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the currently processed item. Value: A string value that specifies the item's name.
    ///</field>
    ///<field name = "isFolder">
    ///Gets a value specifying whether the current processed item is a folder. Value: true if the processed  item is a folder; false if the processed item is a file.
    ///</field>
};
ASPxClientFileManagerEditingEventHandler = function() {
    ///<summary>
    ///A method that will handle the file manager's cancelable client events concerning manipulations with an item.
    ///</summary>
};
ASPxClientFileManagerEditingEventArgs = function() {
    ///<summary>
    ///Provides data for cancellable events which concern manipulations on items.
    ///</summary>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "fullName">
    ///Gets the full name of the item currently being processed. Value: A string value that is the item's full name.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the currently processed item. Value: A string value that specifies the item's name.
    ///</field>
    ///<field name = "isFolder">
    ///Gets a value specifying whether the current processed item is a folder. Value: true if the processed  item is a folder; false if the processed item is a file.
    ///</field>
};
ASPxClientFileManagerRenameEventHandler = function() {
    ///<summary>
    ///A method that will handle the client ItemRenamed event.
    ///</summary>
};
ASPxClientFileManagerRenameEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemRenamed event.
    ///</summary>
    ///<field name = "oldName">
    ///Gets an item's name before modification. Value: A string value that specifies the item's old name.
    ///</field>
    ///<field name = "fullName">
    ///Gets the full name of the item currently being processed. Value: A string value that is the item's full name.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the currently processed item. Value: A string value that specifies the item's name.
    ///</field>
    ///<field name = "isFolder">
    ///Gets a value specifying whether the current processed item is a folder. Value: true if the processed  item is a folder; false if the processed item is a file.
    ///</field>
};
ASPxClientFileManagerDeleteEventHandler = function() {
    ///<summary>
    ///A method that will handle the client ItemDeleted event.
    ///</summary>
};
ASPxClientFileManagerDeleteEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemDeleted event.
    ///</summary>
    ///<field name = "fullName">
    ///Gets the full name of the item currently being processed. Value: A string value that is the item's full name.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the currently processed item. Value: A string value that specifies the item's name.
    ///</field>
    ///<field name = "isFolder">
    ///Gets a value specifying whether the current processed item is a folder. Value: true if the processed  item is a folder; false if the processed item is a file.
    ///</field>
};
ASPxClientFileManagerMoveEventHandler = function() {
    ///<summary>
    ///A method that will handle the client ItemMoved event.
    ///</summary>
};
ASPxClientFileManagerMoveEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemMoved event.
    ///</summary>
    ///<field name = "oldFolderFullName">
    ///Gets the full name of the folder from which an item is moved. Value: A string value that specifies the folder's full name.
    ///</field>
    ///<field name = "fullName">
    ///Gets the full name of the item currently being processed. Value: A string value that is the item's full name.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the currently processed item. Value: A string value that specifies the item's name.
    ///</field>
    ///<field name = "isFolder">
    ///Gets a value specifying whether the current processed item is a folder. Value: true if the processed  item is a folder; false if the processed item is a file.
    ///</field>
};
ASPxClientFileManagerCreateEventHandler = function() {
    ///<summary>
    ///A method that will handle the client FolderCreated event.
    ///</summary>
};
ASPxClientFileManagerCreateEventArgs = function() {
    ///<summary>
    ///Provides data for the FolderCreated event.
    ///</summary>
    ///<field name = "fullName">
    ///Gets the full name of the item currently being processed. Value: A string value that is the item's full name.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the currently processed item. Value: A string value that specifies the item's name.
    ///</field>
    ///<field name = "isFolder">
    ///Gets a value specifying whether the current processed item is a folder. Value: true if the processed  item is a folder; false if the processed item is a file.
    ///</field>
};
ASPxClientFileManagerErrorEventHandler = function() {
    ///<summary>
    ///A method that will handle the client ErrorOccurred event.
    ///</summary>
};
ASPxClientFileManagerErrorEventArgs = function() {
    ///<summary>
    ///Provides data for the ErrorOccurred event.
    ///</summary>
    ///<field name = "commandName">
    ///Gets the name of the processed command. Value: A string value representing the processed command's name.
    ///</field>
    ///<field name = "errorText">
    ///Gets or sets the error description. Value: A string value representing the error description.
    ///</field>
    ///<field name = "showAlert">
    ///Gets or sets a value specifying whether an alert message is displayed when the error occurs. Value: true to display an alert message; otherwise, false.
    ///</field>
    ///<field name = "errorCode">
    ///Gets a specifically generated code that uniquely identifies an error, which occurs while editing an item. Value: An integer value that specifies the code uniquely identifying an error.
    ///</field>
};
ASPxClientFileManagerUploadEventHandler = function() {
    ///<summary>
    ///A method that will handle the client FileUploading event.
    ///</summary>
};
ASPxClientFileManagerUploadEventArgs = function() {
    ///<summary>
    ///Provides data for the FileUploading event.
    ///</summary>
    ///<field name = "folder">
    ///Gets the path to the folder where a file is being uploaded. Value: A string value specifying the path, where a file is being uploaded.
    ///</field>
    ///<field name = "fileName">
    ///Gets the name of the file, selected on the client to upload. Value: A string value that represents the file name.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientFileManagerUploadedEventHandler = function() {
    ///<summary>
    ///A method that will handle the FileUploaded event.
    ///</summary>
};
ASPxClientFileManagerUploadedEventArgs = function() {
    ///<summary>
    ///Provides data for the FileUploaded client event.
    ///</summary>
    ///<field name = "folder">
    ///Gets the path to the folder where a file is uploaded. Value: A string value specifying the uploaded file path.
    ///</field>
    ///<field name = "fileName">
    ///Gets the name of the uploaded file. Value: A string value that is the file name.
    ///</field>
};
ASPxClientFileManagerDownloadingEventHandler = function() {
    ///<summary>
    ///A method that will handle the client FileDownloading event.
    ///</summary>
};
ASPxClientFileManagerDownloadingEventArgs = function() {
    ///<summary>
    ///Provides data for the FileDownloading event.
    ///</summary>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the file download should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "file">
    ///Gets a file related to the event. Value: An ASPxClientFileManagerFile object that represents a file currently being processed.
    ///</field>
};
ASPxClientFileManagerCommandConsts = function() {
    ///<summary>
    ///Declares client constants that contain the names of ASPxFileManager's commands.
    ///</summary>
};
ASPxClientFileManagerErrorConsts = function() {
    ///<summary>
    ///Declares client constants containing codes of errors, that can occur while editing files.
    ///</summary>
};
ASPxClientGlobalEvents = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxGlobalEvents component.
    ///</summary>
    ///<field name = "ControlsInitialized" type = "ASPxClientEvent">
    ///Occurs on the client side after client object models of all DevExpress web controls contained within the page have been initialized.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated by any DevExpress control.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side, after server-side processing of a callback initiated by any DevExpress web control, has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by any of DevExpress web controls.
    ///</field>
    ///<field name = "ValidationCompleted" type = "ASPxClientEvent">
    ///Occurs on the client side after the validation initiated for a DevExpress web control (or a group of DevExpress web controls) has been completed.
    ///</field>
};
ASPxClientValidationCompletedEventHandler = function() {
    ///<summary>
    ///A method that will handle the ValidationCompleted client event.
    ///</summary>
};
ASPxClientValidationCompletedEventArgs = function() {
    ///<summary>
    ///Provides data for the ValidationCompleted client event that allows you to centrally validate user input within all DevExpress web controls to which validation is applied.
    ///</summary>
    ///<field name = "container">
    ///Gets a container object that holds the validated control(s). Value: An object that represents a container of the validated control(s).
    ///</field>
    ///<field name = "validationGroup">
    ///Gets the name of the validation group name to which validation has been applied. Value: A string value that represents the name of the validation group that has been validated.
    ///</field>
    ///<field name = "invisibleControlsValidated">
    ///Gets a value that indicates whether validation has been applied to both visible and invisible controls. Value: true if validation has been applied to both visible and invisible controls; false if only visible controls have been validated.
    ///</field>
    ///<field name = "isValid">
    ///Gets a value specifying whether the validation has been completed successfully. Value: true if the validation has been completed successfully; otherwise, false.
    ///</field>
    ///<field name = "firstInvalidControl">
    ///Gets the first control (either visible or invisible) that hasn't passed the validation applied. Value: An ASPxClientControl object that represents the first invalid control.
    ///</field>
    ///<field name = "firstVisibleInvalidControl">
    ///Gets the first visible control that hasn't passed the validation applied. Value: An ASPxClientControl object that represents the first visible invalid control.
    ///</field>
};
ASPxClientHiddenField = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxHiddenField control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientLoadingPanel = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxLoadingPanel control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientMenuBase = function() {
    ///<summary>
    ///Serves as the base type for the ASPxClientPopupMenu objects.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after a menu item has been clicked.
    ///</field>
    ///<field name = "ItemMouseOver" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor is moved into a menu item.
    ///</field>
    ///<field name = "ItemMouseOut" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor moves outside a menu item.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu pops up.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu closes.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientMenuCollection = function() {
    ///<summary>
    ///Represents a client collection that maintains client menu objects.
    ///</summary>
    ///<field name = "ControlsInitialized" type = "ASPxClientEvent">
    ///Occurs on the client side after the collection of client control objects has been initialized, and the client controls are displayed within the browser.
    ///</field>
};
ASPxClientMenuItem = function() {
    ///<summary>
    ///Represents a client-side equivalent of the menu's MenuItem object.
    ///</summary>
    ///<field name = "menu">
    ///Gets the menu object to which the current item belongs. Value: An ASPxClientMenuBase object representing the menu to which the item belongs.
    ///</field>
    ///<field name = "parent">
    ///Gets the immediate parent item to which the current item belongs. Value: An ASPxClientMenuItem object representing the item's immediate parent.
    ///</field>
    ///<field name = "index">
    ///Gets the item's index within the parent's collection of items. Value: An integer value representing the item's zero-based index within the Items collection of the parent object (a menu or item) to which the item belongs.
    ///</field>
    ///<field name = "name">
    ///Gets the name that uniquely identifies the menu item. Value: A string value that represents the value assigned to the item's Name property.
    ///</field>
};
ASPxClientMenu = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxMenu object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after a menu item has been clicked.
    ///</field>
    ///<field name = "ItemMouseOver" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor is moved into a menu item.
    ///</field>
    ///<field name = "ItemMouseOut" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor moves outside a menu item.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu pops up.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu closes.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientMenuItemEventHandler = function() {
    ///<summary>
    ///A method that will handle the menu's client events concerning manipulations with an item.
    ///</summary>
};
ASPxClientMenuItemEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern manipulations on menu items.
    ///</summary>
    ///<field name = "item">
    ///Gets the menu item object related to the event. Value: An ASPxClientMenuItem object, manipulations on which forced the event to be raised.
    ///</field>
};
ASPxClientMenuItemMouseEventHandler = function() {
    ///<summary>
    ///A method that will handle client events which relate to mouse hovering (such as entering or leaving) over menu items.
    ///</summary>
};
ASPxClientMenuItemMouseEventArgs = function() {
    ///<summary>
    ///Provides data for client events which relate to mouse hovering (such as entering or leaving) over menu items.
    ///</summary>
    ///<field name = "htmlElement">
    ///Gets the HTML object that contains the processed item. Value: An HTML object representing a container for the item related to the event.
    ///</field>
    ///<field name = "item">
    ///Gets the menu item object related to the event. Value: An ASPxClientMenuItem object, manipulations on which forced the event to be raised.
    ///</field>
};
ASPxClientMenuItemClickEventHandler = function() {
    ///<summary>
    ///A method that will handle client events concerning clicks on the control's items.
    ///</summary>
};
ASPxClientMenuItemClickEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern clicking on the control's items.
    ///</summary>
    ///<field name = "item">
    ///Gets the menu item object related to the event. Value: An ASPxClientMenuItem object, manipulations on which forced the event to be raised.
    ///</field>
    ///<field name = "htmlElement">
    ///Gets the HTML object that contains the processed item. Value: An object representing a container for the item related to the event.
    ///</field>
    ///<field name = "htmlEvent">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientNavBar = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxNavBar control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after an item has been clicked.
    ///</field>
    ///<field name = "ExpandedChanged" type = "ASPxClientEvent">
    ///Fires on the client side after a group's expansion state has been changed.
    ///</field>
    ///<field name = "ExpandedChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the expansion state of a group is changed.
    ///</field>
    ///<field name = "HeaderClick" type = "ASPxClientEvent">
    ///Fires when a group header is clicked.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientNavBar.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientNavBarGroup = function() {
    ///<summary>
    ///Represents a client-side equivalent of the navbar's NavBarGroup object.
    ///</summary>
    ///<field name = "navBar">
    ///Gets the navbar to which the current group belongs. Value: An ASPxClientNavBar object representing the navbar to which the group belongs.
    ///</field>
    ///<field name = "index">
    ///Gets the group's index within a collection of a navbar's groups. Value: An integer value representing the group's zero-based index within the Groups collection of the navbar to which the group belongs.
    ///</field>
    ///<field name = "name">
    ///Gets the name that uniquely identifies the group. Value: A string value that represents the value assigned to the group's Name property.
    ///</field>
};
ASPxClientNavBarItem = function() {
    ///<summary>
    ///Represents a client-side equivalent of the navbar's NavBarItem object.
    ///</summary>
    ///<field name = "navBar">
    ///Gets the navbar to which the current item belongs. Value: An ASPxClientNavBar object representing the navbar to which the item belongs.
    ///</field>
    ///<field name = "group">
    ///Gets the group to which the current item belongs. Value: An ASPxClientNavBarGroup object representing the group to which the item belongs.
    ///</field>
    ///<field name = "index">
    ///Gets the item's index within a collection of a group's items. Value: An integer value representing the item's zero-based index within the Items collection of the group to which the item belongs.
    ///</field>
    ///<field name = "name">
    ///Gets the name that uniquely identifies the item. Value: A string value that represents the value assigned to the item's Name property.
    ///</field>
};
ASPxClientNavBarItemEventHandler = function() {
    ///<summary>
    ///A method that will handle the navbar's client events concerning manipulations with an item.
    ///</summary>
};
ASPxClientNavBarItemEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern manipulations on items.
    ///</summary>
    ///<field name = "item">
    ///Gets the item object related to the event. Value: An ASPxClientNavBarItem object, manipulations on which forced the event to be raised.
    ///</field>
    ///<field name = "htmlElement">
    ///Gets the HTML object that contains the processed navbar item. Value: An object representing a container for the navbar item related to the event.
    ///</field>
    ///<field name = "htmlEvent">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientNavBarGroupEventHandler = function() {
    ///<summary>
    ///A method that will handle the navbar's client events concerning manipulations with a group.
    ///</summary>
};
ASPxClientNavBarGroupEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern manipulations on groups.
    ///</summary>
    ///<field name = "group">
    ///Gets the group object related to the event. Value: An ASPxClientNavBarGroup object, manipulations on which forced the event to be raised.
    ///</field>
};
ASPxClientNavBarGroupCancelEventHandler = function() {
    ///<summary>
    ///A method that will handle the navbar's cancelable client events concerning manipulations with a group.
    ///</summary>
};
ASPxClientNavBarGroupCancelEventArgs = function() {
    ///<summary>
    ///Provides data for cancellable events which concern manipulations on groups.
    ///</summary>
    ///<field name = "group">
    ///Gets the group object related to the event. Value: An ASPxClientNavBarGroup object representing the group manipulations on which forced the navbar to raise the event.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientNavBarGroupClickEventHandler = function() {
    ///<summary>
    ///A method that will handle client events concerning clicks on the control's group headers.
    ///</summary>
};
ASPxClientNavBarGroupClickEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern clicking on the control's group headers.
    ///</summary>
    ///<field name = "htmlElement">
    ///Gets the HTML object that contains the processed group. Value: An object representing a container for the group related to the event.
    ///</field>
    ///<field name = "htmlEvent">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "group">
    ///Gets the group object related to the event. Value: An ASPxClientNavBarGroup object representing the group manipulations on which forced the navbar to raise the event.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientNewsControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxNewsControl object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "TailClick" type = "ASPxClientEvent">
    ///Fires after an item's tail has been clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientNewsControlItemEventHandler = function() {
    ///<summary>
    ///A method that will handle client events concerning manipulations with an item.
    ///</summary>
};
ASPxClientNewsControlItemEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern tail clicking within the control's items.
    ///</summary>
    ///<field name = "name">
    ///Gets the name that uniquely identifies the processed item. Value: A string value that represents the value assigned to the processed item's Name property.
    ///</field>
    ///<field name = "htmlElement">
    ///Gets the HTML object that contains the processed item. Value: An object representing a container for the item related to the event.
    ///</field>
    ///<field name = "htmlEvent">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientObjectContainer = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxObjectContainer control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "FlashScriptCommand" type = "ASPxClientEvent">
    ///Occurs on the client side when the FSCommand action is called within the associated flash object's action script.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientFlashScriptCommandEventHandler = function() {
    ///<summary>
    ///A method that will handle the FlashScriptCommand event.
    ///</summary>
};
ASPxClientFlashScriptCommandEventArgs = function() {
    ///<summary>
    ///Provides data for the FlashScriptCommand client event.
    ///</summary>
    ///<field name = "command">
    ///Gets a command passed via the FSCommand action of the flash object. Value: A string that represents the value of the FSCommand action's command parameter.
    ///</field>
    ///<field name = "args">
    ///Gets arguments passed via the FSCommand action of the flash object. Value: A string that represents the value of the FSCommand action's args parameter.
    ///</field>
};
ASPxClientPanel = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxPanel control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientPopupControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxPopupControl control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CloseButtonClick" type = "ASPxClientEvent">
    ///Occurs when a popup window's close button is clicked.
    ///</field>
    ///<field name = "BeforeResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing initiates.
    ///</field>
    ///<field name = "AfterResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing completes.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the control.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window closes or hides.
    ///</field>
    ///<field name = "Closing" type = "ASPxClientEvent">
    ///Enables you to cancel window closing on the client side.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window is invoked.
    ///</field>
    ///<field name = "Resize" type = "ASPxClientEvent">
    ///Occurs on the client side after a control's window has been resized.
    ///</field>
    ///<field name = "Shown" type = "ASPxClientEvent">
    ///Occurs on the client side after a control's window has been invoked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientPopupControlCollection = function() {
    ///<summary>
    ///Represents a client collection that maintains client popup control objects.
    ///</summary>
    ///<field name = "ControlsInitialized" type = "ASPxClientEvent">
    ///Occurs on the client side after the collection of client control objects has been initialized, and the client controls are displayed within the browser.
    ///</field>
};
ASPxClientPopupWindow = function() {
    ///<summary>
    ///Represents a client-side equivalent of a popup control's PopupWindow object.
    ///</summary>
    ///<field name = "popupControl">
    ///Gets the popup control to which the current popup window belongs. Value: An ASPxClientPopupControl object representing the popup control to which the window belongs.
    ///</field>
    ///<field name = "index">
    ///Gets the index of the current popup window within the popup control's Windows collection. Value: An integer value representing the zero-based index of the current popup window within the Windows collection of the popup control to which the window belongs.
    ///</field>
    ///<field name = "name">
    ///Gets the name that uniquely identifies the current popup window. Value: A string value that represents a value assigned to the popup window's Name property.
    ///</field>
};
ASPxClientPopupWindowEventHandler = function() {
    ///<summary>
    ///A method that will handle the popup control's client events invoked in response to manipulating a popup window.
    ///</summary>
};
ASPxClientPopupWindowEventArgs = function() {
    ///<summary>
    ///Provides data for events concerning client manipulations on popup windows.
    ///</summary>
    ///<field name = "window">
    ///Gets the popup window object related to the event. Value: An ASPxClientPopupWindow object representing the popup window that was manipulated, causing the popup control to raise the event.
    ///</field>
};
ASPxClientPopupWindowCancelEventHandler = function() {
    ///<summary>
    ///A method that will handle the popup window's cancellable client events, such as the Closing.
    ///</summary>
};
ASPxClientPopupWindowCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the popup control's cancellable client events, such as the Closing.
    ///</summary>
    ///<field name = "window">
    ///Gets the popup window object related to the event. Value: An ASPxClientPopupWindow object representing the popup window that was manipulated, causing the popup control to raise the event.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientPopupMenu = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxPopupMenu object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after a menu item has been clicked.
    ///</field>
    ///<field name = "ItemMouseOver" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor is moved into a menu item.
    ///</field>
    ///<field name = "ItemMouseOut" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor moves outside a menu item.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu pops up.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu closes.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientRatingControl = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxRatingControl control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires on the server after an item has been clicked.
    ///</field>
    ///<field name = "ItemMouseOver" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor is moved into a rating control item.
    ///</field>
    ///<field name = "ItemMouseOut" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor moves outside a rating control item.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientRatingControlItemClickEventHandler = function() {
    ///<summary>
    ///A method that will handle the client ItemClick event.
    ///</summary>
};
ASPxClientRatingControlItemClickEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemClick event.
    ///</summary>
    ///<field name = "index">
    ///Gets the index of the item related to the event. Value: An integer value that represents the clicked item's index.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientRatingControlItemMouseEventHandler = function() {
    ///<summary>
    ///A method that will handle the rating control's ItemMouseOver and ItemMouseOut client events (such as ItemMouseOut).
    ///</summary>
};
ASPxClientRatingControlItemMouseEventArgs = function() {
    ///<summary>
    ///Provides data for the rating control's ItemMouseOver and ItemMouseOut client events (such as ItemMouseOut).
    ///</summary>
    ///<field name = "index">
    ///Gets the index of the item related to the event. Value: An integer value that represents the related item's index.
    ///</field>
};
ASPxClientRoundPanel = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxRoundPanel control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientSplitter = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxSplitter object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "PaneResizing" type = "ASPxClientEvent">
    ///Fires before a pane is resized.
    ///</field>
    ///<field name = "PaneResized" type = "ASPxClientEvent">
    ///Fires after a pane has been resized.
    ///</field>
    ///<field name = "PaneCollapsing" type = "ASPxClientEvent">
    ///Fires before a pane is collapsed.
    ///</field>
    ///<field name = "PaneCollapsed" type = "ASPxClientEvent">
    ///Fires after a pane has been collapsed.
    ///</field>
    ///<field name = "PaneExpanding" type = "ASPxClientEvent">
    ///Fires before a pane is expanded.
    ///</field>
    ///<field name = "PaneExpanded" type = "ASPxClientEvent">
    ///Fires after a pane has been expanded.
    ///</field>
    ///<field name = "PaneResizeCompleted" type = "ASPxClientEvent">
    ///Occurs when a pane resize operation has been completed.
    ///</field>
    ///<field name = "PaneContentUrlLoaded" type = "ASPxClientEvent">
    ///Fires after a specific web page has been loaded into a pane.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientSplitterPane = function() {
    ///<summary>
    ///Represents a client-side equivalent of the splitter's SplitterPane object.
    ///</summary>
    ///<field name = "index">
    ///Gets the index of the current pane within the pane collection to which it belongs. Value: An integer value representing the zero-based index of the current pane within the SplitterPaneCollection collection.
    ///</field>
    ///<field name = "name">
    ///Gets the name that uniquely identifies the current splitter pane. Value: A string value that represents the value assigned to the pane's Name property.
    ///</field>
};
ASPxClientSplitterPaneEventHandler = function() {
    ///<summary>
    ///A method that will handle the splitter's client events concerning manipulations with a pane.
    ///</summary>
};
ASPxClientSplitterPaneEventArgs = function() {
    ///<summary>
    ///A method that will handle the splitter's client events concerning manipulations with a pane.
    ///</summary>
    ///<field name = "pane">
    ///Gets the pane object related to the event. Value: An ASPxClientSplitterPane object, manipulations on which forced the event to be raised.
    ///</field>
};
ASPxClientSplitterPaneCancelEventHandler = function() {
    ///<summary>
    ///A method that will handle a splitter control's cancelable client events concerning manipulations with a pane.
    ///</summary>
};
ASPxClientSplitterPaneCancelEventArgs = function() {
    ///<summary>
    ///Provides data for a splitter control's cancelable client events concerning manipulations with a pane.
    ///</summary>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "pane">
    ///Gets the pane object related to the event. Value: An ASPxClientSplitterPane object, manipulations on which forced the event to be raised.
    ///</field>
};
ASPxClientTabControlBase = function() {
    ///<summary>
    ///Represents a base for the ASPxClientPageControl objects.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "TabClick" type = "ASPxClientEvent">
    ///Fires when a tab is clicked.
    ///</field>
    ///<field name = "ActiveTabChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the active tab has been changed within a tab control.
    ///</field>
    ///<field name = "ActiveTabChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the active tab is changed within a tab control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by a client tab control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientTabControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxTabControl object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "TabClick" type = "ASPxClientEvent">
    ///Fires when a tab is clicked.
    ///</field>
    ///<field name = "ActiveTabChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the active tab has been changed within a tab control.
    ///</field>
    ///<field name = "ActiveTabChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the active tab is changed within a tab control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by a client tab control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientPageControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxPageControl object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "TabClick" type = "ASPxClientEvent">
    ///Fires when a tab is clicked.
    ///</field>
    ///<field name = "ActiveTabChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the active tab has been changed within a tab control.
    ///</field>
    ///<field name = "ActiveTabChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the active tab is changed within a tab control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by a client tab control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientTab = function() {
    ///<summary>
    ///Represents a client-side equivalent of a tab control's TabPage object.
    ///</summary>
    ///<field name = "tabControl">
    ///Gets the tab control to which the current tab belongs. Value: An ASPxClientTabControlBase object representing the control to which the tab belongs.
    ///</field>
    ///<field name = "index">
    ///Gets the index of the current tab (tabbed page) within the control's collection of tabs (tabbed pages). Value: An integer value representing the zero-based index of the current tab (tabbed page) within the TabPages) collection of the control to which the tab belongs.
    ///</field>
    ///<field name = "name">
    ///Gets the name that uniquely identifies the current tab. Value: A string value that represents the value assigned to the tab's Name property.
    ///</field>
};
ASPxClientTabControlTabEventHandler = function() {
    ///<summary>
    ///A method that will handle a tab control's client events concerning manipulations with a tab.
    ///</summary>
};
ASPxClientTabControlTabEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern manipulations on tabs.
    ///</summary>
    ///<field name = "tab">
    ///Gets the tab object related to the event. Value: An ASPxClientTab object, manipulations on which forced the event to be raised.
    ///</field>
};
ASPxClientTabControlTabCancelEventHandler = function() {
    ///<summary>
    ///A method that will handle a tab control's cancelable client events concerning manipulations with a tab.
    ///</summary>
};
ASPxClientTabControlTabCancelEventArgs = function() {
    ///<summary>
    ///Provides data for cancellable events which concern manipulations on tabs.
    ///</summary>
    ///<field name = "tab">
    ///Gets the tab object related to the event. Value: An ASPxClientTab object representing the tab manipulations on which forced the tab control to raise the event.
    ///</field>
    ///<field name = "reloadContentOnCallback">
    ///Gets or sets a value specifying whether a callback should be sent to the server to reload the content of the page being activated. Value: true to reload the page's content; otherwise, false.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientTabControlTabClickEventHandler = function() {
    ///<summary>
    ///A method that will handle client events concerning clicks on the control's tabs.
    ///</summary>
};
ASPxClientTabControlTabClickEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern clicking on the control's tabs.
    ///</summary>
    ///<field name = "htmlElement">
    ///Gets the HTML object that contains the processed tab. Value: An object representing a container for the tab related to the event.
    ///</field>
    ///<field name = "htmlEvent">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "tab">
    ///Gets the tab object related to the event. Value: An ASPxClientTab object representing the tab manipulations on which forced the tab control to raise the event.
    ///</field>
    ///<field name = "reloadContentOnCallback">
    ///Gets or sets a value specifying whether a callback should be sent to the server to reload the content of the page being activated. Value: true to reload the page's content; otherwise, false.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientTimer = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxTimer object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Tick" type = "ASPxClientEvent">
    ///Fires on the client side when the specified timer interval has elapsed, and the timer is enabled.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientTitleIndex = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxTitleIndex object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after an item has been clicked.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientTitleIndex.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientTitleIndexItemEventHandler = function() {
    ///<summary>
    ///A method that will handle client events concerning manipulations with an item.
    ///</summary>
};
ASPxClientTitleIndexItemEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern manipulations on the control's items.
    ///</summary>
    ///<field name = "name">
    ///Gets the name that uniquely identifies the processed item. Value: A string value that represents the value assigned to the processed item's Name property.
    ///</field>
    ///<field name = "htmlElement">
    ///Gets the HTML object that contains the processed item. Value: An object representing a container for the item related to the event.
    ///</field>
    ///<field name = "htmlEvent">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientTreeView = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxTreeView object.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "NodeClick" type = "ASPxClientEvent">
    ///Fires on the client side after a node has been clicked.
    ///</field>
    ///<field name = "ExpandedChanged" type = "ASPxClientEvent">
    ///Fires on the client side after a node's expansion state has been changed.
    ///</field>
    ///<field name = "ExpandedChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the expansion state of a node is changed.
    ///</field>
    ///<field name = "CheckedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the node's checked state is changed by clicking on a check box.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientTreeView.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientTreeViewNode = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxTreeView's TreeViewNode object.
    ///</summary>
    ///<field name = "treeView">
    ///Gets the client representation of the ASPxTreeView control to which the current node belongs. Value: An ASPxClientTreeView object representing the control to which the node belongs.
    ///</field>
    ///<field name = "parent">
    ///Gets the current node's parent node. Value: An ASPxClientTreeViewNode object representing the node's immediate parent.
    ///</field>
    ///<field name = "index">
    ///Gets the node's index within the parent's collection of nodes. Value: An integer value representing the node's zero-based index within the Nodes collection of the node to which the node belongs.
    ///</field>
    ///<field name = "name">
    ///Gets the name that uniquely identifies the node. Value: A string value that represents the value assigned to the node's Name property.
    ///</field>
};
ASPxClientTreeViewNodeProcessingModeEventHandler = function() {
    ///<summary>
    ///A method that will handle the client events concerned with node processing.
    ///</summary>
};
ASPxClientTreeViewNodeProcessingModeEventArgs = function() {
    ///<summary>
    ///Provides data for the client events concerned with node processing, and that allow the event's processing to be passed to the server side.
    ///</summary>
    ///<field name = "node">
    ///Gets a node object related to the event. Value: An ASPxClientTreeViewNode object, manipulations on which forced the event to be raised.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientTreeViewNodeClickEventHandler = function() {
    ///<summary>
    ///A method that will handle the ASPxClientTreeView.ItemClick event.
    ///</summary>
};
ASPxClientTreeViewNodeClickEventArgs = function() {
    ///<summary>
    ///Provides data for the NodeClick event.
    ///</summary>
    ///<field name = "htmlElement">
    ///Gets the HTML object that contains the processed node. Value: An object representing a container for the node related to the event.
    ///</field>
    ///<field name = "htmlEvent">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "node">
    ///Gets a node object related to the event. Value: An ASPxClientTreeViewNode object, manipulations on which forced the event to be raised.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientTreeViewNodeEventHandler = function() {
    ///<summary>
    ///A method that will handle the ASPxTreeView control's client events concerning manipulations with a node.
    ///</summary>
};
ASPxClientTreeViewNodeEventArgs = function() {
    ///<summary>
    ///Provides data for the ExpandedChanged events.
    ///</summary>
    ///<field name = "node">
    ///Gets a node object related to the event. Value: An ASPxClientTreeViewNode object, manipulations on which forced the event to be raised.
    ///</field>
};
ASPxClientTreeViewNodeCancelEventHandler = function() {
    ///<summary>
    ///A method that will handle the ASPxTreeView's cancelable client events, concerning manipulations with nodes.
    ///</summary>
};
ASPxClientTreeViewNodeCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the ExpandedChanging event.
    ///</summary>
    ///<field name = "node">
    ///Gets a node object related to the event. Value: An ASPxClientTreeViewNode object, manipulations on which forced the event to be raised.
    ///</field>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientUploadControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxUploadControl control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "FileUploadComplete" type = "ASPxClientEvent">
    ///Occurs on the client after the file uploading has been completed.
    ///</field>
    ///<field name = "FilesUploadComplete" type = "ASPxClientEvent">
    ///Occurs on the client after upload of all selected files has been completed.
    ///</field>
    ///<field name = "FileUploadStart" type = "ASPxClientEvent">
    ///Occurs on the client side when uploading of the specified file starts by the Upload method.
    ///</field>
    ///<field name = "UploadingProgressChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the progress bar indicator position is changed.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the text within the control's edit box is changed while the control has focus.
    ///</field>
    ///<field name = "FileInputCountChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the file input elements count is changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientUploadControlFileUploadStartEventHandler = function() {
    ///<summary>
    ///A method that will handle the FileUploadStart client event.
    ///</summary>
};
ASPxClientUploadControlFileUploadStartEventArgs = function() {
    ///<summary>
    ///Provides data for the FileUploadStart client event that allows the initiated file upload to be canceled.
    ///</summary>
    ///<field name = "cancel">
    ///Gets or sets a value indicating whether the action which raised the FileUploadStart event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientUploadControlFileUploadCompleteEventHandler = function() {
    ///<summary>
    ///A method that handles the FileUploadComplete client event.
    ///</summary>
};
ASPxClientUploadControlFileUploadCompleteEventArgs = function() {
    ///<summary>
    ///Provides data for the FileUploadComplete event.
    ///</summary>
    ///<field name = "inputIndex">
    ///Gets the index of a file input element within the ASPxUploadControl. Value: An integer value that specifies the file input element's index.
    ///</field>
    ///<field name = "isValid">
    ///Gets or sets a value indicating whether the uploaded file passes validation. Value: true if the file is valid; otherwise, false.
    ///</field>
    ///<field name = "errorText">
    ///Gets the error text to be displayed within the ASPxUploadControl's error frame. Value: A string value that represents the error text.
    ///</field>
    ///<field name = "callbackData">
    ///Gets a string that contains specific information (if any) passed from the server side for further client processing. Value: A string value representing callback data passed from the server.
    ///</field>
};
ASPxClientUploadControlFilesUploadCompleteEventHandler = function() {
    ///<summary>
    ///A method that will handle the FilesUploadComplete client event.
    ///</summary>
};
ASPxClientUploadControlFilesUploadCompleteEventArgs = function() {
    ///<summary>
    ///Provides data for the FilesUploadComplete client event, which enables you to perform specific actions after all selected files have been uploaded.
    ///</summary>
    ///<field name = "errorText">
    ///Gets the error text to be displayed within the upload control's error frame. Value: A string value that is the error text.
    ///</field>
    ///<field name = "callbackData">
    ///Gets a string that contains specific information (if any) passed from the server side for further client processing. Value: A string value that is the callback data passed from the server.
    ///</field>
};
ASPxClientUploadControlTextChangedEventHandler = function() {
    ///<summary>
    ///A method that will handle the TextChanged client event.
    ///</summary>
};
ASPxClientUploadControlTextChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the TextChanged client event that allows you to respond to an end-user changing an edit box's text.
    ///</summary>
    ///<field name = "inputIndex">
    ///Gets the index of a file input element within the ASPxUploadControl. Value: An integer value that specifies the file input element's index.
    ///</field>
};
ASPxClientUploadControlUploadingProgressChangedEventHandler = function() {
    ///<summary>
    ///A method that will handle the ASPxUploadControl's client event, concerned with changes in upload progress.
    ///</summary>
};
ASPxClientUploadControlUploadingProgressChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the UploadingProgressChanged client event, that allows you to respond to a changing progress position .
    ///</summary>
    ///<field name = "fileCount">
    ///Gets the number of the files selected for upload within the ASPxUploadControl. Value: An integer value that represents the total number of selected files.
    ///</field>
    ///<field name = "currentFileName">
    ///Gets or sets the name of the file being currently uploaded. Value: A string value that represents the file name.
    ///</field>
    ///<field name = "totalContentLength">
    ///Gets the content length of the files selected for upload within the ASPxUploadControl. Value: An integer value that represents the total content length of the selected files.
    ///</field>
    ///<field name = "uploadedContentLength">
    ///Gets the content length of the files already uploaded to the server. Value: An integer value that represents the content length of the uploaded files.
    ///</field>
    ///<field name = "progress">
    ///Gets the current position of upload progress. Value: An integer value that represents the upload progress position.
    ///</field>
};
ASPxClientWebChartControl = function() {
    ///<summary>
    ///A class which provides access to the entire hierarchy of chart elements on the client side.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ObjectHotTracked" type = "ASPxClientEvent">
    ///Occurs on the client side when any chart element is hot-tracked.
    ///</field>
    ///<field name = "ObjectSelected" type = "ASPxClientEvent">
    ///Occurs on the client side when any chart element is selected.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientWebChartControlHotTrackEventHandler = function() {
    ///<summary>
    ///Represents a method that will handle the ObjectSelected events.
    ///</summary>
};
ASPxClientWebChartControlHotTrackEventArgs = function() {
    ///<summary>
    ///Provides data for a chart control's ObjectSelected events on the client side.
    ///</summary>
    ///<field name = "hitObject">
    ///Provides access on the client side to the chart element, for which the event was raised. Value: An ASPxClientWebChartElement object, which represents the chart element for which the event was raised.
    ///</field>
    ///<field name = "additionalHitObject">
    ///Provides access on the client side to the object, which is in some way related to the object being hit. The returned value depends on the hitObject type and hit point location. Value: An ASPxClientWebChartElement object representing an additional object that relates to the one being hit.
    ///</field>
    ///<field name = "hitInfo">
    ///Gets details on the chart elements located at the point where an end-user has clicked when hot-tracking or selecting a chart element on the client side. Value: An ASPxClientWebChartHitInfo object, which contains information about the chart elements located at the point where an end-user has clicked.
    ///</field>
    ///<field name = "chart">
    ///Provides access on the client side to the chart and all its elements. Value: An ASPxClientWebChart object, which provides access to chart properties.
    ///</field>
    ///<field name = "htmlElement">
    ///Gets the HTML object that contains the processed item. Value: An object representing a container for the item related to the event.
    ///</field>
    ///<field name = "x">
    ///Gets the X-coordinate of the hit test point, relative to the top left corner of the chart. Value: An integer value specifying X-coordinate of the hit test point (in pixels).
    ///</field>
    ///<field name = "y">
    ///Gets the Y-coordinate of the hit test point, relative to the top left corner of the chart. Value: An integer value specifying Y-coordinate of the hit test point (in pixels).
    ///</field>
    ///<field name = "absoluteX">
    ///Gets the X-coordinate of the hit test point, relative to the top left corner of the Web Page containing this chart. Value: An integer value specifying X-coordinate of the hit test point (in pixels).
    ///</field>
    ///<field name = "absoluteY">
    ///Gets the Y-coordinate of the hit test point, relative to the top left corner of the Web Page containing this chart. Value: An integer value specifying Y-coordinate of the hit test point (in pixels).
    ///</field>
    ///<field name = "cancel">
    ///Gets a value indicating whether the hot-tracking or object selection should be cancelled. Value: true to cancel the hot-tracking or selection of an object; otherwise, false.
    ///</field>
    ///<field name = "processOnServer">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientHitObject = function() {
    ///<summary>
    ///Represents an object under the hit test point within a chart control, on the client side.
    ///</summary>
    ///<field name = "Object">
    ///Gets the chart element for which the event was raised. Value: An ASPxClientWebChartElement object, representing the chart element for which the event was raised.
    ///</field>
    ///<field name = "AdditionalObject">
    ///Provides access to an object, which is in some way related to the object being hit. The returned value depends on the Object type and hit point location. Value: An ASPxClientWebChartElement object that represents an additional object related to the one being hit.
    ///</field>
};
ASPxClientWebChartHitInfo = function() {
    ///<summary>
    ///Contains information about a specific test point within a chart control, on the client side.
    ///</summary>
    ///<field name = "inChart">
    ///Gets a value indicating whether the test point is within the chart. Value: true if the test point is within a chart; otherwise, false.
    ///</field>
    ///<field name = "inChartTitle">
    ///Gets a value indicating whether the test point is within the chart title. Value: true if the test point is within a chart title; otherwise, false.
    ///</field>
    ///<field name = "inAxis">
    ///Gets a value indicating whether the test point is within the axis. Value: true if the test point is within an axis; otherwise, false.
    ///</field>
    ///<field name = "inAxisLabelItem">
    ///Gets a value indicating whether the test point is within the axis label item. Value: true if the test point is within an axis label item; otherwise, false.
    ///</field>
    ///<field name = "inAxisTitle">
    ///Gets a value indicating whether the test point is within the axis title. Value: true if the test point is within an axis title; otherwise, false.
    ///</field>
    ///<field name = "inConstantLine">
    ///Gets a value indicating whether the test point is within the constant line. Value: true if the test point is within a constant line; otherwise, false.
    ///</field>
    ///<field name = "inDiagram">
    ///Gets a value indicating whether the test point is within the diagram. Value: true if the test point is within a diagram; otherwise, false.
    ///</field>
    ///<field name = "inNonDefaultPane">
    ///Gets a value indicating whether the test point is within the non-default pane. Value: true if the test point is within a non-default pane; otherwise, false.
    ///</field>
    ///<field name = "inLegend">
    ///Gets a value indicating whether the test point is within the legend. Value: true if the test point is within a legend; otherwise, false.
    ///</field>
    ///<field name = "inSeries">
    ///Gets a value indicating whether the test point is within the series. Value: true if the test point is within a series; otherwise, false.
    ///</field>
    ///<field name = "inSeriesLabel">
    ///Gets a value indicating whether the test point is within the series label. Value: true if the test point is within a series label; otherwise, false.
    ///</field>
    ///<field name = "inSeriesPoint">
    ///Gets a value indicating whether the test point is within the series point. Value: true if the test point is within a series point; otherwise, false.
    ///</field>
    ///<field name = "inSeriesTitle">
    ///Gets a value indicating whether the test point is within the series title. Value: true if the test point is within a series title; otherwise, false.
    ///</field>
    ///<field name = "inTrendLine">
    ///Gets a value indicating whether the test point is within the trendline. Value: true if the test point is within a trendline; otherwise, false.
    ///</field>
    ///<field name = "inFibonacciIndicator">
    ///Gets a value indicating whether the test point is within the Fibonacci Indicator. Value: true if the test point is within a Fibonacci Indicator; otherwise, false.
    ///</field>
    ///<field name = "inRegressionLine">
    ///Gets a value indicating whether the test point is within the regression line. Value: true if the test point is within a regression line; otherwise, false.
    ///</field>
    ///<field name = "inIndicator">
    ///Gets a value specifying whether the test point is within an indicator. Value: true if the test point is within an indicator; otherwise, false.
    ///</field>
    ///<field name = "inAnnotation">
    ///Gets a value indicating whether the test point is within an annotation. Value: true if the test point is within an annotation; otherwise, false.
    ///</field>
    ///<field name = "chart">
    ///Gets the client-side chart instance from under the test point. Value: An ASPxClientWebChart object.
    ///</field>
    ///<field name = "chartTitle">
    ///Gets the client-side chart title instance from under the test point. Value: An ASPxClientChartTitle object.
    ///</field>
    ///<field name = "axis">
    ///Gets the client-side axis instance from under the test point. Value: An ASPxClientAxisBase descendant.
    ///</field>
    ///<field name = "constantLine">
    ///Gets the client-side constant line instance from under the test point. Value: An ASPxClientConstantLine object.
    ///</field>
    ///<field name = "diagram">
    ///Gets the client-side diagram instance from under the test point. Value: An ASPxClientXYDiagramBase descendant.
    ///</field>
    ///<field name = "nonDefaultPane">
    ///Gets the client-side non-default pane instance from under the test point. Value: An ASPxClientXYDiagramPane object.
    ///</field>
    ///<field name = "legend">
    ///Gets the client-side legend instance from under the test point. Value: An ASPxClientLegend object.
    ///</field>
    ///<field name = "series">
    ///Gets the client-side series instance from under the test point. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "seriesLabel">
    ///Gets the client-side series label instance from under the test point. Value: An ASPxClientSeriesLabel object.
    ///</field>
    ///<field name = "seriesTitle">
    ///Gets the client-side series title instance from under the test point. Value: An ASPxClientSeriesTitle object.
    ///</field>
    ///<field name = "trendLine">
    ///Gets the client-side trendline instance from under the test point. Value: An ASPxClientTrendLine object.
    ///</field>
    ///<field name = "fibonacciIndicator">
    ///Gets the client-side Fibonacci indicator instance from under the test point. Value: An ASPxClientFibonacciIndicator object.
    ///</field>
    ///<field name = "regressionLine">
    ///Gets the client-side regression line instance from under the test point. Value: An ASPxClientRegressionLine object.
    ///</field>
    ///<field name = "indicator">
    ///Gets the client-side indicator instance from under the test point. Value: An ASPxClientIndicator descendant.
    ///</field>
    ///<field name = "annotation">
    ///Gets the client-side annotation instance from under the test point. Value: An ASPxClientAnnotation object.
    ///</field>
    ///<field name = "seriesPoint">
    ///Gets the client-side series point instance from under the test point. Value: An ASPxClientSeriesPoint object.
    ///</field>
    ///<field name = "axisLabelItem">
    ///Gets the client-side axis label item instance from under the test point. Value: An ASPxClientAxisLabelItem object.
    ///</field>
    ///<field name = "axisTitle">
    ///Gets the client-side axis title instance from under the test point. Value: An ASPxClientAxisTitle object.
    ///</field>
};
ASPxClientDiagramCoordinates = function() {
    ///<summary>
    ///Represents the client-side equivalent of the DiagramCoordinates class.
    ///</summary>
    ///<field name = "argumentScaleType">
    ///Gets the type of the argument scale. Value: A string object which contains the current scale type.
    ///</field>
    ///<field name = "valueScaleType">
    ///Gets the type of the value scale. Value: A string object which contains the current scale type.
    ///</field>
    ///<field name = "qualitativeArgument">
    ///Gets the argument of the data point as a text string. Value: A string object, representing a data point's argument.
    ///</field>
    ///<field name = "numericalArgument">
    ///Gets the numerical representation of the data point's argument. Value: A Double value, representing the data point's argument.
    ///</field>
    ///<field name = "dateTimeArgument">
    ///Gets the date-time representation of the data point's argument. Value: A date object, representing the point's argument.
    ///</field>
    ///<field name = "numericalValue">
    ///Gets the numerical representation of the data point's value. Value: A Double value, representing the data point's value.
    ///</field>
    ///<field name = "dateTimeValue">
    ///Gets the date-time representation of the data point's value. Value: A date object, representing the point's value.
    ///</field>
    ///<field name = "axisX">
    ///Gets the X-axis of the diagram point. Value: An ASPxClientAxisBase descendant, representing the axis of arguments (X-axis).
    ///</field>
    ///<field name = "axisY">
    ///Gets the Y-axis of the diagram point. Value: An ASPxClientAxisBase descendant, representing the axis of values (Y-axis).
    ///</field>
    ///<field name = "pane">
    ///Gets the pane of the diagram point. Value: An ASPxClientXYDiagramPane descendant, representing the pane.
    ///</field>
};
ASPxClientAxisValue = function() {
    ///<summary>
    ///Contains the information about an axis value.
    ///</summary>
    ///<field name = "scaleType">
    ///Gets the axis scale type. Value: A String value, specifying the axis scale type.
    ///</field>
    ///<field name = "qualitativeValue">
    ///Gets the axis value, if the axis scale type is qualitative. Value: A String value, specifying the axis value.
    ///</field>
    ///<field name = "numericalValue">
    ///Gets the axis value, if the axis scale type is numerical. Value: A Double value, specifying the axis value.
    ///</field>
    ///<field name = "dateTimeValue">
    ///Gets the axis value, if the axis scale type is date-time. Value: A DateTime value, specifying the axis value.
    ///</field>
};
ASPxClientControlCoordinates = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ControlCoordinates class.
    ///</summary>
    ///<field name = "pane">
    ///Gets the point's pane. Value: An ASPxClientXYDiagramPane object.
    ///</field>
    ///<field name = "x">
    ///Gets the point's X-coordinate, in pixels. Value: An integer value, specifying the X-coordinate (in pixels).
    ///</field>
    ///<field name = "y">
    ///Gets the point's Y-coordinate, in pixels. Value: An integer value, specifying the Y-coordinate (in pixels).
    ///</field>
    ///<field name = "visibility">
    ///Gets the point's visibility state. Value: "Visible", "Hidden", or "Undefined".
    ///</field>
};
ASPxClientWebChartElement = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ChartElement class.
    ///</summary>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientWebChartEmptyElement = function() {
    ///<summary>
    ///Represents a base class for chart elements, which are not necessarily required to be present on the client side.
    ///</summary>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientWebChartRequiredElement = function() {
    ///<summary>
    ///Represents a base class for chart elements, which are required to be present on the client side.
    ///</summary>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientWebChartElementNamed = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ChartElementNamed class.
    ///</summary>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientWebChart = function() {
    ///<summary>
    ///Represents the client-side equivalent of the WebChartControl control.
    ///</summary>
    ///<field name = "chartControl">
    ///Gets the client-side Chart Control that owns the current chart. Value: An ASPxClientWebChartControl object, to which the chart belongs.
    ///</field>
    ///<field name = "diagram">
    ///Gets the chart's diagram and provides access to its settings. Value: An ASPxClientRadarDiagram),  that represents the chart's diagram.
    ///</field>
    ///<field name = "series">
    ///Provides access to the chart's collection of series. Value: An array of ASPxClientSeries objects that represent the collection of series.
    ///</field>
    ///<field name = "titles">
    ///Provides access to the collection of chart titles. Value: An array of ASPxClientChartTitle objects, that represent the collection of chart titles.
    ///</field>
    ///<field name = "annotations">
    ///Provides access to the chart's collection of annotations. Value: An array of ASPxClientAnnotation objects, representing the collection of annotations.
    ///</field>
    ///<field name = "legend">
    ///Gets the chart's legend and provides access to its settings. Value: An ASPxClientLegend object that represents the chart's legend.
    ///</field>
    ///<field name = "appearanceName">
    ///Gets the name of the appearance, which is currently used to draw the chart's elements. Value: A string value that represents the appearance name.
    ///</field>
    ///<field name = "paletteName">
    ///Gets the name of the palette currently used to draw the chart's series. Value: A string value that represents the palette name.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSimpleDiagram = function() {
    ///<summary>
    ///Represents the client-side equivalent of the SimpleDiagram class.
    ///</summary>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientXYDiagramBase = function() {
    ///<summary>
    ///Represents the base class for all diagram classes, which have X and Y axes.
    ///</summary>
    ///<field name = "axisX">
    ///Gets the X-axis. Value: An ASPxClientAxisBase object which represents the X-axis.
    ///</field>
    ///<field name = "axisY">
    ///Gets the Y-axis. Value: An ASPxClientAxisBase object which represents the Y-axis.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientXYDiagram2D = function() {
    ///<summary>
    ///Represents the client-side equivalent of the XYDiagram2D class.
    ///</summary>
    ///<field name = "secondaryAxesX">
    ///Provides access to a collection of secondary X-axes for a given 2D XY-diagram. Value: An array of ASPxClientAxis objects, that is a collection of secondary X-axes.
    ///</field>
    ///<field name = "secondaryAxesY">
    ///Provides access to a collection of secondary Y-axes for a given 2D XY-diagram. Value: An array of ASPxClientAxis objects, that is a collection of secondary X-axes.
    ///</field>
    ///<field name = "defaultPane">
    ///Provides access to a default pane object. Value: An ASPxClientXYDiagramPane object which represents the default pane of a chart.
    ///</field>
    ///<field name = "panes">
    ///Provides access to an array of a diagram's panes. Value: An array of ASPxClientXYDiagramPane objects.
    ///</field>
    ///<field name = "axisX">
    ///Gets the X-axis. Value: An ASPxClientAxisBase object which represents the X-axis.
    ///</field>
    ///<field name = "axisY">
    ///Gets the Y-axis. Value: An ASPxClientAxisBase object which represents the Y-axis.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientXYDiagram = function() {
    ///<summary>
    ///Represents the client-side equivalent of the XYDiagram class.
    ///</summary>
    ///<field name = "rotated">
    ///Gets a value indicating whether the diagram is rotated. Value: true if the diagram is rotated; otherwise, false.
    ///</field>
    ///<field name = "secondaryAxesX">
    ///Provides access to a collection of secondary X-axes for a given 2D XY-diagram. Value: An array of ASPxClientAxis objects, that is a collection of secondary X-axes.
    ///</field>
    ///<field name = "secondaryAxesY">
    ///Provides access to a collection of secondary Y-axes for a given 2D XY-diagram. Value: An array of ASPxClientAxis objects, that is a collection of secondary X-axes.
    ///</field>
    ///<field name = "defaultPane">
    ///Provides access to a default pane object. Value: An ASPxClientXYDiagramPane object which represents the default pane of a chart.
    ///</field>
    ///<field name = "panes">
    ///Provides access to an array of a diagram's panes. Value: An array of ASPxClientXYDiagramPane objects.
    ///</field>
    ///<field name = "axisX">
    ///Gets the X-axis. Value: An ASPxClientAxisBase object which represents the X-axis.
    ///</field>
    ///<field name = "axisY">
    ///Gets the Y-axis. Value: An ASPxClientAxisBase object which represents the Y-axis.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSwiftPlotDiagram = function() {
    ///<summary>
    ///Represents the client-side equivalent of the SwiftPlotDiagram class.
    ///</summary>
    ///<field name = "secondaryAxesX">
    ///Provides access to a collection of secondary X-axes for a given 2D XY-diagram. Value: An array of ASPxClientAxis objects, that is a collection of secondary X-axes.
    ///</field>
    ///<field name = "secondaryAxesY">
    ///Provides access to a collection of secondary Y-axes for a given 2D XY-diagram. Value: An array of ASPxClientAxis objects, that is a collection of secondary X-axes.
    ///</field>
    ///<field name = "defaultPane">
    ///Provides access to a default pane object. Value: An ASPxClientXYDiagramPane object which represents the default pane of a chart.
    ///</field>
    ///<field name = "panes">
    ///Provides access to an array of a diagram's panes. Value: An array of ASPxClientXYDiagramPane objects.
    ///</field>
    ///<field name = "axisX">
    ///Gets the X-axis. Value: An ASPxClientAxisBase object which represents the X-axis.
    ///</field>
    ///<field name = "axisY">
    ///Gets the Y-axis. Value: An ASPxClientAxisBase object which represents the Y-axis.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientXYDiagramPane = function() {
    ///<summary>
    ///Represents the client-side equivalent of the XYDiagramPane class.
    ///</summary>
    ///<field name = "diagram">
    ///Gets the diagram that owns the current pane object. Value: An ASPxClientXYDiagram object, to which the pane belongs.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientXYDiagram3D = function() {
    ///<summary>
    ///Represents the client-side equivalent of the XYDiagram3D class.
    ///</summary>
    ///<field name = "axisX">
    ///Gets the X-axis. Value: An ASPxClientAxisBase object which represents the X-axis.
    ///</field>
    ///<field name = "axisY">
    ///Gets the Y-axis. Value: An ASPxClientAxisBase object which represents the Y-axis.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientRadarDiagram = function() {
    ///<summary>
    ///Represents the client-side equivalent of the RadarDiagram class.
    ///</summary>
    ///<field name = "axisX">
    ///Gets the X-axis. Value: An ASPxClientAxisBase object which represents the X-axis.
    ///</field>
    ///<field name = "axisY">
    ///Gets the Y-axis. Value: An ASPxClientAxisBase object which represents the Y-axis.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAxisBase = function() {
    ///<summary>
    ///Represents the client-side equivalent of the AxisBase class.
    ///</summary>
    ///<field name = "diagram">
    ///Provides access to the XY-diagram which contains the current axis. Value: An ASPxClientXYDiagramBase class descendant.
    ///</field>
    ///<field name = "range">
    ///Provides acess to the range of the axis coordinates. Value: An ASPxClientAxisRange object, which contains the common range settings of the axis coordinates.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAxis2D = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Axis2D class.
    ///</summary>
    ///<field name = "axisTitle">
    ///Provides access to an axis title object. Value: An ASPxClientAxisTitle object which represents the axis title.
    ///</field>
    ///<field name = "strips">
    ///Provides access to the axis strips collection. Value: An array of ASPxClientStrip objects.
    ///</field>
    ///<field name = "constantLines">
    ///Provides access to the collection of the axis constant lines. Value: An array of ASPxClientConstantLine objects which represent constant lines that belong to this axis.
    ///</field>
    ///<field name = "diagram">
    ///Provides access to the XY-diagram which contains the current axis. Value: An ASPxClientXYDiagramBase class descendant.
    ///</field>
    ///<field name = "range">
    ///Provides acess to the range of the axis coordinates. Value: An ASPxClientAxisRange object, which contains the common range settings of the axis coordinates.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAxis = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Axis class.
    ///</summary>
    ///<field name = "reverse">
    ///Gets a value indicating whether the axis is reversed. Value: true if the axis is reversed; otherwise, false.
    ///</field>
    ///<field name = "axisTitle">
    ///Provides access to an axis title object. Value: An ASPxClientAxisTitle object which represents the axis title.
    ///</field>
    ///<field name = "strips">
    ///Provides access to the axis strips collection. Value: An array of ASPxClientStrip objects.
    ///</field>
    ///<field name = "constantLines">
    ///Provides access to the collection of the axis constant lines. Value: An array of ASPxClientConstantLine objects which represent constant lines that belong to this axis.
    ///</field>
    ///<field name = "diagram">
    ///Provides access to the XY-diagram which contains the current axis. Value: An ASPxClientXYDiagramBase class descendant.
    ///</field>
    ///<field name = "range">
    ///Provides acess to the range of the axis coordinates. Value: An ASPxClientAxisRange object, which contains the common range settings of the axis coordinates.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSwiftPlotDiagramAxis = function() {
    ///<summary>
    ///Represents the client-side equivalent of the SwiftPlotDiagramAxis class.
    ///</summary>
    ///<field name = "axisTitle">
    ///Provides access to an axis title object. Value: An ASPxClientAxisTitle object which represents the axis title.
    ///</field>
    ///<field name = "strips">
    ///Provides access to the axis strips collection. Value: An array of ASPxClientStrip objects.
    ///</field>
    ///<field name = "constantLines">
    ///Provides access to the collection of the axis constant lines. Value: An array of ASPxClientConstantLine objects which represent constant lines that belong to this axis.
    ///</field>
    ///<field name = "diagram">
    ///Provides access to the XY-diagram which contains the current axis. Value: An ASPxClientXYDiagramBase class descendant.
    ///</field>
    ///<field name = "range">
    ///Provides acess to the range of the axis coordinates. Value: An ASPxClientAxisRange object, which contains the common range settings of the axis coordinates.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAxis3D = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Axis3D class.
    ///</summary>
    ///<field name = "diagram">
    ///Provides access to the XY-diagram which contains the current axis. Value: An ASPxClientXYDiagramBase class descendant.
    ///</field>
    ///<field name = "range">
    ///Provides acess to the range of the axis coordinates. Value: An ASPxClientAxisRange object, which contains the common range settings of the axis coordinates.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientRadarAxis = function() {
    ///<summary>
    ///Represents the client-side equivalent of the RadarAxis class.
    ///</summary>
    ///<field name = "diagram">
    ///Provides access to the XY-diagram which contains the current axis. Value: An ASPxClientXYDiagramBase class descendant.
    ///</field>
    ///<field name = "range">
    ///Provides acess to the range of the axis coordinates. Value: An ASPxClientAxisRange object, which contains the common range settings of the axis coordinates.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAxisTitle = function() {
    ///<summary>
    ///Represents the client-side equivalent of the AxisTitle class.
    ///</summary>
    ///<field name = "axis">
    ///Gets the axis to which the axis title belongs. Value: An ASPxClientAxisBase descendant, which identifies the axis.
    ///</field>
    ///<field name = "text">
    ///Gets the text of the axis title. Value: A string object which contains the axis title's text.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAxisLabelItem = function() {
    ///<summary>
    ///Represents the client-side equivalent of the AxisLabelItem class.
    ///</summary>
    ///<field name = "axis">
    ///Gets the axis to which an axis label item belongs. Value: An ASPxClientAxisBase descendant, which identifies the axis.
    ///</field>
    ///<field name = "text">
    ///Gets the text of an axis label item. Value: A string object which contains the axis label item's text.
    ///</field>
    ///<field name = "axisValue">
    ///Gets the axis value to which an axis label item corresponds. Value: An object that specifies the axis value.
    ///</field>
    ///<field name = "axisValueInternal">
    ///Gets the internal representation of the axis value to which an axis label item corresponds. Value: A Double value which specifies the internal representation of the axis value.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAxisRange = function() {
    ///<summary>
    ///Represents the client-side equivalent of the AxisRange class.
    ///</summary>
    ///<field name = "axis">
    ///Gets the axis that owns the current axis range object. Value: An ASPxClientAxisBase object, to which the axis range belongs.
    ///</field>
    ///<field name = "minValue">
    ///Gets the minimum value to display on an axis. Value: An object representing the minimum value of the axis range.
    ///</field>
    ///<field name = "maxValue">
    ///Gets the maximum value to display on an axis. Value: An object representing the maximum value of the axis range.
    ///</field>
    ///<field name = "minValueInternal">
    ///Gets the internal float representation of the range minimum value. Value: A Double value which specifies the internal representation of the range minimum value.
    ///</field>
    ///<field name = "maxValueInternal">
    ///Gets the internal float representation of the range maximum value. Value: A Double value which specifies the internal representation of the range maximum value.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientStrip = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Strip class.
    ///</summary>
    ///<field name = "axis">
    ///Gets the axis that owns the current strip object. Value: An ASPxClientAxis object, to which the strip belongs.
    ///</field>
    ///<field name = "minValue">
    ///Gets the minimum value of the strip's range. Value: An object that represents the minimum value of the strip's range.
    ///</field>
    ///<field name = "maxValue">
    ///Gets the maximum value of the strip's range. Value: An object that represents the maximum value of the strip's range.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientConstantLine = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ConstantLine class.
    ///</summary>
    ///<field name = "axis">
    ///Gets the axis that owns the current constant line object. Value: An ASPxClientAxis object, to which the constant line belongs.
    ///</field>
    ///<field name = "value">
    ///Gets the constant line's position along the axis. Value: An object that specifies the constant line's position.
    ///</field>
    ///<field name = "title">
    ///Gets the constant line title. Value: A string object, representing the title's text.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSeries = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Series class.
    ///</summary>
    ///<field name = "viewType">
    ///Gets a value that specifies the view type of the series. Value: A string object which contains the current view type.
    ///</field>
    ///<field name = "argumentScaleType">
    ///Gets a value that specifies the scale type for the argument data of the series' data points. Value: A string object which contains the current scale type.
    ///</field>
    ///<field name = "valueScaleType">
    ///Gets a value that specifies the scale type for the value data of the series' data points. Value: A string object which contains the current scale type.
    ///</field>
    ///<field name = "axisX">
    ///Gets the X-Axis that is used to plot the current series on the XY-diagram. Value: A string object, which represents the X-axis name.
    ///</field>
    ///<field name = "axisY">
    ///Gets the Y-Axis that is used to plot the current series on the XY-diagram. Value: A string object, which represents the Y-axis name.
    ///</field>
    ///<field name = "pane">
    ///Gets the pane that is used to plot the current series on the XY-diagram. Value: A string object, which represents the pane's name.
    ///</field>
    ///<field name = "visible">
    ///Gets a value indicating whether the series is visible. Value: true if the series is visible; otherwise, false.
    ///</field>
    ///<field name = "label">
    ///Gets the settings of series labels. Value: An ASPxClientSeriesLabel object, which provides the series label settings.
    ///</field>
    ///<field name = "points">
    ///Gets the series' collection of data points. Value: An array of ASPxClientSeriesPoint objects, that represent the series' data points.
    ///</field>
    ///<field name = "titles">
    ///Provides access to the collection of series titles. Value: An array of ASPxClientSeriesTitle objects, that represent the collection of series titles.
    ///</field>
    ///<field name = "indicators">
    ///Gets the series' collection of indicators. Value: An array of ASPxClientIndicator objects, that belong to the series.
    ///</field>
    ///<field name = "regressionLines">
    ///Provides access to the collection of regression lines. Value: An array of ASPxClientRegressionLine objects which represent regression lines available for the series.
    ///</field>
    ///<field name = "trendLines">
    ///Provides access to the collection of trendlines. Value: An array of ASPxClientTrendLine objects, that represent the collection of trendlines.
    ///</field>
    ///<field name = "fibonacciIndicators">
    ///Provides access to the collection of Fibonacci Indicators. Value: An array of ASPxClientFibonacciIndicator objects, that represent the collection of Fibonacci Indicators.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSeriesLabel = function() {
    ///<summary>
    ///Represents the client-side equivalent of the SeriesLabelBase class.
    ///</summary>
    ///<field name = "series">
    ///Gets the series that owns the current series label object. Value: An ASPxClientSeries object, to which the series label belongs.
    ///</field>
    ///<field name = "text">
    ///Gets the common text for all series point labels. Value: Returns an empty string object.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSeriesPoint = function() {
    ///<summary>
    ///Represents the client-side equivalent of the SeriesPoint class.
    ///</summary>
    ///<field name = "series">
    ///Gets the series that owns the current series point object. Value: An ASPxClientSeries object, to which the series point belongs.
    ///</field>
    ///<field name = "argument">
    ///Gets the data point's argument. Value: An object that specifies the data point's argument.
    ///</field>
    ///<field name = "values">
    ///Gets the point's data value(s). Value: An array of objects that represent the data value(s) of the series data point.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientLegend = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Legend class.
    ///</summary>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientTitleBase = function() {
    ///<summary>
    ///Represents the base for ASPxClientSeriesTitle classes.
    ///</summary>
    ///<field name = "lines">
    ///Gets the lines of text within a title. Value: An array of string values containing the text of a title.
    ///</field>
    ///<field name = "alignment">
    ///Gets the alignment of the title. Value: A string value containing the text, which specifies the alignment of a title.
    ///</field>
    ///<field name = "dock">
    ///Gets a value that specifies to which edges of a parent element the title should be docked. Value: A string value.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientChartTitle = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ChartTitle class.
    ///</summary>
    ///<field name = "lines">
    ///Gets the lines of text within a title. Value: An array of string values containing the text of a title.
    ///</field>
    ///<field name = "alignment">
    ///Gets the alignment of the title. Value: A string value containing the text, which specifies the alignment of a title.
    ///</field>
    ///<field name = "dock">
    ///Gets a value that specifies to which edges of a parent element the title should be docked. Value: A string value.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSeriesTitle = function() {
    ///<summary>
    ///Represents the client-side equivalent of the SeriesTitle class.
    ///</summary>
    ///<field name = "series">
    ///Gets the series that owns the current title object. Value: An ASPxClientSeries object, to which the series title belongs.
    ///</field>
    ///<field name = "lines">
    ///Gets the lines of text within a title. Value: An array of string values containing the text of a title.
    ///</field>
    ///<field name = "alignment">
    ///Gets the alignment of the title. Value: A string value containing the text, which specifies the alignment of a title.
    ///</field>
    ///<field name = "dock">
    ///Gets a value that specifies to which edges of a parent element the title should be docked. Value: A string value.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientIndicator = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Indicator class.
    ///</summary>
    ///<field name = "series">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientFinancialIndicator = function() {
    ///<summary>
    ///Represents the client-side equivalent of the FinancialIndicator class.
    ///</summary>
    ///<field name = "point1">
    ///Gets the first point of the financial indicator. Value: An ASPxClientFinancialIndicatorPoint object, which represents a financial indicator's first point.
    ///</field>
    ///<field name = "point2">
    ///Gets the second point of the financial indicator. Value: An ASPxClientFinancialIndicatorPoint object, which represents a financial indicator's second point.
    ///</field>
    ///<field name = "series">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientTrendLine = function() {
    ///<summary>
    ///Represents the client-side equivalent of the TrendLine class.
    ///</summary>
    ///<field name = "point1">
    ///Gets the first point of the financial indicator. Value: An ASPxClientFinancialIndicatorPoint object, which represents a financial indicator's first point.
    ///</field>
    ///<field name = "point2">
    ///Gets the second point of the financial indicator. Value: An ASPxClientFinancialIndicatorPoint object, which represents a financial indicator's second point.
    ///</field>
    ///<field name = "series">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientFibonacciIndicator = function() {
    ///<summary>
    ///Represents the client-side equivalent of the FibonacciIndicator class.
    ///</summary>
    ///<field name = "point1">
    ///Gets the first point of the financial indicator. Value: An ASPxClientFinancialIndicatorPoint object, which represents a financial indicator's first point.
    ///</field>
    ///<field name = "point2">
    ///Gets the second point of the financial indicator. Value: An ASPxClientFinancialIndicatorPoint object, which represents a financial indicator's second point.
    ///</field>
    ///<field name = "series">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientFinancialIndicatorPoint = function() {
    ///<summary>
    ///Represents the client-side equivalent of the FinancialIndicatorPoint class.
    ///</summary>
    ///<field name = "financialIndicator">
    ///Gets the financial indicator that owns the current financial indicator point. Value: An ASPxClientFinancialIndicator object, to which the point belongs.
    ///</field>
    ///<field name = "argument">
    ///Gets the argument of the financial indicator's point. Value: An object that specifies the point argument.
    ///</field>
    ///<field name = "valueLevel">
    ///Gets a value, indicating how the value of a financial indicator's point is obtained Value: A string value, which indicates how to obtain a financial indicator point's value.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSingleLevelIndicator = function() {
    ///<summary>
    ///The client-side equivalent of the SingleLevelIndicator class.
    ///</summary>
    ///<field name = "valueLevel">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "series">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientRegressionLine = function() {
    ///<summary>
    ///Represents the client-side equivalent of the RegressionLine class.
    ///</summary>
    ///<field name = "valueLevel">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "series">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientMovingAverage = function() {
    ///<summary>
    ///The client-side equivalent of the MovingAverage class.
    ///</summary>
    ///<field name = "pointsCount">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "kind">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "envelopePercent">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "series">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSimpleMovingAverage = function() {
    ///<summary>
    ///The client-side equivalent of the SimpleMovingAverage class.
    ///</summary>
    ///<field name = "pointsCount">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "kind">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "envelopePercent">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "series">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientExponentialMovingAverage = function() {
    ///<summary>
    ///The client-side equivalent of the ExponentialMovingAverage class.
    ///</summary>
    ///<field name = "pointsCount">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "kind">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "envelopePercent">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "series">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientWeightedMovingAverage = function() {
    ///<summary>
    ///The client-side equivalent of the WeightedMovingAverage class.
    ///</summary>
    ///<field name = "pointsCount">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "kind">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "envelopePercent">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "series">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientTriangularMovingAverage = function() {
    ///<summary>
    ///The client-side equivalent of the TriangularMovingAverage class.
    ///</summary>
    ///<field name = "pointsCount">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "kind">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "envelopePercent">
    ///[To be supplied] Value: [To be supplied]
    ///</field>
    ///<field name = "series">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAnnotation = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Annotation class.
    ///</summary>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientTextAnnotation = function() {
    ///<summary>
    ///Represents the client-side equivalent of the TextAnnotation class.
    ///</summary>
    ///<field name = "lines">
    ///Gets the lines of text within an annotation. Value: An array of string values containing the text of a title.
    ///</field>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientImageAnnotation = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ImageAnnotation class.
    ///</summary>
    ///<field name = "name">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientReportViewer = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ReportViewer control.
    ///</summary>
    ///<field name = "name">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "PageLoad" type = "ASPxClientEvent">
    ///Occurs on the client side when another report page is loaded into this ASPxClientReportViewer instance.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized but prior to it being displayed within the browser.
    ///</field>
};
ASPxClientEventHandler = function() {
    ///<summary>
    ///Represents a method that will handle the client-side events of a Report Viewer control's client-side equivalent.
    ///</summary>
};
ASPxClientReportViewerPageLoadEventArgs = function() {
    ///<summary>
    ///Provides data for a Report Viewer's PageLoad event on the client side.
    ///</summary>
};

ASPxClientButton.prototype.name= 0;
ASPxClientButton.prototype.CheckedChanged= 0;
ASPxClientButton.prototype.GotFocus= 0;
ASPxClientButton.prototype.LostFocus= 0;
ASPxClientButton.prototype.Click= 0;
ASPxClientButton.prototype.Init= 0;
ASPxClientButton.prototype.DoClick = function() {
    ///<summary>
    ///Simulates a mouse click action on the button control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.GetChecked = function() {
    ///<summary>
    ///Returns a value indicating whether the button is checked.
    ///</summary>
    ///<returns>
    ///true if the button is checked; otherwise, false.
    ///</returns>
};
ASPxClientButton.prototype.SetChecked = function(value) {
    ///<summary>
    ///Sets a value which specifies the button's checked status.
    ///</summary>
    ///<param name = "value">
    ///true if the button is checked; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the button.
    ///</summary>
    ///<returns>
    ///A string value representing the text displayed within the button.
    ///</returns>
};
ASPxClientButton.prototype.SetText = function(value) {
    ///<summary>
    ///Sets the text to be displayed within the button.
    ///</summary>
    ///<param name = "value">
    ///A string value specifying the text to be displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Sets a value specifying whether the button is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the button; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether the button is enabled.
    ///</summary>
    ///<returns>
    ///true if the button is enabled; false if the button is disabled.
    ///</returns>
};
ASPxClientButton.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the button.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientButton.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientButton.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientButton.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientButton.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientButton.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientEditBase.prototype.name= 0;
ASPxClientEditBase.prototype.Init= 0;
ASPxClientEditBase.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientEditBase.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientEditBase.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientEditBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientEditBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientEditBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientEditBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientEditBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientEdit.prototype.name= 0;
ASPxClientEdit.prototype.GotFocus= 0;
ASPxClientEdit.prototype.LostFocus= 0;
ASPxClientEdit.prototype.Validation= 0;
ASPxClientEdit.prototype.ValueChanged= 0;
ASPxClientEdit.prototype.Init= 0;
ASPxClientEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientCalendar.prototype.name= 0;
ASPxClientCalendar.prototype.SelectionChanged= 0;
ASPxClientCalendar.prototype.VisibleMonthChanged= 0;
ASPxClientCalendar.prototype.KeyDown= 0;
ASPxClientCalendar.prototype.KeyPress= 0;
ASPxClientCalendar.prototype.KeyUp= 0;
ASPxClientCalendar.prototype.GotFocus= 0;
ASPxClientCalendar.prototype.LostFocus= 0;
ASPxClientCalendar.prototype.Validation= 0;
ASPxClientCalendar.prototype.ValueChanged= 0;
ASPxClientCalendar.prototype.Init= 0;
ASPxClientCalendar.prototype.IsDateSelected = function(date) {
    ///<summary>
    ///Tests whether the specified date is selected.
    ///</summary>
    ///<param name = "date">
    ///A date-time value that specifies the date to test.
    ///</param>
    ///<returns>
    ///true if the specified date is selected; otherwise, false.
    ///</returns>
};
ASPxClientCalendar.prototype.SetVisibleDate = function(date) {
    ///<summary>
    ///Sets the date that specifies the month and year to be displayed in the calendar.
    ///</summary>
    ///<param name = "date">
    ///The date that specifies calendar's visible month and year.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.SetSelectedDate = function(date) {
    ///<summary>
    ///Sets the calendar's selected date.
    ///</summary>
    ///<param name = "date">
    ///A date object that specifies the calendar's selected date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetSelectedDate = function() {
    ///<summary>
    ///Returns the calendar's selected date.
    ///</summary>
    ///<returns>
    ///A date object that represents the calendar's selected date.
    ///</returns>
};
ASPxClientCalendar.prototype.GetVisibleDate = function() {
    ///<summary>
    ///Gets the date that determines the month and year that are currently displayed in the calendar.
    ///</summary>
    ///<returns>
    ///The date that represents the calendar's visible month and year.
    ///</returns>
};
ASPxClientCalendar.prototype.SelectDate = function(date) {
    ///<summary>
    ///Selects the specified date within the calendar.
    ///</summary>
    ///<param name = "date">
    ///A date-time value that specifies the selected date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.SelectRange = function(start, end) {
    ///<summary>
    ///Selects the specified range of dates within the calendar.
    ///</summary>
    ///<param name = "start">
    ///A date-time value that specifies the range's first date.
    ///</param>
    ///<param name = "end">
    ///A date-time value that specifies the range's last date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.DeselectDate = function(date) {
    ///<summary>
    ///Deselects the specified date within the calendar.
    ///</summary>
    ///<param name = "date">
    ///A date-time value that specifies the date to deselect.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.DeselectRange = function(start, end) {
    ///<summary>
    ///Deselects the specified range of dates within the calendar.
    ///</summary>
    ///<param name = "start">
    ///A date-time value that specifies the range's first date.
    ///</param>
    ///<param name = "end">
    ///A date-time value that specifies the range's last date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.ClearSelection = function() {
    ///<summary>
    ///Deselects all the selected dates within the calendar.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetSelectedDates = function() {
    ///<summary>
    ///Returns a list of dates which are selected within the calendar.
    ///</summary>
    ///<returns>
    ///An array of date objects that represents the list of the cvalendar's selected dates.
    ///</returns>
};
ASPxClientCalendar.prototype.GetMinDate = function() {
    ///<summary>
    ///Gets the minimum date on the calendar.
    ///</summary>
    ///<returns>
    ///A date-time object representing the minimum date.
    ///</returns>
};
ASPxClientCalendar.prototype.SetMinDate = function(date) {
    ///<summary>
    ///Sets the minimum date of the calendar.
    ///</summary>
    ///<param name = "date">
    ///A DateTime object representing the minimum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetMaxDate = function() {
    ///<summary>
    ///Gets the maximum date on the calendar.
    ///</summary>
    ///<returns>
    ///A date-time object representing the maximum date.
    ///</returns>
};
ASPxClientCalendar.prototype.SetMaxDate = function(date) {
    ///<summary>
    ///Sets the maximum date of the calendar.
    ///</summary>
    ///<param name = "date">
    ///A DateTime object representing the maximum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientCalendar.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientCalendar.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientCalendar.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientCalendar.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientCalendar.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientCalendar.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientCalendar.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientCalendar.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCalendar.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCalendar.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientCaptcha.prototype.name= 0;
ASPxClientCaptcha.prototype.Init= 0;
ASPxClientCaptcha.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the control's text box.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha.prototype.Refresh = function() {
    ///<summary>
    ///Refreshes the code displayed within the editor's challenge image.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientCaptcha.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientCaptcha.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientCaptcha.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCaptcha.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCaptcha.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientCheckBox.prototype.name= 0;
ASPxClientCheckBox.prototype.CheckedChanged= 0;
ASPxClientCheckBox.prototype.GotFocus= 0;
ASPxClientCheckBox.prototype.LostFocus= 0;
ASPxClientCheckBox.prototype.Validation= 0;
ASPxClientCheckBox.prototype.ValueChanged= 0;
ASPxClientCheckBox.prototype.Init= 0;
ASPxClientCheckBox.prototype.GetChecked = function() {
    ///<summary>
    ///Returns a value indicating whether the check box editor is checked.
    ///</summary>
    ///<returns>
    ///true if the check box is checked; otherwise, false.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetChecked = function(isChecked) {
    ///<summary>
    ///Sets a value which specifies the checked status of the check box editor.
    ///</summary>
    ///<param name = "isChecked">
    ///true if the check box editor is checked; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the text within the editor.
    ///</returns>
};
ASPxClientCheckBox.prototype.GetCheckState = function() {
    ///<summary>
    ///Returns a value which specifies a check box checked state.
    ///</summary>
    ///<returns>
    ///A string value matches one of the CheckState enumeration values.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetCheckState = function(checkState) {
    ///<summary>
    ///Sets a value specifying the state of a check box.
    ///</summary>
    ///<param name = "checkState">
    ///A string value matches one of the CheckState enumeration values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientCheckBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientCheckBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientCheckBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientCheckBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientRadioButton.prototype.name= 0;
ASPxClientRadioButton.prototype.CheckedChanged= 0;
ASPxClientRadioButton.prototype.GotFocus= 0;
ASPxClientRadioButton.prototype.LostFocus= 0;
ASPxClientRadioButton.prototype.Validation= 0;
ASPxClientRadioButton.prototype.ValueChanged= 0;
ASPxClientRadioButton.prototype.Init= 0;
ASPxClientRadioButton.prototype.GetChecked = function() {
    ///<summary>
    ///Returns a value indicating whether the radio button is checked.
    ///</summary>
    ///<returns>
    ///true if the radio button is checked; otherwise, false.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetChecked = function(isChecked) {
    ///<summary>
    ///Sets a value which specifies the radio button's checked status.
    ///</summary>
    ///<param name = "isChecked">
    ///true if the radio button is checked; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetChecked = function() {
    ///<summary>
    ///Returns a value indicating whether the check box editor is checked.
    ///</summary>
    ///<returns>
    ///true if the check box is checked; otherwise, false.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetChecked = function(isChecked) {
    ///<summary>
    ///Sets a value which specifies the checked status of the check box editor.
    ///</summary>
    ///<param name = "isChecked">
    ///true if the check box editor is checked; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the text within the editor.
    ///</returns>
};
ASPxClientRadioButton.prototype.GetCheckState = function() {
    ///<summary>
    ///Returns a value which specifies a check box checked state.
    ///</summary>
    ///<returns>
    ///A string value matches one of the CheckState enumeration values.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetCheckState = function(checkState) {
    ///<summary>
    ///Sets a value specifying the state of a check box.
    ///</summary>
    ///<param name = "checkState">
    ///A string value matches one of the CheckState enumeration values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientRadioButton.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientRadioButton.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRadioButton.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRadioButton.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTextEdit.prototype.name= 0;
ASPxClientTextEdit.prototype.KeyDown= 0;
ASPxClientTextEdit.prototype.KeyPress= 0;
ASPxClientTextEdit.prototype.KeyUp= 0;
ASPxClientTextEdit.prototype.TextChanged= 0;
ASPxClientTextEdit.prototype.GotFocus= 0;
ASPxClientTextEdit.prototype.LostFocus= 0;
ASPxClientTextEdit.prototype.Validation= 0;
ASPxClientTextEdit.prototype.ValueChanged= 0;
ASPxClientTextEdit.prototype.Init= 0;
ASPxClientTextEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientTextEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientTextEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientTextEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientTextEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientTextEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientTextEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTextEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTextEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTextEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTextEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTextEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.name= 0;
ASPxClientTextBoxBase.prototype.KeyDown= 0;
ASPxClientTextBoxBase.prototype.KeyPress= 0;
ASPxClientTextBoxBase.prototype.KeyUp= 0;
ASPxClientTextBoxBase.prototype.TextChanged= 0;
ASPxClientTextBoxBase.prototype.GotFocus= 0;
ASPxClientTextBoxBase.prototype.LostFocus= 0;
ASPxClientTextBoxBase.prototype.Validation= 0;
ASPxClientTextBoxBase.prototype.ValueChanged= 0;
ASPxClientTextBoxBase.prototype.Init= 0;
ASPxClientTextBoxBase.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.name= 0;
ASPxClientButtonEditBase.prototype.ButtonClick= 0;
ASPxClientButtonEditBase.prototype.KeyDown= 0;
ASPxClientButtonEditBase.prototype.KeyPress= 0;
ASPxClientButtonEditBase.prototype.KeyUp= 0;
ASPxClientButtonEditBase.prototype.TextChanged= 0;
ASPxClientButtonEditBase.prototype.GotFocus= 0;
ASPxClientButtonEditBase.prototype.LostFocus= 0;
ASPxClientButtonEditBase.prototype.Validation= 0;
ASPxClientButtonEditBase.prototype.ValueChanged= 0;
ASPxClientButtonEditBase.prototype.Init= 0;
ASPxClientButtonEditBase.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.name= 0;
ASPxClientDropDownEditBase.prototype.DropDown= 0;
ASPxClientDropDownEditBase.prototype.CloseUp= 0;
ASPxClientDropDownEditBase.prototype.ButtonClick= 0;
ASPxClientDropDownEditBase.prototype.KeyDown= 0;
ASPxClientDropDownEditBase.prototype.KeyPress= 0;
ASPxClientDropDownEditBase.prototype.KeyUp= 0;
ASPxClientDropDownEditBase.prototype.TextChanged= 0;
ASPxClientDropDownEditBase.prototype.GotFocus= 0;
ASPxClientDropDownEditBase.prototype.LostFocus= 0;
ASPxClientDropDownEditBase.prototype.Validation= 0;
ASPxClientDropDownEditBase.prototype.ValueChanged= 0;
ASPxClientDropDownEditBase.prototype.Init= 0;
ASPxClientDropDownEditBase.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientColorEdit.prototype.name= 0;
ASPxClientColorEdit.prototype.ColorChanged= 0;
ASPxClientColorEdit.prototype.DropDown= 0;
ASPxClientColorEdit.prototype.CloseUp= 0;
ASPxClientColorEdit.prototype.ButtonClick= 0;
ASPxClientColorEdit.prototype.KeyDown= 0;
ASPxClientColorEdit.prototype.KeyPress= 0;
ASPxClientColorEdit.prototype.KeyUp= 0;
ASPxClientColorEdit.prototype.TextChanged= 0;
ASPxClientColorEdit.prototype.GotFocus= 0;
ASPxClientColorEdit.prototype.LostFocus= 0;
ASPxClientColorEdit.prototype.Validation= 0;
ASPxClientColorEdit.prototype.ValueChanged= 0;
ASPxClientColorEdit.prototype.Init= 0;
ASPxClientColorEdit.prototype.GetColor = function() {
    ///<summary>
    ///Returns the color editor's color value.
    ///</summary>
    ///<returns>
    ///A string value specifying the RGB color value (in the hexadecimal format).
    ///</returns>
};
ASPxClientColorEdit.prototype.SetColor = function(value) {
    ///<summary>
    ///Specifies the color value for the color editor.
    ///</summary>
    ///<param name = "value">
    ///A string value specifying the RGB color value (in the hexadecimal format).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientColorEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientColorEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientColorEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientColorEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientColorEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientColorEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientColorEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientColorEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientColorEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientColorEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientColorEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.name= 0;
ASPxClientDropDownEdit.prototype.DropDown= 0;
ASPxClientDropDownEdit.prototype.CloseUp= 0;
ASPxClientDropDownEdit.prototype.ButtonClick= 0;
ASPxClientDropDownEdit.prototype.KeyDown= 0;
ASPxClientDropDownEdit.prototype.KeyPress= 0;
ASPxClientDropDownEdit.prototype.KeyUp= 0;
ASPxClientDropDownEdit.prototype.TextChanged= 0;
ASPxClientDropDownEdit.prototype.GotFocus= 0;
ASPxClientDropDownEdit.prototype.LostFocus= 0;
ASPxClientDropDownEdit.prototype.Validation= 0;
ASPxClientDropDownEdit.prototype.ValueChanged= 0;
ASPxClientDropDownEdit.prototype.Init= 0;
ASPxClientDropDownEdit.prototype.GetKeyValue = function() {
    ///<summary>
    ///Obtains the key value associated with the text displayed within the editor's edit box.
    ///</summary>
    ///<returns>
    ///A string representing the key value associated with the editor's value (displayed text).
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetKeyValue = function(keyValue) {
    ///<summary>
    ///Specifies the key value associated with the text displayed within the editor's edit box.
    ///</summary>
    ///<param name = "keyValue">
    ///A string specifying the key value associated with the editor's value (displayed text).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDateEdit.prototype.name= 0;
ASPxClientDateEdit.prototype.DateChanged= 0;
ASPxClientDateEdit.prototype.ParseDate= 0;
ASPxClientDateEdit.prototype.DropDown= 0;
ASPxClientDateEdit.prototype.CloseUp= 0;
ASPxClientDateEdit.prototype.ButtonClick= 0;
ASPxClientDateEdit.prototype.KeyDown= 0;
ASPxClientDateEdit.prototype.KeyPress= 0;
ASPxClientDateEdit.prototype.KeyUp= 0;
ASPxClientDateEdit.prototype.TextChanged= 0;
ASPxClientDateEdit.prototype.GotFocus= 0;
ASPxClientDateEdit.prototype.LostFocus= 0;
ASPxClientDateEdit.prototype.Validation= 0;
ASPxClientDateEdit.prototype.ValueChanged= 0;
ASPxClientDateEdit.prototype.Init= 0;
ASPxClientDateEdit.prototype.GetCalendar = function() {
    ///<summary>
    ///Returns the calendar of the date editor.
    ///</summary>
    ///<returns type = "ASPxClientCalendar">
    ///A ASPxClientCalendar object representing the editor's calendar.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetDate = function(date) {
    ///<summary>
    ///Sets the date editor's value.
    ///</summary>
    ///<param name = "date">
    ///A date object specifying the value to assign to the date editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetDate = function() {
    ///<summary>
    ///Returns a date which represents the date editor's value.
    ///</summary>
    ///<returns>
    ///A date object representing the value of the date editor.
    ///</returns>
};
ASPxClientDateEdit.prototype.GetMinDate = function() {
    ///<summary>
    ///Gets the minimum date of the editor.
    ///</summary>
    ///<returns>
    ///A date-time object representing the minimum date.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetMinDate = function(date) {
    ///<summary>
    ///Sets the minimum date of the editor.
    ///</summary>
    ///<param name = "date">
    ///A DateTime object representing the minimum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetMaxDate = function() {
    ///<summary>
    ///Gets the maximum date of the editor.
    ///</summary>
    ///<returns>
    ///A date-time object representing the maximum date.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetMaxDate = function(date) {
    ///<summary>
    ///Sets the maximum date of the editor.
    ///</summary>
    ///<param name = "date">
    ///A DateTime object representing the maximum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientDateEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientDateEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDateEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDateEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientParseDateEventArgs.prototype.value= 0;
ASPxClientParseDateEventArgs.prototype.date= 0;
ASPxClientParseDateEventArgs.prototype.handled= 0;
ASPxClientParseDateEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the ParseDate event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source. Identifies the button editor that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientParseDateEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientParseDateEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientParseDateEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.name= 0;
ASPxClientComboBox.prototype.BeginCallback= 0;
ASPxClientComboBox.prototype.EndCallback= 0;
ASPxClientComboBox.prototype.CallbackError= 0;
ASPxClientComboBox.prototype.SelectedIndexChanged= 0;
ASPxClientComboBox.prototype.DropDown= 0;
ASPxClientComboBox.prototype.CloseUp= 0;
ASPxClientComboBox.prototype.ButtonClick= 0;
ASPxClientComboBox.prototype.KeyDown= 0;
ASPxClientComboBox.prototype.KeyPress= 0;
ASPxClientComboBox.prototype.KeyUp= 0;
ASPxClientComboBox.prototype.TextChanged= 0;
ASPxClientComboBox.prototype.GotFocus= 0;
ASPxClientComboBox.prototype.LostFocus= 0;
ASPxClientComboBox.prototype.Validation= 0;
ASPxClientComboBox.prototype.ValueChanged= 0;
ASPxClientComboBox.prototype.Init= 0;
ASPxClientComboBox.prototype.SetText = function(text) {
    ///<summary>
    ///Specifies the text displayed within the editor's edit box.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the editor's text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.AddItem = function(text) {
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text and returns the index of the added item.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns>
    ///An integer value that represents the added item's index.
    ///</returns>
};
ASPxClientComboBox.prototype.AddItem = function(text, value) {
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text and associated value, and returns the index of the added item.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns>
    ///An integer value that represents the added item's index.
    ///</returns>
};
ASPxClientComboBox.prototype.AddItem = function(text, value, imageUrl) {
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns>
    ///An integer value that represents the added item's index.
    ///</returns>
};
ASPxClientComboBox.prototype.InsertItem = function(index, text, value, imageUrl) {
    ///<summary>
    ///Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.InsertItem = function(index, text, value) {
    ///<summary>
    ///Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.InsertItem = function(index, text) {
    ///<summary>
    ///Inserts a new item specified by its display text into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.RemoveItem = function(index) {
    ///<summary>
    ///Removes an item specified by its index from the client list editor.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the index of the list item to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.ClearItems = function() {
    ///<summary>
    ///Removes all items from the client combo box editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.BeginUpdate = function() {
    ///<summary>
    ///Prevents the client combobox editor from being rendered until the EndUpdate method is called.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.EndUpdate = function() {
    ///<summary>
    ///Re-enables editor render operations after a call to the BeginUpdate method and forces an immediate re-rendering.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.MakeItemVisible = function(index) {
    ///<summary>
    ///Scrolls the editor's item list, so that the specified item becomes visible.
    ///</summary>
    ///<param name = "index">
    ///An integer value that specifies the item's index within the editor's client item list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the combo box editor's item collection.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the item to search for.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object representing the collection item found.
    ///</returns>
};
ASPxClientComboBox.prototype.FindItemByText = function(text) {
    ///<summary>
    ///Returns a combo box item by its text.
    ///</summary>
    ///<param name = "text">
    ///A string that specifies the item's text.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
ASPxClientComboBox.prototype.FindItemByValue = function(value) {
    ///<summary>
    ///Returns a combo box item by its value.
    ///</summary>
    ///<param name = "value">
    ///An object that specifies the item's value.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
ASPxClientComboBox.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns>
    ///An integer value representing the total number of items in the editor's item collection.
    ///</returns>
};
ASPxClientComboBox.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the combo box editor.
    ///</summary>
    ///<returns>
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
ASPxClientComboBox.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the combobox editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the combo box editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
ASPxClientComboBox.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetText = function() {
    ///<summary>
    ///Gets the text displayed in the editor's edit box.
    ///</summary>
    ///<returns>
    ///A string value representing the text within the editor.
    ///</returns>
};
ASPxClientComboBox.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.AddItem = function(texts) {
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns>
    ///An integer value representing the position at which a new item was added.
    ///</returns>
};
ASPxClientComboBox.prototype.AddItem = function(texts, value) {
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns>
    ///An integer value representing the position at which a new item was added.
    ///</returns>
};
ASPxClientComboBox.prototype.AddItem = function(texts, value, imageUrl) {
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns>
    ///An integer value representing the position at which a new item was added.
    ///</returns>
};
ASPxClientComboBox.prototype.InsertItem = function(index, texts, value, imageUrl) {
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.InsertItem = function(index, texts, value) {
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.InsertItem = function(index, texts) {
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientComboBox.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientComboBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientComboBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientComboBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientComboBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientComboBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientComboBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientComboBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientComboBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientComboBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientComboBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientEditKeyEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client events concerning a keyboard key being pressed.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the editor which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientEditKeyEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditKeyEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientEditKeyEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditKeyEventArgs.prototype.htmlEvent= 0;
ASPxClientEditValidationEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle client validation events.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source. Identifies the button editor that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientEditValidationEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditValidationEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientEditValidationEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditValidationEventArgs.prototype.errorText= 0;
ASPxClientEditValidationEventArgs.prototype.isValid= 0;
ASPxClientEditValidationEventArgs.prototype.value= 0;
ASPxClientFilterControl.prototype.name= 0;
ASPxClientFilterControl.prototype.Applied= 0;
ASPxClientFilterControl.prototype.BeginCallback= 0;
ASPxClientFilterControl.prototype.EndCallback= 0;
ASPxClientFilterControl.prototype.CallbackError= 0;
ASPxClientFilterControl.prototype.Init= 0;
ASPxClientFilterControl.prototype.GetFilterExpression = function() {
    ///<summary>
    ///Returns the filter expression.
    ///</summary>
    ///<returns>
    ///A string value that represents the filter expression.
    ///</returns>
};
ASPxClientFilterControl.prototype.GetAppliedFilterExpression = function() {
    ///<summary>
    ///Returns the applied filter expression.
    ///</summary>
    ///<returns>
    ///A string value that specifies the applied filter expression.
    ///</returns>
};
ASPxClientFilterControl.prototype.GetEditor = function(editorIndex) {
    ///<summary>
    ///Returns the editor used to edit operand values for the specified filter column.
    ///</summary>
    ///<param name = "editorIndex">
    ///An integer value that identifies the filter column by its index within the collection.
    ///</param>
    ///<returns type = "ASPxClientEditBase">
    ///An ASPxClientEditBase descendant that represents the editor used to edit operand values for the specified filter column.
    ///</returns>
};
ASPxClientFilterControl.prototype.IsFilterExpressionValid = function() {
    ///<summary>
    ///Returns a value indicating whether the filter expression being currently composed on the client side is valid - all expression conditions are filled.
    ///</summary>
    ///<returns>
    ///true if the filter expression is valid; otherwise, false.
    ///</returns>
};
ASPxClientFilterControl.prototype.Apply = function() {
    ///<summary>
    ///Applies a filter constructed by an end-user.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterControl.prototype.Reset = function() {
    ///<summary>
    ///Resets the current filter expression to a previously applied filter expression.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientFilterControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientFilterControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientFilterControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientFilterControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientFilterControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientFilterAppliedEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the Applied event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientFilterAppliedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterAppliedEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientFilterAppliedEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterAppliedEventArgs.prototype.filterExpression= 0;
ASPxClientListEdit.prototype.name= 0;
ASPxClientListEdit.prototype.SelectedIndexChanged= 0;
ASPxClientListEdit.prototype.GotFocus= 0;
ASPxClientListEdit.prototype.LostFocus= 0;
ASPxClientListEdit.prototype.Validation= 0;
ASPxClientListEdit.prototype.ValueChanged= 0;
ASPxClientListEdit.prototype.Init= 0;
ASPxClientListEdit.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the list editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
ASPxClientListEdit.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the list editor.
    ///</summary>
    ///<returns>
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
ASPxClientListEdit.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the list editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientListEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientListEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientListEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientListEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientListEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientListEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientListEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientListEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientListEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientListEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientListEditItem.prototype.selected= 0;
ASPxClientListEditItem.prototype.listEditBase= 0;
ASPxClientListEditItem.prototype.index= 0;
ASPxClientListEditItem.prototype.imageUrl= 0;
ASPxClientListEditItem.prototype.text= 0;
ASPxClientListEditItem.prototype.value= 0;
ASPxClientListEditItem.prototype.GetColumnText = function(columnIndex) {
    ///<summary>
    ///Returns the list item's value that corresponds to a column specified by its index.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's index within the editor's Columns collection.
    ///</param>
    ///<returns>
    ///A string value representing the list item's value that corresponds to the specified column.
    ///</returns>
};
ASPxClientListEditItem.prototype.GetColumnText = function(columnName) {
    ///<summary>
    ///Returns the list item's value that corresponds to a column specified by its field name.
    ///</summary>
    ///<param name = "columnName">
    ///A string value that specifies the column's field name defined via the FieldName property.
    ///</param>
    ///<returns>
    ///A string value that represents the list item's value that corresponds to the specified column.
    ///</returns>
};
ASPxClientListBox.prototype.name= 0;
ASPxClientListBox.prototype.BeginCallback= 0;
ASPxClientListBox.prototype.EndCallback= 0;
ASPxClientListBox.prototype.CallbackError= 0;
ASPxClientListBox.prototype.KeyDown= 0;
ASPxClientListBox.prototype.KeyPress= 0;
ASPxClientListBox.prototype.KeyUp= 0;
ASPxClientListBox.prototype.SelectedIndexChanged= 0;
ASPxClientListBox.prototype.ItemDoubleClick= 0;
ASPxClientListBox.prototype.GotFocus= 0;
ASPxClientListBox.prototype.LostFocus= 0;
ASPxClientListBox.prototype.Validation= 0;
ASPxClientListBox.prototype.ValueChanged= 0;
ASPxClientListBox.prototype.Init= 0;
ASPxClientListBox.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns>
    ///An integer value representing the total number of items in the editor's item collection.
    ///</returns>
};
ASPxClientListBox.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the list box editor's item collection.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the item to search for.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object representing the collection item found.
    ///</returns>
};
ASPxClientListBox.prototype.GetSelectedIndices = function() {
    ///<summary>
    ///Returns an array of the list editor's selected items indices.
    ///</summary>
    ///<returns>
    ///An array of integer values that represent the indices of the selected items.
    ///</returns>
};
ASPxClientListBox.prototype.GetSelectedValues = function() {
    ///<summary>
    ///Returns an array of the list editor's selected items values.
    ///</summary>
    ///<returns>
    ///An array of Object[] objects that represent the values of the selected items.
    ///</returns>
};
ASPxClientListBox.prototype.GetSelectedItems = function() {
    ///<summary>
    ///Returns an array of the list editor's selected items.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem[]">
    ///An array of ASPxClientListEditItem objects that represent the selected items.
    ///</returns>
};
ASPxClientListBox.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all list box items.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.UnselectAll = function() {
    ///<summary>
    ///Unselects all list box items.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SelectIndices = function(indices) {
    ///<summary>
    ///Selects the items with the specified indices within a list box.
    ///</summary>
    ///<param name = "indices">
    ///An array of integer values that represent the items indices.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.UnselectIndices = function(indices) {
    ///<summary>
    ///Unselects an array of the list box items with the specified indices.
    ///</summary>
    ///<param name = "indices">
    ///An array of integer values that represent the indices.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SelectItems = function(items) {
    ///<summary>
    ///Selects the specified items within a list box.
    ///</summary>
    ///<param name = "items">
    ///An array of ASPxClientListEditItem objects that represent the items.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.UnselectItems = function(items) {
    ///<summary>
    ///Unselects an array of the specified list box items.
    ///</summary>
    ///<param name = "items">
    ///An array of ASPxClientListEditItem objects that represent the items.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SelectValues = function(values) {
    ///<summary>
    ///Select the items with the specified values within a list box.
    ///</summary>
    ///<param name = "values">
    ///An array of Object[] objects that represent the item's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.UnselectValues = function(values) {
    ///<summary>
    ///Unselects an array of the list box items with the specified values.
    ///</summary>
    ///<param name = "values">
    ///An array of Object[] objects that represent the values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.MakeItemVisible = function(index) {
    ///<summary>
    ///Scrolls the editor's item list, so that the specified item becomes visible.
    ///</summary>
    ///<param name = "index">
    ///An integer value that specifies the item's index within the editor's client item list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.InitOnContainerMadeVisible = function() {
    ///<summary>
    ///Initializes the ASPxClientListBox client object when its parent container becomes visible dynamically, on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.AddItem = function(text) {
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns>
    ///An integer value that represents the added item's index.
    ///</returns>
};
ASPxClientListBox.prototype.AddItem = function(text, value) {
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text and associated value, and returns the index of the added item.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns>
    ///An integer value that represents the added item's index.
    ///</returns>
};
ASPxClientListBox.prototype.AddItem = function(text, value, imageUrl) {
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns>
    ///An integer value that represents the added item's index.
    ///</returns>
};
ASPxClientListBox.prototype.InsertItem = function(index, text, value, imageUrl) {
    ///<summary>
    ///Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.InsertItem = function(index, text, value) {
    ///<summary>
    ///Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.InsertItem = function(index, text) {
    ///<summary>
    ///Inserts a new item specified by its display text into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.BeginUpdate = function() {
    ///<summary>
    ///Prevents the client list box editor from being rendered until the EndUpdate method is called.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.EndUpdate = function() {
    ///<summary>
    ///Re-enables editor render operations after a call to the BeginUpdate method, and forces an immediate re-rendering.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.ClearItems = function() {
    ///<summary>
    ///Removes all items from the client list box editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.RemoveItem = function(index) {
    ///<summary>
    ///Removes an item specified by its index from the client list editor.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the index of the list item to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.FindItemByText = function(text) {
    ///<summary>
    ///Returns a list box item by its text.
    ///</summary>
    ///<param name = "text">
    ///A string that specifies the item's text.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the list box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
ASPxClientListBox.prototype.FindItemByValue = function(value) {
    ///<summary>
    ///Returns a list box item by its value.
    ///</summary>
    ///<param name = "value">
    ///An object that specifies the item's value.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the list box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
ASPxClientListBox.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server, and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.AddItem = function(texts) {
    ///<summary>
    ///Adds a new item to the end of the editor's items collection, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns>
    ///An integer value representing the position at which a new item was added.
    ///</returns>
};
ASPxClientListBox.prototype.AddItem = function(texts, value) {
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns>
    ///An integer value representing the position to which the new item was added.
    ///</returns>
};
ASPxClientListBox.prototype.AddItem = function(texts, value, imageUrl) {
    ///<summary>
    ///Adds a new item to the end of the editor's items collection, specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns>
    ///An integer value representing the position at which a new item was added.
    ///</returns>
};
ASPxClientListBox.prototype.InsertItem = function(index, texts, value, imageUrl) {
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.InsertItem = function(index, texts, value) {
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.InsertItem = function(index, texts) {
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the list editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
ASPxClientListBox.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the list editor.
    ///</summary>
    ///<returns>
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
ASPxClientListBox.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the list editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientListBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientListBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientListBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientListBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientListBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientListBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientListBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientListBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientListBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientListBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.name= 0;
ASPxClientRadioButtonList.prototype.SelectedIndexChanged= 0;
ASPxClientRadioButtonList.prototype.GotFocus= 0;
ASPxClientRadioButtonList.prototype.LostFocus= 0;
ASPxClientRadioButtonList.prototype.Validation= 0;
ASPxClientRadioButtonList.prototype.ValueChanged= 0;
ASPxClientRadioButtonList.prototype.Init= 0;
ASPxClientRadioButtonList.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns>
    ///An integer value representing the total number of items in the editor's item collection.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the editor's item collection.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the item to search for.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object representing the collection item found.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the list editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the list editor.
    ///</summary>
    ///<returns>
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the list editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientListEditItemSelectedChangedEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the SelectedIndexChanged event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientListEditItemSelectedChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEditItemSelectedChangedEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientListEditItemSelectedChangedEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEditItemSelectedChangedEventArgs.prototype.index= 0;
ASPxClientListEditItemSelectedChangedEventArgs.prototype.isSelected= 0;
ASPxClientListEditItemSelectedChangedEventArgs.prototype.processOnServer= 0;
ASPxClientProgressBar.prototype.name= 0;
ASPxClientProgressBar.prototype.Init= 0;
ASPxClientProgressBar.prototype.SetPosition = function(position) {
    ///<summary>
    ///Sets the position of the operation's progress.
    ///</summary>
    ///<param name = "position">
    ///An integer value specifying the progress position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetPosition = function() {
    ///<summary>
    ///Gets the position of the operation's progress.
    ///</summary>
    ///<returns>
    ///An integer value representing the progress position.
    ///</returns>
};
ASPxClientProgressBar.prototype.GetPercent = function() {
    ///<summary>
    ///Sets the percentage representation of the progress position.
    ///</summary>
    ///<returns>
    ///An integer value representing the progress position as a percentage.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetMinimum = function(min) {
    ///<summary>
    ///Sets the minimum range value of the progress bar.
    ///</summary>
    ///<param name = "min">
    ///An integer value specifying the minimum value of the progress bar range.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.SetMaximum = function(max) {
    ///<summary>
    ///Sets the maximum range value of the progress bar.
    ///</summary>
    ///<param name = "max">
    ///An integer value specifying the maximum value of the progress bar range.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetMinimum = function() {
    ///<summary>
    ///Gets the minimum range value of the progress bar.
    ///</summary>
    ///<returns>
    ///An integer value specifying the minimum value of the progress bar range.
    ///</returns>
};
ASPxClientProgressBar.prototype.GetMaximum = function() {
    ///<summary>
    ///Gets the maximum range value of the progress bar.
    ///</summary>
    ///<returns>
    ///An integer value specifying the maximum value of the progress bar range.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetMinMaxValues = function(minValue, maxValue) {
    ///<summary>
    ///Sets the minimum and maximum range values of the progress bar.
    ///</summary>
    ///<param name = "minValue">
    ///An integer value specifying the minimum value of the progress bar range.
    ///</param>
    ///<param name = "maxValue">
    ///An integer value specifying the maximum value of the progress bar range.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientProgressBar.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientProgressBar.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.name= 0;
ASPxClientSpinEditBase.prototype.ButtonClick= 0;
ASPxClientSpinEditBase.prototype.KeyDown= 0;
ASPxClientSpinEditBase.prototype.KeyPress= 0;
ASPxClientSpinEditBase.prototype.KeyUp= 0;
ASPxClientSpinEditBase.prototype.TextChanged= 0;
ASPxClientSpinEditBase.prototype.GotFocus= 0;
ASPxClientSpinEditBase.prototype.LostFocus= 0;
ASPxClientSpinEditBase.prototype.Validation= 0;
ASPxClientSpinEditBase.prototype.ValueChanged= 0;
ASPxClientSpinEditBase.prototype.Init= 0;
ASPxClientSpinEditBase.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientSpinEdit.prototype.name= 0;
ASPxClientSpinEdit.prototype.NumberChanged= 0;
ASPxClientSpinEdit.prototype.ButtonClick= 0;
ASPxClientSpinEdit.prototype.KeyDown= 0;
ASPxClientSpinEdit.prototype.KeyPress= 0;
ASPxClientSpinEdit.prototype.KeyUp= 0;
ASPxClientSpinEdit.prototype.TextChanged= 0;
ASPxClientSpinEdit.prototype.GotFocus= 0;
ASPxClientSpinEdit.prototype.LostFocus= 0;
ASPxClientSpinEdit.prototype.Validation= 0;
ASPxClientSpinEdit.prototype.ValueChanged= 0;
ASPxClientSpinEdit.prototype.Init= 0;
ASPxClientSpinEdit.prototype.SetNumber = function(number) {
    ///<summary>
    ///Sets the spin editor's value.
    ///</summary>
    ///<param name = "number">
    ///A decimal number specifying the value to assign to the spin editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetNumber = function() {
    ///<summary>
    ///Gets a number which represents the spin editor's value.
    ///</summary>
    ///<returns>
    ///A decimal number representing the value of the spin editor.
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the text within the editor.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetMinValue = function(value) {
    ///<summary>
    ///Sets the minimum value of the editor.
    ///</summary>
    ///<param name = "value">
    ///A decimal value specifying the minimum value of the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetMinValue = function() {
    ///<summary>
    ///Gets the minimum value of the editor.
    ///</summary>
    ///<returns>
    ///A Decimal value representing the minimum value of the editor.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetMaxValue = function(value) {
    ///<summary>
    ///Sets the maximum value of the editor.
    ///</summary>
    ///<param name = "value">
    ///A decimal value specifying the maximum value of the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetMaxValue = function() {
    ///<summary>
    ///Gets the maximum value of the editor.
    ///</summary>
    ///<returns>
    ///A Decimal value representing the maximum value of the editor.
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientSpinEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTimeEdit.prototype.name= 0;
ASPxClientTimeEdit.prototype.DateChanged= 0;
ASPxClientTimeEdit.prototype.ButtonClick= 0;
ASPxClientTimeEdit.prototype.KeyDown= 0;
ASPxClientTimeEdit.prototype.KeyPress= 0;
ASPxClientTimeEdit.prototype.KeyUp= 0;
ASPxClientTimeEdit.prototype.TextChanged= 0;
ASPxClientTimeEdit.prototype.GotFocus= 0;
ASPxClientTimeEdit.prototype.LostFocus= 0;
ASPxClientTimeEdit.prototype.Validation= 0;
ASPxClientTimeEdit.prototype.ValueChanged= 0;
ASPxClientTimeEdit.prototype.Init= 0;
ASPxClientTimeEdit.prototype.SetDate = function(date) {
    ///<summary>
    ///Sets the time editor's value.
    ///</summary>
    ///<param name = "date">
    ///A date-time object specifying the value to assign to the time editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetDate = function() {
    ///<summary>
    ///Returns a date which represents the time editor's value.
    ///</summary>
    ///<returns>
    ///A date-time object representing the value of the time editor.
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientTimeEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientStaticEdit.prototype.name= 0;
ASPxClientStaticEdit.prototype.Click= 0;
ASPxClientStaticEdit.prototype.Init= 0;
ASPxClientStaticEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientStaticEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientStaticEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientStaticEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientStaticEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientStaticEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientStaticEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientStaticEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientEditEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle client-side events which concern clicking within editors.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source. Identifies the editor that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientEditClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientEditEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditClickEventArgs.prototype.htmlElement= 0;
ASPxClientEditClickEventArgs.prototype.htmlEvent= 0;
ASPxClientHyperLink.prototype.name= 0;
ASPxClientHyperLink.prototype.Click= 0;
ASPxClientHyperLink.prototype.Init= 0;
ASPxClientHyperLink.prototype.GetNavigateUrl = function() {
    ///<summary>
    ///Gets an URL which defines the navigation location for the editor's hyperlink.
    ///</summary>
    ///<returns>
    ///A string value which represents an URL to where the client web browser will navigate when a hyperlink in the editor is clicked.
    ///</returns>
};
ASPxClientHyperLink.prototype.SetNavigateUrl = function(url) {
    ///<summary>
    ///Specifies an URL which defines the navigation location for the editor's hyperlink.
    ///</summary>
    ///<param name = "url">
    ///A string value which specifies an URL to where the client web browser will navigate when a hyperlink in the editor is clicked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.GetText = function() {
    ///<summary>
    ///Gets the text caption displayed for the hyperlink in the hyperlink editor.
    ///</summary>
    ///<returns>
    ///A string value representing the text caption for the hyperlink in the editor.
    ///</returns>
};
ASPxClientHyperLink.prototype.SetText = function(text) {
    ///<summary>
    ///Specifies the text caption displayed for the hyperlink in the hyperlink editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text caption for the hyperlink in the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientHyperLink.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientHyperLink.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientHyperLink.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientHyperLink.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientHyperLink.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientHyperLink.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientHyperLink.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientImageBase.prototype.name= 0;
ASPxClientImageBase.prototype.Click= 0;
ASPxClientImageBase.prototype.Init= 0;
ASPxClientImageBase.prototype.SetSize = function(width, height) {
    ///<summary>
    ///Sets the size of the image displayed within the image editor.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the image's width.
    ///</param>
    ///<param name = "height">
    ///An integer value that specifies the image's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientImageBase.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientImageBase.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientImageBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientImageBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientImageBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientImageBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientImageBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientImage.prototype.name= 0;
ASPxClientImage.prototype.Click= 0;
ASPxClientImage.prototype.Init= 0;
ASPxClientImage.prototype.GetImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the image editor.
    ///</summary>
    ///<returns>
    ///A string value that is the URL to the image displayed within the editor.
    ///</returns>
};
ASPxClientImage.prototype.SetImageUrl = function(url) {
    ///<summary>
    ///Sets the URL which points to the image displayed within the image editor.
    ///</summary>
    ///<param name = "url">
    ///A string value specifying the URL to the image displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.SetSize = function(width, height) {
    ///<summary>
    ///Sets the size of the image displayed within the image editor.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the image's width.
    ///</param>
    ///<param name = "height">
    ///An integer value that specifies the image's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientImage.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientImage.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientImage.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientImage.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientImage.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientImage.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientImage.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientBinaryImage.prototype.name= 0;
ASPxClientBinaryImage.prototype.Click= 0;
ASPxClientBinaryImage.prototype.Init= 0;
ASPxClientBinaryImage.prototype.SetSize = function(width, height) {
    ///<summary>
    ///Sets the size of the image displayed within the image editor.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the image's width.
    ///</param>
    ///<param name = "height">
    ///An integer value that specifies the image's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientBinaryImage.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientBinaryImage.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientBinaryImage.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientBinaryImage.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientBinaryImage.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientLabel.prototype.name= 0;
ASPxClientLabel.prototype.Click= 0;
ASPxClientLabel.prototype.Init= 0;
ASPxClientLabel.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the text displayed within the editor.
    ///</returns>
};
ASPxClientLabel.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientLabel.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientLabel.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientLabel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientLabel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientLabel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientLabel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientLabel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTextBox.prototype.name= 0;
ASPxClientTextBox.prototype.KeyDown= 0;
ASPxClientTextBox.prototype.KeyPress= 0;
ASPxClientTextBox.prototype.KeyUp= 0;
ASPxClientTextBox.prototype.TextChanged= 0;
ASPxClientTextBox.prototype.GotFocus= 0;
ASPxClientTextBox.prototype.LostFocus= 0;
ASPxClientTextBox.prototype.Validation= 0;
ASPxClientTextBox.prototype.ValueChanged= 0;
ASPxClientTextBox.prototype.Init= 0;
ASPxClientTextBox.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientTextBox.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientTextBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientTextBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientTextBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientTextBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientTextBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTextBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTextBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTextBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTextBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTextBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientMemo.prototype.name= 0;
ASPxClientMemo.prototype.KeyDown= 0;
ASPxClientMemo.prototype.KeyPress= 0;
ASPxClientMemo.prototype.KeyUp= 0;
ASPxClientMemo.prototype.TextChanged= 0;
ASPxClientMemo.prototype.GotFocus= 0;
ASPxClientMemo.prototype.LostFocus= 0;
ASPxClientMemo.prototype.Validation= 0;
ASPxClientMemo.prototype.ValueChanged= 0;
ASPxClientMemo.prototype.Init= 0;
ASPxClientMemo.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientMemo.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientMemo.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientMemo.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientMemo.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientMemo.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientMemo.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientMemo.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientMemo.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientMemo.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientMemo.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientMemo.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientButtonEdit.prototype.name= 0;
ASPxClientButtonEdit.prototype.ButtonClick= 0;
ASPxClientButtonEdit.prototype.KeyDown= 0;
ASPxClientButtonEdit.prototype.KeyPress= 0;
ASPxClientButtonEdit.prototype.KeyUp= 0;
ASPxClientButtonEdit.prototype.TextChanged= 0;
ASPxClientButtonEdit.prototype.GotFocus= 0;
ASPxClientButtonEdit.prototype.LostFocus= 0;
ASPxClientButtonEdit.prototype.Validation= 0;
ASPxClientButtonEdit.prototype.ValueChanged= 0;
ASPxClientButtonEdit.prototype.Init= 0;
ASPxClientButtonEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientButtonEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientButtonEditClickEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the ButtonClick event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source. Identifies the button editor that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientButtonEditClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditClickEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientButtonEditClickEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditClickEventArgs.prototype.buttonIndex= 0;
ASPxClientButtonEditClickEventArgs.prototype.processOnServer= 0;
ASPxClientValidationSummary.prototype.name= 0;
ASPxClientValidationSummary.prototype.VisibilityChanged= 0;
ASPxClientValidationSummary.prototype.Init= 0;
ASPxClientValidationSummary.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientValidationSummary.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientValidationSummary.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationSummary.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationSummary.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationSummary.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientValidationSummary.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientValidationSummary.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationSummary.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientValidationSummary.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationSummary.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientValidationSummaryVisibilityChangedEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the VisibilityChanged client event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e">
    ///A ASPxClientValidationSummaryVisibilityChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationSummaryVisibilityChangedEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientValidationSummaryVisibilityChangedEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationSummaryVisibilityChangedEventArgs.prototype.visible= 0;
ASPxClientGaugeControl.prototype.name= 0;
ASPxClientGaugeControl.prototype.BeginCallback= 0;
ASPxClientGaugeControl.prototype.EndCallback= 0;
ASPxClientGaugeControl.prototype.CallbackError= 0;
ASPxClientGaugeControl.prototype.Init= 0;
ASPxClientGaugeControl.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGaugeControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientGaugeControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientGaugeControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGaugeControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGaugeControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGaugeControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientGaugeControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientGaugeControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGaugeControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientGaugeControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGaugeControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientGridLookup.prototype.name= 0;
ASPxClientGridLookup.prototype.RowClick= 0;
ASPxClientGridLookup.prototype.BeginCallback= 0;
ASPxClientGridLookup.prototype.EndCallback= 0;
ASPxClientGridLookup.prototype.DropDown= 0;
ASPxClientGridLookup.prototype.CloseUp= 0;
ASPxClientGridLookup.prototype.ButtonClick= 0;
ASPxClientGridLookup.prototype.KeyDown= 0;
ASPxClientGridLookup.prototype.KeyPress= 0;
ASPxClientGridLookup.prototype.KeyUp= 0;
ASPxClientGridLookup.prototype.TextChanged= 0;
ASPxClientGridLookup.prototype.GotFocus= 0;
ASPxClientGridLookup.prototype.LostFocus= 0;
ASPxClientGridLookup.prototype.Validation= 0;
ASPxClientGridLookup.prototype.ValueChanged= 0;
ASPxClientGridLookup.prototype.Init= 0;
ASPxClientGridLookup.prototype.GetGridView = function() {
    ///<summary>
    ///Returns a client object representing the built-in dropdown grid.
    ///</summary>
    ///<returns type = "ASPxClientGridView">
    ///An ASPxClientGridView object representing the embedded grid.
    ///</returns>
};
ASPxClientGridLookup.prototype.ConfirmCurrentSelection = function() {
    ///<summary>
    ///Confirms the current selection made by an end-user within the editor's dropdown grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.RollbackToLastConfirmedSelection = function() {
    ///<summary>
    ///Cancels the current selection made by an end-user within the editor's dropdown grid and rolls back to the last confirmed selection. The selection can be confirmed by pressing the Enter key and calling the ConfirmCurrentSelection method.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientGridLookup.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientGridLookup.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientGridLookup.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientGridLookup.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientGridLookup.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientGridLookup.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientGridLookup.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientGridLookup.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientGridLookup.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientGridLookup.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientGridLookup.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.name= 0;
ASPxClientGridView.prototype.SelectionChanged= 0;
ASPxClientGridView.prototype.FocusedRowChanged= 0;
ASPxClientGridView.prototype.ColumnSorting= 0;
ASPxClientGridView.prototype.ColumnGrouping= 0;
ASPxClientGridView.prototype.ColumnMoving= 0;
ASPxClientGridView.prototype.ColumnStartDragging= 0;
ASPxClientGridView.prototype.ColumnResizing= 0;
ASPxClientGridView.prototype.ColumnResized= 0;
ASPxClientGridView.prototype.RowExpanding= 0;
ASPxClientGridView.prototype.RowCollapsing= 0;
ASPxClientGridView.prototype.DetailRowExpanding= 0;
ASPxClientGridView.prototype.DetailRowCollapsing= 0;
ASPxClientGridView.prototype.RowClick= 0;
ASPxClientGridView.prototype.RowDblClick= 0;
ASPxClientGridView.prototype.ContextMenu= 0;
ASPxClientGridView.prototype.CustomizationWindowCloseUp= 0;
ASPxClientGridView.prototype.CustomButtonClick= 0;
ASPxClientGridView.prototype.BeginCallback= 0;
ASPxClientGridView.prototype.EndCallback= 0;
ASPxClientGridView.prototype.CallbackError= 0;
ASPxClientGridView.prototype.Init= 0;
ASPxClientGridView.prototype.SetEditValue = function(columnIndex, value) {
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that identifies the data column within the ASPxGridView's column collection.
    ///</param>
    ///<param name = "value">
    ///A String value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SetEditValue = function(columnFieldNameOrId, value) {
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<param name = "value">
    ///A String value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ShowFilterControl = function() {
    ///<summary>
    ///Displays the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.CloseFilterControl = function() {
    ///<summary>
    ///Hides the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SetFilterEnabled = function(isFilterEnabled) {
    ///<summary>
    ///Enables or disables the current filter.
    ///</summary>
    ///<param name = "isFilterEnabled">
    ///true to enable the current filter; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetVertScrollPos = function() {
    ///<summary>
    ///Returns the current vertical scroll position of the grid's content.
    ///</summary>
    ///<returns>
    ///An integer value representing the vertical scroll position.
    ///</returns>
};
ASPxClientGridView.prototype.GetHorzScrollPos = function() {
    ///<summary>
    ///Returns the current horizontal scroll position of the grid's content.
    ///</summary>
    ///<returns>
    ///An integer value representing the horizontal scroll position.
    ///</returns>
};
ASPxClientGridView.prototype.SetVertScrollPos = function(position) {
    ///<summary>
    ///Specifies the vertical scroll position for the grid's content.
    ///</summary>
    ///<param name = "position">
    ///An integer value specifying the vertical scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SetHorzScrollPos = function(position) {
    ///<summary>
    ///Specifies the horizontal scroll position for the grid's content.
    ///</summary>
    ///<param name = "position">
    ///An integer value specifying the horizontal scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GroupBy = function(column, groupIndex) {
    ///<summary>
    ///Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
    ///</param>
    ///<param name = "groupIndex">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GroupBy = function(columnIndex, groupIndex) {
    ///<summary>
    ///Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "groupIndex">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GroupBy = function(columnFieldNameOrId, groupIndex) {
    ///<summary>
    ///Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<param name = "groupIndex">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GroupBy = function(column, groupIndex, sortOrder) {
    ///<summary>
    ///Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
    ///</param>
    ///<param name = "groupIndex">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GroupBy = function(columnIndex, groupIndex, sortOrder) {
    ///<summary>
    ///Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "groupIndex">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GroupBy = function(columnFieldNameOrId, groupIndex, sortOrder) {
    ///<summary>
    ///Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<param name = "groupIndex">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SortBy = function(column) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SortBy = function(columnIndex) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SortBy = function(columnFieldNameOrId) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SortBy = function(column, sortOrder) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SortBy = function(columnIndex, sortOrder) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SortBy = function(columnFieldNameOrId, sortOrder) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SortBy = function(column, sortOrder, reset) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SortBy = function(columnIndex, sortOrder, reset) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SortBy = function(columnFieldNameOrId, sortOrder, reset) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SortBy = function(column, sortOrder, reset, sortIndex) {
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SortBy = function(columnIndex, sortOrder, reset, sortIndex) {
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SortBy = function(columnFieldNameOrId, sortOrder, reset, sortIndex) {
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MoveColumn = function(column) {
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the column to hide.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MoveColumn = function(columnIndex) {
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the absolute index of the column to hide.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MoveColumn = function(columnFieldNameOrId) {
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that identifies the column to be hidden by the name of the data source field to which the column is bound, or by the column's name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MoveColumn = function(column, moveToColumnVisibleIndex) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that specifies the column's position among the visible columns within the ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MoveColumn = function(columnIndex, moveToColumnVisibleIndex) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that specifies the column's position among the visible columns within the ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MoveColumn = function(columnFieldNameOrId, moveToColumnVisibleIndex) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that specifies the column's position among the visible columns within the ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MoveColumn = function(column, moveToColumnVisibleIndex, moveBefore) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MoveColumn = function(columnIndex, moveToColumnVisibleIndex, moveBefore) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MoveColumn = function(columnFieldNameOrId, moveToColumnVisibleIndex, moveBefore) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MoveColumn = function(column, moveToColumnVisibleIndex, moveBefore, moveToGroup) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView and optionally groups the ASPxGridView's data by this column.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup">
    ///true to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MoveColumn = function(columnIndex, moveToColumnVisibleIndex, moveBefore, moveToGroup) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView and optionally groups the ASPxGridView's data by this column.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup">
    ///true to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MoveColumn = function(columnFieldNameOrId, moveToColumnVisibleIndex, moveBefore, moveToGroup) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView and optionally groups the ASPxGridView's data by this column.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's ID.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup">
    ///true to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MoveColumn = function(column, moveToColumnVisibleIndex, moveBefore, moveToGroup, moveFromGroup) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView and optionally groups or ungroups the ASPxGridView's data by this column.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup">
    ///true to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup">
    ///true to ungroup the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MoveColumn = function(columnIndex, moveToColumnVisibleIndex, moveBefore, moveToGroup, moveFromGroup) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView and optionally groups or ungroups the ASPxGridView's data by this column.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup">
    ///true to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup">
    ///true to ungroup the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MoveColumn = function(columnFieldNameOrId, moveToColumnVisibleIndex, moveBefore, moveToGroup, moveFromGroup) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView and optionally groups or ungroups the ASPxGridView's data by this column.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup">
    ///true to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup">
    ///true to ungroup the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetFocusedRowIndex = function() {
    ///<summary>
    ///Returns the focused row's index.
    ///</summary>
    ///<returns>
    ///A zero-based integer that specifies the focused row's index.
    ///</returns>
};
ASPxClientGridView.prototype.SetFocusedRowIndex = function(visibleIndex) {
    ///<summary>
    ///Moves focus to the specified row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that specifies the focused row's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.IsCustomizationWindowVisible = function() {
    ///<summary>
    ///Indicates whether the Customization Window is displayed.
    ///</summary>
    ///<returns>
    ///true if the customization window is displayed; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.ShowCustomizationWindow = function() {
    ///<summary>
    ///Invokes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ShowCustomizationWindow = function(showAtElement) {
    ///<summary>
    ///Invokes the Customization Window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "showAtElement">
    ///An object that specifies the HTML element relative to whose position the customization window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.HideCustomizationWindow = function() {
    ///<summary>
    ///Closes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectRows = function() {
    ///<summary>
    ///Selects all the unselected rows within the ASPxGridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectRows = function(visibleIndex) {
    ///<summary>
    ///Selects the specified row displayed within the ASPxGridView.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectRows = function(visibleIndices) {
    ///<summary>
    ///Selects the specified rows within the ASPxGridView.
    ///</summary>
    ///<param name = "visibleIndices">
    ///An array of zero-based indices that identify data rows within the ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectRows = function(visibleIndices, selected) {
    ///<summary>
    ///Selects or deselects the specified rows within the ASPxGridView.
    ///</summary>
    ///<param name = "visibleIndices">
    ///An array of zero-based indices that identify data rows within the ASPxGridView.
    ///</param>
    ///<param name = "selected">
    ///true to select the specified rows; false to deselect the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectRows = function(visibleIndex, selected) {
    ///<summary>
    ///Selects or deselects the specified row within the ASPxGridView.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer zero-based index that identifies the data row within the ASPxGridView.
    ///</param>
    ///<param name = "selected">
    ///true to select the specified row; false to deselect the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectRowsByKey = function(keys, selected) {
    ///<summary>
    ///Selects or deselects the specified rows displayed within the ASPxGridView.
    ///</summary>
    ///<param name = "keys">
    ///An array of objects that uniquely identify the rows.
    ///</param>
    ///<param name = "selected">
    ///true to select the specified rows; false to deselect the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectRowsByKey = function(key, selected) {
    ///<summary>
    ///Selects or deselects the specified row displayed within the ASPxGridView.
    ///</summary>
    ///<param name = "key">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<param name = "selected">
    ///true to select the specified row; false to deselect the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectRowsByKey = function(keys) {
    ///<summary>
    ///Selects the specified rows displayed within the ASPxGridView.
    ///</summary>
    ///<param name = "keys">
    ///An array of objects that uniquely identify the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectRowsByKey = function(key) {
    ///<summary>
    ///Selects the specified row displayed within the ASPxGridView.
    ///</summary>
    ///<param name = "key">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.UnselectRowsByKey = function(keys) {
    ///<summary>
    ///Deselects the specified rows displayed within the ASPxGridView.
    ///</summary>
    ///<param name = "keys">
    ///An array of objects that uniquely identify the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.UnselectRowsByKey = function(key) {
    ///<summary>
    ///Deselects the specified row displayed within the ASPxGridView.
    ///</summary>
    ///<param name = "key">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.UnselectRows = function() {
    ///<summary>
    ///Deselects all the selected rows within the ASPxGridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.UnselectRows = function(visibleIndices) {
    ///<summary>
    ///Deselects the specified rows (if selected) within the ASPxGridView.
    ///</summary>
    ///<param name = "visibleIndices">
    ///An array of zero-based indices that identify data rows within the ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.UnselectRows = function(visibleIndex) {
    ///<summary>
    ///Deselects the specified row (if selected) within the ASPxGridView.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.UnselectFilteredRows = function() {
    ///<summary>
    ///Deselects all grid rows which match a filter criteria currently applied within the ASPxGridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectRowOnPage = function(visibleIndex) {
    ///<summary>
    ///Selects the specified row displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectRowOnPage = function(visibleIndex, selected) {
    ///<summary>
    ///Selects or deselects the specified row displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<param name = "selected">
    ///true to select the specified row; false to deselect the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.UnselectRowOnPage = function(visibleIndex) {
    ///<summary>
    ///Deselects the specified row (if selected) displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectAllRowsOnPage = function() {
    ///<summary>
    ///Selects all unselected rows displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectAllRowsOnPage = function(selected) {
    ///<summary>
    ///Selects or deselects all rows displayed on the current page.
    ///</summary>
    ///<param name = "selected">
    ///true to select all unselected rows displayed on the current page; false to deselect all selected rows on the page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.UnselectAllRowsOnPage = function() {
    ///<summary>
    ///Deselects all selected rows displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetSelectedRowCount = function() {
    ///<summary>
    ///Returns the number of selected rows.
    ///</summary>
    ///<returns>
    ///An integer value that specifies the number of selected rows.
    ///</returns>
};
ASPxClientGridView.prototype.GetSelectedFieldValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the row values displayed within all selected rows.
    ///</summary>
    ///<param name = "fieldNames">
    ///The names of data source fields separated via a semicolon, whose values within the selected rows are returned.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetSelectedKeysOnPage = function() {
    ///<summary>
    ///Returns key values of selected rows displayed within the current page.
    ///</summary>
    ///<returns>
    ///An array that contains key values of selected rows displayed within the current page.
    ///</returns>
};
ASPxClientGridView.prototype.IsRowSelectedOnPage = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified row is selected within the current page.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns>
    ///true if the specified row is selected within the current page; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.GetRowValues = function(visibleIndex, fieldNames, onCallback) {
    ///<summary>
    ///Returns the values of the specified data source fields within the specified row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the data row.
    ///</param>
    ///<param name = "fieldNames">
    ///The names of data source fields separated via a semicolon, whose values within the specified row are returned.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetPageRowValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the row values displayed within the current page.
    ///</summary>
    ///<param name = "fieldNames">
    ///The names of data source fields whose values are returned.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetVisibleRowsOnPage = function() {
    ///<summary>
    ///Returns the number of rows displayed within the active page.
    ///</summary>
    ///<returns>
    ///An integer value that specifies the number of rows displayed within the active page.
    ///</returns>
};
ASPxClientGridView.prototype.GetTopVisibleIndex = function() {
    ///<summary>
    ///Returns the index of the first data row displayed within the ASPxGridView's active page.
    ///</summary>
    ///<returns>
    ///An integer value that specifies the index of the topmost row.
    ///</returns>
};
ASPxClientGridView.prototype.IsGroupRow = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified row is a group row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns>
    ///true if the specified row is a group row; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.IsDataRow = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified row is a data row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns>
    ///true if the specified row is a data row; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.IsGroupRowExpanded = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified group row is expanded.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the group row by its visible index.
    ///</param>
    ///<returns>
    ///true if the specified group row is expanded; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.GetColumnsCount = function() {
    ///<summary>
    ///Returns the number of columns within the client ASPxGridView.
    ///</summary>
    ///<returns>
    ///An integer value that specifies the number of columns within the client ASPxGridView.
    ///</returns>
};
ASPxClientGridView.prototype.GetColumn = function(columnIndex) {
    ///<summary>
    ///Returns the client column that resides at the specified position within the column collection.
    ///</summary>
    ///<param name = "columnIndex">
    ///A zero-based index that identifies the column within the column collection.
    ///</param>
    ///<returns type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the client column.
    ///</returns>
};
ASPxClientGridView.prototype.GetColumnById = function(columnId) {
    ///<summary>
    ///Returns the column with the specified unique identifier.
    ///</summary>
    ///<param name = "columnId">
    ///A String value that specifies the column's unique identifier.
    ///</param>
    ///<returns type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the client column.
    ///</returns>
};
ASPxClientGridView.prototype.GetColumnByField = function(columnFieldName) {
    ///<summary>
    ///Returns the client column which is bound to the specified data source field.
    ///</summary>
    ///<param name = "columnFieldName">
    ///A String value that specifies the name of the data source field to which the column is bound.
    ///</param>
    ///<returns type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the client column bound to the specified data source field.
    ///</returns>
};
ASPxClientGridView.prototype.GetEditor = function(column) {
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the required data column within the client ASPxGridView.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An object representing the specified column's editor.
    ///</returns>
};
ASPxClientGridView.prototype.GetEditor = function(columnIndex) {
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An object representing the specified column's editor.
    ///</returns>
};
ASPxClientGridView.prototype.GetEditor = function(columnFieldNameOrId) {
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A string value that specifies the column's field name or ID.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An object representing the specified column's editor.
    ///</returns>
};
ASPxClientGridView.prototype.FocusEditor = function(column) {
    ///<summary>
    ///Moves focus to the specified edit cell within the edited row.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column within the client ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.FocusEditor = function(columnIndex) {
    ///<summary>
    ///Moves focus to the specified edit cell within the edited row.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.FocusEditor = function(columnFieldNameOrId) {
    ///<summary>
    ///Moves focus to the specified edit cell within the edited row.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's unique identifier, name or field name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetEditValue = function(column) {
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column within the client ASPxGridView.
    ///</param>
    ///<returns>
    ///A String value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
};
ASPxClientGridView.prototype.GetEditValue = function(columnIndex) {
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that identifies the data column within the ASPxGridView's column collection.
    ///</param>
    ///<returns>
    ///A String value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
};
ASPxClientGridView.prototype.GetEditValue = function(columnFieldNameOrId) {
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<returns>
    ///A String value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
};
ASPxClientGridView.prototype.SetEditValue = function(column, value) {
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column within the client ASPxGridView.
    ///</param>
    ///<param name = "value">
    ///A String value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetPopupEditForm = function() {
    ///<summary>
    ///Gets the Popup Edit Form.
    ///</summary>
    ///<returns type = "ASPxClientPopupControl">
    ///An ASPxClientPopupControl object that represents the Popup Edit Form.
    ///</returns>
};
ASPxClientGridView.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.PerformCallback = function(args) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetValuesOnCustomCallback = function(args, onCallback) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
    ///</summary>
    ///<param name = "args">
    ///A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the information on the client side.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Selects the specified page.
    ///</summary>
    ///<param name = "pageIndex">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page currently being selected.
    ///</summary>
    ///<returns>
    ///An integer value that specifies the active page's index.
    ///</returns>
};
ASPxClientGridView.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages to which the ASPxGridView's data is divided.
    ///</summary>
    ///<returns>
    ///An integer value that represents the number of grid pages.
    ///</returns>
};
ASPxClientGridView.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.UnGroup = function(column) {
    ///<summary>
    ///Ungroups data by the values of the specified column.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column within the ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.UnGroup = function(columnIndex) {
    ///<summary>
    ///Ungroups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.UnGroup = function(columnFieldNameOrId) {
    ///<summary>
    ///Ungroups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all group rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all group rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ExpandAllDetailRows = function() {
    ///<summary>
    ///Expands all detail rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.CollapseAllDetailRows = function() {
    ///<summary>
    ///Collapses all detail rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ExpandRow = function(visibleIndex) {
    ///<summary>
    ///Expands the specified group row preserving the collapsed state of any child group row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the group row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ExpandRow = function(visibleIndex, recursive) {
    ///<summary>
    ///Expands the specified group row and optionally child group rows at all nesting levels.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the group row.
    ///</param>
    ///<param name = "recursive">
    ///true to expand any child group rows at all nesting levels; false to preserve the collapsed state of any child group rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.CollapseRow = function(visibleIndex) {
    ///<summary>
    ///Collapses the specified group row preserving the expanded state of child group rows.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the group row by its visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.CollapseRow = function(visibleIndex, recursive) {
    ///<summary>
    ///Collapses the specified group row and optionally child group rows at all nesting levels.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the group row by its visible index.
    ///</param>
    ///<param name = "recursive">
    ///true to collapse child group rows at all nesting levels; false to preserve the expanded state of any child group row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.MakeRowVisible = function(visibleIndex) {
    ///<summary>
    ///Scrolls the view to the specified row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies a row by its visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ExpandDetailRow = function(visibleIndex) {
    ///<summary>
    ///Expands the specified detail row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer index that identifies the detail row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.CollapseDetailRow = function(visibleIndex) {
    ///<summary>
    ///Collapses the specified detail row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer index that identifies the detail row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetRowKey = function(visibleIndex) {
    ///<summary>
    ///Returns the key value of the specified data row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that specifies the row's visible index.
    ///</param>
    ///<returns>
    ///An object that is the specified data row's key value. If the index passed via the visibleIndex parameter is wrong, or the KeyFieldName property is not set, null is returned.
    ///</returns>
};
ASPxClientGridView.prototype.StartEditRow = function(visibleIndex) {
    ///<summary>
    ///Switches the ASPxGridView to edit mode.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer that identifies a data row to be edited.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.StartEditRowByKey = function(key) {
    ///<summary>
    ///Switches the ASPxGridView to edit mode.
    ///</summary>
    ///<param name = "key">
    ///An object that uniquely identifies a data row to be edited.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.IsEditing = function() {
    ///<summary>
    ///Indicates whether the ASPxGridView is in edit mode.
    ///</summary>
    ///<returns>
    ///true if the ASPxGridView is in edit mode; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.IsNewRowEditing = function() {
    ///<summary>
    ///Indicates whether a new row is being edited.
    ///</summary>
    ///<returns>
    ///true if the ASPxGridView is in edit mode for a new row; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.UpdateEdit = function() {
    ///<summary>
    ///Saves all the changes made and switches the ASPxGridView to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.CancelEdit = function() {
    ///<summary>
    ///Cancels all the changes made and switches the ASPxGridView to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.AddNewRow = function() {
    ///<summary>
    ///Adds a new record.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.DeleteRow = function(visibleIndex) {
    ///<summary>
    ///Deletes the specified row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.DeleteRowByKey = function(key) {
    ///<summary>
    ///Deletes a row with the specified key value.
    ///</summary>
    ///<param name = "key">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.Refresh = function() {
    ///<summary>
    ///Updates data displayed within the ASPxGridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ApplyFilter = function(filterExpression) {
    ///<summary>
    ///Applies the specified filter expression to the ASPxGridView.
    ///</summary>
    ///<param name = "filterExpression">
    ///A String value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ClearFilter = function() {
    ///<summary>
    ///Clears the filter expression applied to a client ASPxGridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetAutoFilterEditor = function(column) {
    ///<summary>
    ///Returns the editor used to edit the value in the auto filter row for the specified data column.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data colum within the ASPxGridView.
    ///</param>
    ///<returns>
    ///An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
    ///</returns>
};
ASPxClientGridView.prototype.GetAutoFilterEditor = function(columnIndex) {
    ///<summary>
    ///Returns the editor used to edit the value in the auto filter row for the specified data column.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that identifies the data column by its index.
    ///</param>
    ///<returns>
    ///An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
    ///</returns>
};
ASPxClientGridView.prototype.GetAutoFilterEditor = function(columnFieldNameOrId) {
    ///<summary>
    ///Returns the editor used to edit the value in the auto filter row for the specified data column.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's name or its data base field name.
    ///</param>
    ///<returns>
    ///An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
    ///</returns>
};
ASPxClientGridView.prototype.AutoFilterByColumn = function(column, val) {
    ///<summary>
    ///Applies a filter to the specified data column.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column within the client ASPxGridView.
    ///</param>
    ///<param name = "val">
    ///A String value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.AutoFilterByColumn = function(columnIndex, val) {
    ///<summary>
    ///Applies a filter to the specified data column.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "val">
    ///A String value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.AutoFilterByColumn = function(columnFieldNameOrId, val) {
    ///<summary>
    ///Applies a filter to the specified data column.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<param name = "val">
    ///A String value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GroupBy = function(column) {
    ///<summary>
    ///Groups data by the values of the specified column.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GroupBy = function(columnIndex) {
    ///<summary>
    ///Groups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GroupBy = function(columnFieldNameOrId) {
    ///<summary>
    ///Groups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientGridView.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientGridView.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientGridView.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientGridViewColumn.prototype.name= 0;
ASPxClientGridViewColumn.prototype.id= 0;
ASPxClientGridViewColumn.prototype.index= 0;
ASPxClientGridViewColumn.prototype.fieldName= 0;
ASPxClientGridViewColumn.prototype.visible= 0;
ASPxClientGridViewValuesCallback.prototype.Invoke = function(result) {
    ///<summary>
    ///Represents a JavaScript function which receives the list of row values when the client GetSelectedFieldValues method is called.
    ///</summary>
    ///<param name = "result">
    ///An object that represents the list of row values received from the server.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewValuesCallback.prototype.BeginInvoke = function(result, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientGridViewValuesCallback.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewColumnCancelEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the cancelable events of a client ASPxGridView column.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientGridViewColumnCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewColumnCancelEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientGridViewColumnCancelEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewColumnCancelEventArgs.prototype.column= 0;
ASPxClientGridViewColumnCancelEventArgs.prototype.cancel= 0;
ASPxClientGridViewColumnProcessingModeEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client events concerned with column processing.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///A ASPxClientGridViewColumnProcessingModeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewColumnProcessingModeEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientGridViewColumnProcessingModeEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewColumnProcessingModeEventArgs.prototype.column= 0;
ASPxClientGridViewColumnProcessingModeEventArgs.prototype.processOnServer= 0;
ASPxClientGridViewRowCancelEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the RowExpanding events.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientGridViewRowCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewRowCancelEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientGridViewRowCancelEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewRowCancelEventArgs.prototype.visibleIndex= 0;
ASPxClientGridViewRowCancelEventArgs.prototype.cancel= 0;
ASPxClientGridViewSelectionEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the SelectionChanged event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientGridViewSelectionEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewSelectionEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientGridViewSelectionEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewSelectionEventArgs.prototype.visibleIndex= 0;
ASPxClientGridViewSelectionEventArgs.prototype.isSelected= 0;
ASPxClientGridViewSelectionEventArgs.prototype.isAllRecordsOnPage= 0;
ASPxClientGridViewSelectionEventArgs.prototype.isChangedOnServer= 0;
ASPxClientGridViewSelectionEventArgs.prototype.processOnServer= 0;
ASPxClientGridViewRowClickEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the RowClick event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientGridViewRowClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewRowClickEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientGridViewRowClickEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewRowClickEventArgs.prototype.htmlEvent= 0;
ASPxClientGridViewRowClickEventArgs.prototype.visibleIndex= 0;
ASPxClientGridViewRowClickEventArgs.prototype.cancel= 0;
ASPxClientGridViewContextMenuEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the ContextMenu event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientGridViewContextMenuEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewContextMenuEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientGridViewContextMenuEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewContextMenuEventArgs.prototype.objectType= 0;
ASPxClientGridViewContextMenuEventArgs.prototype.index= 0;
ASPxClientGridViewContextMenuEventArgs.prototype.htmlEvent= 0;
ASPxClientGridViewCustomButtonEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomButtonClick event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientGridViewCustomButtonEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewCustomButtonEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientGridViewCustomButtonEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewCustomButtonEventArgs.prototype.visibleIndex= 0;
ASPxClientGridViewCustomButtonEventArgs.prototype.buttonID= 0;
ASPxClientGridViewCustomButtonEventArgs.prototype.processOnServer= 0;
ASPxClientGridViewColumnMovingEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the ColumnMoving event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientGridViewColumnMovingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewColumnMovingEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientGridViewColumnMovingEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewColumnMovingEventArgs.prototype.allow= 0;
ASPxClientGridViewColumnMovingEventArgs.prototype.sourceColumn= 0;
ASPxClientGridViewColumnMovingEventArgs.prototype.destinationColumn= 0;
ASPxClientGridViewColumnMovingEventArgs.prototype.isDropBefore= 0;
ASPxClientGridViewColumnMovingEventArgs.prototype.isGroupPanel= 0;
ASPxClientHtmlEditorCommandEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the corresponding client event.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the editor which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientHtmlEditorCommandEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorCommandEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientHtmlEditorCommandEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorCommandEventArgs.prototype.commandName= 0;
ASPxClientHtmlEditorCommandEventArgs.prototype.parameter= 0;
ASPxClientHtmlEditorCustomDialogEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client CustomDialogOpened event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientHtmlEditorCustomDialogEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorCustomDialogEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientHtmlEditorCustomDialogEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorCustomDialogEventArgs.prototype.name= 0;
ASPxClientHtmlEditorCustomDialogCloseEventArgsBase.prototype.status= 0;
ASPxClientHtmlEditorCustomDialogCloseEventArgsBase.prototype.name= 0;
ASPxClientHtmlEditorCustomDialogClosingEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client CustomDialogClosing event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientHtmlEditorCustomDialogClosingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorCustomDialogClosingEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientHtmlEditorCustomDialogClosingEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorCustomDialogClosingEventArgs.prototype.handled= 0;
ASPxClientHtmlEditorCustomDialogClosingEventArgs.prototype.status= 0;
ASPxClientHtmlEditorCustomDialogClosingEventArgs.prototype.name= 0;
ASPxClientHtmlEditorCustomDialogClosedEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client CustomDialogClosed event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientHtmlEditorCustomDialogClosedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorCustomDialogClosedEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientHtmlEditorCustomDialogClosedEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorCustomDialogClosedEventArgs.prototype.data= 0;
ASPxClientHtmlEditorCustomDialogClosedEventArgs.prototype.status= 0;
ASPxClientHtmlEditorCustomDialogClosedEventArgs.prototype.name= 0;
ASPxClientHtmlEditorValidationEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client Validation event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientHtmlEditorValidationEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorValidationEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientHtmlEditorValidationEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorValidationEventArgs.prototype.html= 0;
ASPxClientHtmlEditorValidationEventArgs.prototype.isValid= 0;
ASPxClientHtmlEditorValidationEventArgs.prototype.errorText= 0;
ASPxClientHtmlEditor.prototype.name= 0;
ASPxClientHtmlEditor.prototype.CustomCommand= 0;
ASPxClientHtmlEditor.prototype.CommandExecuted= 0;
ASPxClientHtmlEditor.prototype.GotFocus= 0;
ASPxClientHtmlEditor.prototype.LostFocus= 0;
ASPxClientHtmlEditor.prototype.SelectionChanged= 0;
ASPxClientHtmlEditor.prototype.HtmlChanged= 0;
ASPxClientHtmlEditor.prototype.CustomDialogOpened= 0;
ASPxClientHtmlEditor.prototype.CustomDialogClosing= 0;
ASPxClientHtmlEditor.prototype.CustomDialogClosed= 0;
ASPxClientHtmlEditor.prototype.Validation= 0;
ASPxClientHtmlEditor.prototype.BeginCallback= 0;
ASPxClientHtmlEditor.prototype.EndCallback= 0;
ASPxClientHtmlEditor.prototype.CallbackError= 0;
ASPxClientHtmlEditor.prototype.CustomDataCallback= 0;
ASPxClientHtmlEditor.prototype.Init= 0;
ASPxClientHtmlEditor.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the ASPxHtmlEditor's edit region.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetHtml = function() {
    ///<summary>
    ///Gets the HTML markup that represents the editor's content.
    ///</summary>
    ///<returns>
    ///A string value that represents the HTML markup.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetHtml = function(html) {
    ///<summary>
    ///Specifies the HTML markup that represents the editor's content.
    ///</summary>
    ///<param name = "html">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetHtml = function(html, clearUndoHistory) {
    ///<summary>
    ///Sets the HTML markup that represents the editor's content.
    ///</summary>
    ///<param name = "html">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<param name = "clearUndoHistory">
    ///true to clear the undo stack; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.ExecuteCommand = function(commandName, parameter, addToUndoHistory) {
    ///<summary>
    ///Executes the specified command.
    ///</summary>
    ///<param name = "commandName">
    ///A string value that specifies the command to perform.
    ///</param>
    ///<param name = "parameter">
    ///A string value specifying additional information about the command to perform.
    ///</param>
    ///<param name = "addToUndoHistory">
    ///true to add the specified command to the undo stack; otherwise, false.
    ///</param>
    ///<returns>
    ///true if the specified command has been completed successfully; otherwise, false.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SaveToUndoHistory = function() {
    ///<summary>
    ///Adds the current editor state to the undo/redo history.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetSelection = function() {
    ///<summary>
    ///Returns the selection within the ASPxHtmlEditor.
    ///</summary>
    ///<returns type = "ASPxClientHtmlEditorSelection">
    ///The ASPxClientHtmlEditorSelection object specifying the selection within the ASPxHtmlEditor.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.RestoreSelection = function() {
    ///<summary>
    ///Restores the selection within the ASPxHtmlEditor.
    ///</summary>
    ///<returns>
    ///true if selection has been restored successfully; otherwise, false.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetToolbarComboBoxValue = function(commandName, value) {
    ///<summary>
    ///Sets the value of the combo box within the HtmlEditor on the client side.
    ///</summary>
    ///<param name = "commandName">
    ///A string value that identifies the combo box's command name within the HtmlEditor's control collection.
    ///</param>
    ///<param name = "value">
    ///A string value that specifies the combo box's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value passes validation.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value passes validation; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.Validate = function() {
    ///<summary>
    ///Performs validation of the editor's content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.PerformDataCallback = function(parameter, onCallback) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientDataCallback object that represents the JavaScript function which receives the callback data as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientHtmlEditorSelection.prototype.GetSelectedElement = function() {
    ///<summary>
    ///Returns a DOM element that relates to the current selection.
    ///</summary>
    ///<returns>
    ///A DOM element representing the current selection.
    ///</returns>
};
ASPxClientHtmlEditorSelection.prototype.GetHtml = function() {
    ///<summary>
    ///Returns the HTML markup specifying the currently selected ASPxHtmlEditor content.
    ///</summary>
    ///<returns>
    ///A string value specifying the HTML markup.
    ///</returns>
};
ASPxClientHtmlEditorSelection.prototype.GetText = function() {
    ///<summary>
    ///Returns the text within the currently selected ASPxHtmlEditor content.
    ///</summary>
    ///<returns>
    ///A string value, that specifies the currently selected text.
    ///</returns>
};
ASPxClientHtmlEditorSelection.prototype.GetElements = function() {
    ///<summary>
    ///Returns an array of the currently selected elements.
    ///</summary>
    ///<returns>
    ///An array of objects that are currently selected.
    ///</returns>
};
ASPxClientHtmlEditorSelection.prototype.SetHtml = function(html, addToHistory) {
    ///<summary>
    ///Sets the new HTML markup in place of the currently selected within ASPxHtmlEditor content.
    ///</summary>
    ///<param name = "html">
    ///A string value specifying the new HTML markup.
    ///</param>
    ///<param name = "addToHistory">
    ///true to add this operation to the history; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.name= 0;
ASPxClientPivotGrid.prototype.CustomizationFieldsVisibleChanged= 0;
ASPxClientPivotGrid.prototype.CellClick= 0;
ASPxClientPivotGrid.prototype.CellDblClick= 0;
ASPxClientPivotGrid.prototype.AfterCallback= 0;
ASPxClientPivotGrid.prototype.BeforeCallback= 0;
ASPxClientPivotGrid.prototype.PopupMenuItemClick= 0;
ASPxClientPivotGrid.prototype.Init= 0;
ASPxClientPivotGrid.prototype.IsPrefilterVisible = function() {
    ///<summary>
    ///Indicates whether the Filter Editor (Prefilter) is visible.
    ///</summary>
    ///<returns>
    ///true if the Filter Editor (Prefilter) is visible; otherwise, false.
    ///</returns>
};
ASPxClientPivotGrid.prototype.ShowPrefilter = function() {
    ///<summary>
    ///Shows the Filter Editor (Prefilter).
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.HidePrefilter = function() {
    ///<summary>
    ///Hides the Filter Editor (Prefilter).
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.ClearPrefilter = function() {
    ///<summary>
    ///Clears the filter expression applied using the Prefilter (Filter Editor).
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.ChangePrefilterEnabled = function() {
    ///<summary>
    ///Enables or disables the current filter applied by the Filter Editor (Prefilter).
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.GetCustomizationFieldsVisibility = function() {
    ///<summary>
    ///Returns a value that specifies whether the customization form is visible.
    ///</summary>
    ///<returns>
    ///true if the customization form is visible; otherwise, false.
    ///</returns>
};
ASPxClientPivotGrid.prototype.SetCustomizationFieldsVisibility = function(value) {
    ///<summary>
    ///Specifies the visibility of the customization form.
    ///</summary>
    ///<param name = "value">
    ///true to display the customization form; false to hide the customization form.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.ChangeCustomizationFieldsVisibility = function() {
    ///<summary>
    ///Switches the customization form's visible state.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.PerformCallback = function(args) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument
    ///</summary>
    ///<param name = "args">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPivotGrid.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPivotGrid.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPivotGrid.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPivotGrid.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPivotGrid.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientClickEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the CellDblClick event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientClickEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientClickEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientClickEventArgs.prototype.HtmlEvent= 0;
ASPxClientClickEventArgs.prototype.Value= 0;
ASPxClientClickEventArgs.prototype.ColumnIndex= 0;
ASPxClientClickEventArgs.prototype.RowIndex= 0;
ASPxClientClickEventArgs.prototype.ColumnValue= 0;
ASPxClientClickEventArgs.prototype.RowValue= 0;
ASPxClientClickEventArgs.prototype.ColumnFieldName= 0;
ASPxClientClickEventArgs.prototype.RowFieldName= 0;
ASPxClientClickEventArgs.prototype.ColumnValueType= 0;
ASPxClientClickEventArgs.prototype.RowValueType= 0;
ASPxClientClickEventArgs.prototype.DataIndex= 0;
ASPxClientPivotMenuItemClickEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the PopupMenuItemClick event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientPivotMenuItemClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotMenuItemClickEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientPivotMenuItemClickEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotMenuItemClickEventArgs.prototype.MenuType= 0;
ASPxClientPivotMenuItemClickEventArgs.prototype.MenuItemName= 0;
ASPxClientPivotMenuItemClickEventArgs.prototype.FieldID= 0;
ASPxClientPivotMenuItemClickEventArgs.prototype.FieldValueIndex= 0;
ASPxClientPivotCustomization.prototype.name= 0;
ASPxClientPivotCustomization.prototype.Init= 0;
ASPxClientPivotCustomization.prototype.GetMainContainer = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPivotCustomization.prototype.GetPivotGrid = function() {
    ///<summary>
    ///Returns a client-side equivalent of the owner Pivot Grid Control.
    ///</summary>
    ///<returns type = "ASPxClientPivotGrid">
    ///An ASPxClientPivotGrid object that represents the client-side equivalent of the owner Pivot Grid Control.
    ///</returns>
};
ASPxClientPivotCustomization.prototype.SetHeight = function(value) {
    ///<summary>
    ///Specifies the Customization Control's height.
    ///</summary>
    ///<param name = "value">
    ///An integer value that specifies the Customization Control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotCustomization.prototype.SetWidth = function(value) {
    ///<summary>
    ///Specifies the Customization Control's width.
    ///</summary>
    ///<param name = "value">
    ///An integer value that specifies the Customization Control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotCustomization.prototype.UpdateHeight = function() {
    ///<summary>
    ///Recalculates the Customization Control height.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotCustomization.prototype.SetLayout = function(layout) {
    ///<summary>
    ///Specifies the Customization Control's layout.
    ///</summary>
    ///<param name = "layout">
    ///A string that specifies the Customization Control's layout.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotCustomization.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPivotCustomization.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPivotCustomization.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotCustomization.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotCustomization.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotCustomization.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPivotCustomization.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPivotCustomization.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotCustomization.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPivotCustomization.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotCustomization.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientAppointmentFlags.prototype.allowDelete= 0;
ASPxClientAppointmentFlags.prototype.allowEdit= 0;
ASPxClientAppointmentFlags.prototype.allowResize= 0;
ASPxClientAppointmentFlags.prototype.allowCopy= 0;
ASPxClientAppointmentFlags.prototype.allowDrag= 0;
ASPxClientAppointmentFlags.prototype.allowDragBetweenResources= 0;
ASPxClientAppointmentFlags.prototype.allowInplaceEditor= 0;
ASPxClientAppointmentFlags.prototype.allowConflicts= 0;
ASPxClientAppointment.prototype.interval= 0;
ASPxClientAppointment.prototype.resources= 0;
ASPxClientAppointment.prototype.appointmentId= 0;
ASPxClientAppointment.prototype.appointmentType= 0;
ASPxClientAppointment.prototype.statusIndex= 0;
ASPxClientAppointment.prototype.labelIndex= 0;
ASPxClientAppointment.prototype.subject= 0;
ASPxClientAppointment.prototype.description= 0;
ASPxClientAppointment.prototype.location= 0;
ASPxClientAppointment.prototype.allDay= 0;
ASPxClientAppointment.prototype.AddResource = function(resourceId) {
    ///<summary>
    ///Adds a resource to the collection of resources associated with the client appointment.
    ///</summary>
    ///<param name = "resourceId">
    ///An object, representing the resource id.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetResource = function(index) {
    ///<summary>
    ///Gets the resource associated with the client-side appointment by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer, representing an index of a resource in a resource collection associated with the current appointment.
    ///</param>
    ///<returns>
    ///An identifier of the specified resource (Id)
    ///</returns>
};
ASPxClientAppointment.prototype.SetStart = function(start) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the Start appointment property.
    ///</summary>
    ///<param name = "start">
    ///A DateTime value representing the appointment start.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetStart = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the Start appointment property.
    ///</summary>
    ///<returns>
    ///A DateTime value representing the appointment start.
    ///</returns>
};
ASPxClientAppointment.prototype.SetEnd = function(end) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the End appointment property.
    ///</summary>
    ///<param name = "end">
    ///A DateTime value representing the end of the appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetEnd = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the End appointment property.
    ///</summary>
    ///<returns>
    ///A DateTime value representing the end of the appointment.
    ///</returns>
};
ASPxClientAppointment.prototype.SetDuration = function(duration) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the Duration appointment property.
    ///</summary>
    ///<param name = "duration">
    ///A TimeSpan object representing the appointment duration.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetDuration = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the Duration appointment property.
    ///</summary>
    ///<returns>
    ///A TimeSpan object representing the appointment duration.
    ///</returns>
};
ASPxClientAppointment.prototype.SetId = function(id) {
    ///<summary>
    ///Sets the ID of the client appointment.
    ///</summary>
    ///<param name = "id">
    ///An object representing the appointment identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetId = function() {
    ///<summary>
    ///Gets the ID of the client appointment.
    ///</summary>
    ///<returns>
    ///An object representing the appointment identifier.
    ///</returns>
};
ASPxClientAppointment.prototype.SetAppointmentType = function(type) {
    ///<summary>
    ///Specifies the type of the current client appointment.
    ///</summary>
    ///<param name = "type">
    ///An ASPxAppointmentType enumeration value indicating the appointment type.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetAppointmentType = function() {
    ///<summary>
    ///Gets the type of the client appointment.
    ///</summary>
    ///<returns type = "ASPxAppointmentType">
    ///An ASPxAppointmentType enumeration value indicating the appointment type.
    ///</returns>
};
ASPxClientAppointment.prototype.SetStatusId = function(statusId) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the StatusId appointment property.
    ///</summary>
    ///<param name = "statusId">
    ///An integer representing the index in the AppointmentStatusCollection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetStatusId = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the StatusId appointment property.
    ///</summary>
    ///<returns>
    ///An integer representing the index in the AppointmentStatusCollection.
    ///</returns>
};
ASPxClientAppointment.prototype.SetLabelId = function(statusId) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the LabelId appointment property.
    ///</summary>
    ///<param name = "statusId">
    ///An integer representing the index of the label in the Labels label collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetLabelId = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the LabelId appointment property.
    ///</summary>
    ///<returns>
    ///An integer representing the index of label in the Labels label collection.
    ///</returns>
};
ASPxClientAppointment.prototype.SetSubject = function(subject) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the Subject appointment property.
    ///</summary>
    ///<param name = "subject">
    ///A string containing the appointment subject.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetSubject = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the Subject appointment property.
    ///</summary>
    ///<returns>
    ///A string containing the appointment subject.
    ///</returns>
};
ASPxClientAppointment.prototype.SetDescription = function(description) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the Description appointment property.
    ///</summary>
    ///<param name = "description">
    ///A string representing the appointment description.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetDescription = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the Description appointment property.
    ///</summary>
    ///<returns>
    ///A string representing the appointment description.
    ///</returns>
};
ASPxClientAppointment.prototype.SetLocation = function(location) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the Location appointment property.
    ///</summary>
    ///<param name = "location">
    ///A string representing the appointment location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetLocation = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the Location appointment property.
    ///</summary>
    ///<returns>
    ///A string representing the appointment location.
    ///</returns>
};
ASPxClientAppointment.prototype.SetAllDay = function(allDay) {
    ///<summary>
    ///Specifies the property value of the client appointment corresponding to the AllDay appointment property.
    ///</summary>
    ///<param name = "allDay">
    ///true to indicate the all-day appointment; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetAllDay = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the AllDay appointment property.
    ///</summary>
    ///<returns>
    ///true to indicate the all-day appointment; otherwise, false.
    ///</returns>
};
ASPxClientAppointment.prototype.GetRecurrencePattern = function() {
    ///<summary>
    ///Gets the appointment that is the RecurrencePattern for the current appointment.
    ///</summary>
    ///<returns type = "ASPxClientAppointment">
    ///An ASPxClientAppointment instance representing the pattern for the chain of occurrences, to which the current client appointment belongs.
    ///</returns>
};
ASPxClientAppointment.prototype.SetRecurrenceInfo = function(recurrenceInfo) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the RecurrenceInfo appointment property.
    ///</summary>
    ///<param name = "recurrenceInfo">
    ///An ASPxClientRecurrenceInfo object representing the recurrence information.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetRecurrenceInfo = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the RecurrenceInfo appointment property.
    ///</summary>
    ///<returns type = "ASPxClientRecurrenceInfo">
    ///An ASPxClientRecurrenceInfo object representing the recurrence information.
    ///</returns>
};
ASPxClientPoint.prototype.GetX = function() {
    ///<returns type = "Int32">
    ///</returns>
};
ASPxClientPoint.prototype.GetY = function() {
    ///<returns type = "Int32">
    ///</returns>
};
ASPxClientRect.prototype.GetLeft = function() {
    ///<returns type = "Int32">
    ///</returns>
};
ASPxClientRect.prototype.GetRight = function() {
    ///<returns type = "Int32">
    ///</returns>
};
ASPxClientRect.prototype.GetTop = function() {
    ///<returns type = "Int32">
    ///</returns>
};
ASPxClientRect.prototype.GetBottom = function() {
    ///<returns type = "Int32">
    ///</returns>
};
ASPxClientRect.prototype.GetWidth = function() {
    ///<returns type = "Int32">
    ///</returns>
};
ASPxClientRect.prototype.GetHeight = function() {
    ///<returns type = "Int32">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetStart = function(start) {
    ///<summary>
    ///Sets the recurrence start date.
    ///</summary>
    ///<param name = "start">
    ///A DateTime value that specifies the start date for the recurrence.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetStart = function() {
    ///<summary>
    ///Gets the recurrence start date.
    ///</summary>
    ///<returns>
    ///A DateTime value that specifies the start date for the recurrence.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetEnd = function(end) {
    ///<summary>
    ///Sets the recurrence end date.
    ///</summary>
    ///<param name = "end">
    ///A DateTime value that specifies the end date for the recurrence.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetEnd = function() {
    ///<summary>
    ///Gets the recurrence end date.
    ///</summary>
    ///<returns>
    ///A DateTime value that specifies the end date for the recurrence.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetDuration = function(duration) {
    ///<summary>
    ///Sets the duration of the recurrence.
    ///</summary>
    ///<param name = "duration">
    ///A TimeSpan object representing the duration.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetDuration = function() {
    ///<summary>
    ///Gets the duration of the recurrence.
    ///</summary>
    ///<returns>
    ///A TimeSpan object representing the duration.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetRecurrenceType = function(type) {
    ///<summary>
    ///Sets the time base for the frequency of the corresponding appointment occurrences.
    ///</summary>
    ///<param name = "type">
    ///An ASPxClientRecurrenceType enumeration value that specifies the recurrence's frequency type.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetRecurrenceType = function() {
    ///<summary>
    ///Gets the time base for the frequency of the corresponding appointment reoccurrence.
    ///</summary>
    ///<returns type = "ASPxClientRecurrenceType">
    ///An ASPxClientRecurrenceType enumeration value that specifies the recurrence frequency type.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetWeekDays = function(weekDays) {
    ///<summary>
    ///Sets the day/days in a week that the corresponding appointment recurs on.
    ///</summary>
    ///<param name = "weekDays">
    ///The ASPxClientWeekDays enumeration value specifying the day/days in a week.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetWeekDays = function() {
    ///<summary>
    ///Gets the day/days in a week on which the corresponding appointment occurs.
    ///</summary>
    ///<returns type = "ASPxClientWeekDays">
    ///The ASPxClientWeekDays enumeration value specifying the day/days in a week.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetOccurrenceCount = function(occurrenceCount) {
    ///<summary>
    ///Sets how many times the appointment occurs.
    ///</summary>
    ///<param name = "occurrenceCount">
    ///An integer value that specifies how many times the appointment occurs.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetOccurrenceCount = function() {
    ///<summary>
    ///Gets how many times the appointment occurs.
    ///</summary>
    ///<returns>
    ///An integer value that specifies how many times the appointment occurs.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetPeriodicity = function(periodicity) {
    ///<summary>
    ///Sets the frequency with which the corresponding appointment occurs (dependent on the recurrence Type).
    ///</summary>
    ///<param name = "periodicity">
    ///An integer value that specifies the frequency with which the corresponding appointment occurs.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetPeriodicity = function() {
    ///<summary>
    ///Gets the frequency with which the corresponding appointment reoccurs (dependent on the recurrence Type).
    ///</summary>
    ///<returns>
    ///An integer value that specifies the the frequency with which the corresponding appointment reoccurs.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetDayNumber = function(dayNubmer) {
    ///<summary>
    ///Sets the ordinal number of a day within a defined month.
    ///</summary>
    ///<param name = "dayNubmer">
    ///A positive integer value that specifies the day number within a month.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetDayNumber = function() {
    ///<summary>
    ///Gets the ordinal number of a day within a defined month.
    ///</summary>
    ///<returns>
    ///A positive integer value that specifies the day number within a month.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetWeekOfMonth = function(weekOfMonth) {
    ///<summary>
    ///Sets the occurrence number of the week in a month for the recurrence pattern.
    ///</summary>
    ///<param name = "weekOfMonth">
    ///A ASPxClientWeekOfMonth enumeration value that specifies a particular week in every month.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetWeekOfMonth = function() {
    ///<summary>
    ///Gets the occurrence number of the week in a month for the recurrence pattern.
    ///</summary>
    ///<returns type = "ASPxClientWeekOfMonth">
    ///A ASPxClientWeekOfMonth enumeration value that specifies a particular week in every month.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetMonth = function(month) {
    ///<summary>
    ///Sets the month (as a number) on which the corresponding appointment occurs.
    ///</summary>
    ///<param name = "month">
    ///A positive integer value that specifies the month's number.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetMonth = function() {
    ///<summary>
    ///Gets the month (as a number) on which the corresponding appointment recurs.
    ///</summary>
    ///<returns>
    ///A positive integer value that specifies the month's number.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetRange = function() {
    ///<summary>
    ///Gets the type of the recurrence range.
    ///</summary>
    ///<returns type = "ASPxClientRecurrenceRange">
    ///An ASPxClientRecurrenceRange enumeration value that specifies the recurrence range type.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetRange = function(range) {
    ///<summary>
    ///Sets the type of the recurrence range.
    ///</summary>
    ///<param name = "range">
    ///An ASPxClientRecurrenceRangeenumeration value that specifies the recurrence range type.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRange.prototype.NoEndDate= 0;
ASPxClientRecurrenceRange.prototype.OccurrenceCount= 0;
ASPxClientRecurrenceRange.prototype.EndByDate= 0;
ASPxClientRecurrenceType.prototype.Daily= 0;
ASPxClientRecurrenceType.prototype.Weekly= 0;
ASPxClientRecurrenceType.prototype.Monthly= 0;
ASPxClientRecurrenceType.prototype.Yearly= 0;
ASPxClientRecurrenceType.prototype.Hourly= 0;
ASPxClientWeekDays.prototype.Sunday= 0;
ASPxClientWeekDays.prototype.Monday= 0;
ASPxClientWeekDays.prototype.Tuesday= 0;
ASPxClientWeekDays.prototype.Wednesday= 0;
ASPxClientWeekDays.prototype.Thursday= 0;
ASPxClientWeekDays.prototype.Friday= 0;
ASPxClientWeekDays.prototype.Saturday= 0;
ASPxClientWeekDays.prototype.WeekendDays= 0;
ASPxClientWeekDays.prototype.WorkDays= 0;
ASPxClientWeekDays.prototype.EveryDay= 0;
ASPxClientWeekOfMonth.prototype.None= 0;
ASPxClientWeekOfMonth.prototype.First= 0;
ASPxClientWeekOfMonth.prototype.Second= 0;
ASPxClientWeekOfMonth.prototype.Third= 0;
ASPxClientWeekOfMonth.prototype.Fourth= 0;
ASPxClientWeekOfMonth.prototype.Last= 0;
ASPxClientWeekDaysCheckEdit.prototype.name= 0;
ASPxClientWeekDaysCheckEdit.prototype.Init= 0;
ASPxClientWeekDaysCheckEdit.prototype.GetValue = function() {
    ///<returns type = "ASPxClientWeekDays">
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.SetValue = function(value) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.name= 0;
ASPxClientRecurrenceRangeControl.prototype.Init= 0;
ASPxClientRecurrenceRangeControl.prototype.GetRange = function() {
    ///<returns type = "ASPxClientRecurrenceRange">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.GetOccurrenceCount = function() {
    ///<returns type = "Int32">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.GetEndDate = function() {
    ///<returns type = "DateTime">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.SetRange = function(range) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.SetOccurrenceCount = function(occurrenceCount) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.SetEndDate = function(date) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.name= 0;
ASPxClientRecurrenceControlBase.prototype.Init= 0;
ASPxClientRecurrenceControlBase.prototype.GetMainElement = function() {
    ///<returns type = "Object">
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.CreateValueAccessor = function() {
    ///<returns type = "DefaultRecurrenceRuleValuesAccessor">
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.Update = function(recurrenceInfo) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.name= 0;
ASPxClientDailyRecurrenceControl.prototype.Init= 0;
ASPxClientDailyRecurrenceControl.prototype.CreateValueAccessor = function() {
    ///<returns type = "DefaultRecurrenceRuleValuesAccessor">
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.Update = function(recurrenceInfo) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.GetMainElement = function() {
    ///<returns type = "Object">
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.name= 0;
ASPxClientWeeklyRecurrenceControl.prototype.Init= 0;
ASPxClientWeeklyRecurrenceControl.prototype.CreateValueAccessor = function() {
    ///<returns type = "DefaultRecurrenceRuleValuesAccessor">
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.Update = function(recurrenceInfo) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.GetMainElement = function() {
    ///<returns type = "Object">
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.name= 0;
ASPxClientMonthlyRecurrenceControl.prototype.Init= 0;
ASPxClientMonthlyRecurrenceControl.prototype.CreateValueAccessor = function() {
    ///<returns type = "DefaultRecurrenceRuleValuesAccessor">
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.Update = function(recurrenceInfo) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.GetMainElement = function() {
    ///<returns type = "Object">
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.name= 0;
ASPxClientYearlyRecurrenceControl.prototype.Init= 0;
ASPxClientYearlyRecurrenceControl.prototype.CreateValueAccessor = function() {
    ///<returns type = "DefaultRecurrenceRuleValuesAccessor">
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.Update = function(recurrenceInfo) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.GetMainElement = function() {
    ///<returns type = "Object">
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
DefaultRecurrenceRuleValuesAccessor.prototype.GetPeriodicity = function() {
    ///<returns type = "Int32">
    ///</returns>
};
DefaultRecurrenceRuleValuesAccessor.prototype.GetDayNumber = function() {
    ///<returns type = "Int32">
    ///</returns>
};
DefaultRecurrenceRuleValuesAccessor.prototype.GetMonth = function() {
    ///<returns type = "Int32">
    ///</returns>
};
DefaultRecurrenceRuleValuesAccessor.prototype.GetWeekDays = function() {
    ///<returns type = "ASPxClientWeekDays">
    ///</returns>
};
DefaultRecurrenceRuleValuesAccessor.prototype.GetWeekOfMonth = function() {
    ///<returns type = "ASPxClientWeekOfMonth">
    ///</returns>
};
DailyRecurrenceValuesAccessor.prototype.GetPeriodicity = function() {
    ///<returns type = "Int32">
    ///</returns>
};
DailyRecurrenceValuesAccessor.prototype.GetWeekDays = function() {
    ///<returns type = "ASPxClientWeekDays">
    ///</returns>
};
DailyRecurrenceValuesAccessor.prototype.GetDayNumber = function() {
    ///<returns type = "Int32">
    ///</returns>
};
DailyRecurrenceValuesAccessor.prototype.GetMonth = function() {
    ///<returns type = "Int32">
    ///</returns>
};
DailyRecurrenceValuesAccessor.prototype.GetWeekOfMonth = function() {
    ///<returns type = "ASPxClientWeekOfMonth">
    ///</returns>
};
WeeklyRecurrenceValuesAccessor.prototype.GetPeriodicity = function() {
    ///<returns type = "Int32">
    ///</returns>
};
WeeklyRecurrenceValuesAccessor.prototype.GetWeekDays = function() {
    ///<returns type = "ASPxClientWeekDays">
    ///</returns>
};
WeeklyRecurrenceValuesAccessor.prototype.GetDayNumber = function() {
    ///<returns type = "Int32">
    ///</returns>
};
WeeklyRecurrenceValuesAccessor.prototype.GetMonth = function() {
    ///<returns type = "Int32">
    ///</returns>
};
WeeklyRecurrenceValuesAccessor.prototype.GetWeekOfMonth = function() {
    ///<returns type = "ASPxClientWeekOfMonth">
    ///</returns>
};
MonthlyRecurrenceValuesAccessor.prototype.GetDayNumber = function() {
    ///<returns type = "Int32">
    ///</returns>
};
MonthlyRecurrenceValuesAccessor.prototype.GetPeriodicity = function() {
    ///<returns type = "Int32">
    ///</returns>
};
MonthlyRecurrenceValuesAccessor.prototype.GetWeekDays = function() {
    ///<returns type = "ASPxClientWeekDays">
    ///</returns>
};
MonthlyRecurrenceValuesAccessor.prototype.GetWeekOfMonth = function() {
    ///<returns type = "ASPxClientWeekOfMonth">
    ///</returns>
};
MonthlyRecurrenceValuesAccessor.prototype.GetMonth = function() {
    ///<returns type = "Int32">
    ///</returns>
};
YearlyRecurrenceValuesAccessor.prototype.GetDayNumber = function() {
    ///<returns type = "Int32">
    ///</returns>
};
YearlyRecurrenceValuesAccessor.prototype.GetMonth = function() {
    ///<returns type = "Int32">
    ///</returns>
};
YearlyRecurrenceValuesAccessor.prototype.GetWeekDays = function() {
    ///<returns type = "ASPxClientWeekDays">
    ///</returns>
};
YearlyRecurrenceValuesAccessor.prototype.GetWeekOfMonth = function() {
    ///<returns type = "ASPxClientWeekOfMonth">
    ///</returns>
};
YearlyRecurrenceValuesAccessor.prototype.GetPeriodicity = function() {
    ///<returns type = "Int32">
    ///</returns>
};
ASPxClientFormBase.prototype.FormClosed= 0;
ASPxClientFormBase.prototype.Close = function() {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFormBase.prototype.SetVisibleCore = function(element, isVisible) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.name= 0;
ASPxClientRecurrenceTypeEdit.prototype.SelectedIndexChanged= 0;
ASPxClientRecurrenceTypeEdit.prototype.GotFocus= 0;
ASPxClientRecurrenceTypeEdit.prototype.LostFocus= 0;
ASPxClientRecurrenceTypeEdit.prototype.Validation= 0;
ASPxClientRecurrenceTypeEdit.prototype.ValueChanged= 0;
ASPxClientRecurrenceTypeEdit.prototype.Init= 0;
ASPxClientRecurrenceTypeEdit.prototype.GetRecurrenceType = function() {
    ///<returns type = "ASPxClientRecurrenceType">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetRecurrenceType = function(recurrenceType) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns>
    ///An integer value representing the total number of items in the editor's item collection.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the editor's item collection.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the item to search for.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object representing the collection item found.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the list editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the list editor.
    ///</summary>
    ///<returns>
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the list editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
AppointmentPropertyNames.prototype.Normal= 0;
AppointmentPropertyNames.prototype.Pattern= 0;
ASPxClientTimeInterval.prototype.GetStart = function() {
    ///<summary>
    ///Client-side function that returns the start time of the interval.
    ///</summary>
    ///<returns>
    ///A date object, representing the beginning of the interval.
    ///</returns>
};
ASPxClientTimeInterval.prototype.GetDuration = function() {
    ///<summary>
    ///Client-side function that returns the duration of the specified time interval.
    ///</summary>
    ///<returns>
    ///A number of ticks, representing the duration of the time period.
    ///</returns>
};
ASPxClientTimeInterval.prototype.GetEnd = function() {
    ///<summary>
    ///Client-side function that returns the end time of the interval.
    ///</summary>
    ///<returns>
    ///A date object representing the end of the interval.
    ///</returns>
};
ASPxClientTimeInterval.prototype.SetStart = function(value) {
    ///<summary>
    ///Client-side function that sets the start time of the interval.
    ///</summary>
    ///<param name = "value">
    ///A DateTime value, representing the beginning of the interval.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeInterval.prototype.SetDuration = function(value) {
    ///<summary>
    ///Client-side function that returns the duration of the specified time interval.
    ///</summary>
    ///<param name = "value">
    ///A TimeSpan  object, representing the duration of the time period.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeInterval.prototype.SetEnd = function(value) {
    ///<summary>
    ///Client-side function that sets the end time of the interval.
    ///</summary>
    ///<param name = "value">
    ///A DateTime value, representing the end of the interval.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeInterval.prototype.Equals = function(interval) {
    ///<summary>
    ///Determines whether the specified object is equal to the current ASPxClientTimeInterval instance.
    ///</summary>
    ///<param name = "interval">
    ///The object to compare with the current object.
    ///</param>
    ///<returns>
    ///true if the specified object is equal to the current ASPxClientTimeInterval instance; otherwise false.
    ///</returns>
};
ASPxClientTimeInterval.prototype.IntersectsWith = function(interval) {
    ///<summary>
    ///Checks if the current time interval intersects with the specified time interval.
    ///</summary>
    ///<param name = "interval">
    ///A ASPxClientTimeInterval object which represents the time interval to be checked.
    ///</param>
    ///<returns>
    ///true if the two time intervals intersect; otherwise, false.
    ///</returns>
};
ASPxClientTimeInterval.prototype.IntersectsWithExcludingBounds = function(interval) {
    ///<summary>
    ///Checks if the current time interval intersects with the specified time interval. The boundaries of the time intervals are excluded from the check.
    ///</summary>
    ///<param name = "interval">
    ///A ASPxClientTimeInterval object which represents the time interval to be checked.
    ///</param>
    ///<returns>
    ///true if the two time intervals intersect; otherwise, false.
    ///</returns>
};
ASPxClientTimeInterval.prototype.Contains = function(interval) {
    ///<summary>
    ///Client-side function that determines whether the specified interval is contained within the current one.
    ///</summary>
    ///<param name = "interval">
    ///An ASPxClientTimeInterval object, representing the time interval to check.
    ///</param>
    ///<returns>
    ///true if the specified interval is located within the current one; otherwise, false.
    ///</returns>
};
ASPxClientSchedulerRefreshAction.prototype.None= 0;
ASPxClientSchedulerRefreshAction.prototype.VisibleIntervalChanged= 0;
ASPxClientSchedulerRefreshAction.prototype.ActiveViewTypeChanged= 0;
ASPxClientAppointmentOperation.prototype.Apply = function() {
    ///<summary>
    ///Passes parameters to the corresponding callback function to accomplish the operation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointmentOperation.prototype.Cancel = function() {
    ///<summary>
    ///Cancels the operation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.name= 0;
ASPxClientScheduler.prototype.ActiveViewChanging= 0;
ASPxClientScheduler.prototype.ActiveViewChanged= 0;
ASPxClientScheduler.prototype.AppointmentClick= 0;
ASPxClientScheduler.prototype.AppointmentDoubleClick= 0;
ASPxClientScheduler.prototype.AppointmentsSelectionChanged= 0;
ASPxClientScheduler.prototype.SelectionChanged= 0;
ASPxClientScheduler.prototype.SelectionChanging= 0;
ASPxClientScheduler.prototype.VisibleIntervalChanged= 0;
ASPxClientScheduler.prototype.MoreButtonClicked= 0;
ASPxClientScheduler.prototype.MenuItemClicked= 0;
ASPxClientScheduler.prototype.AppointmentDrop= 0;
ASPxClientScheduler.prototype.AppointmentResize= 0;
ASPxClientScheduler.prototype.AppointmentDeleting= 0;
ASPxClientScheduler.prototype.Init= 0;
ASPxClientScheduler.prototype.GetActiveViewType = function() {
    ///<summary>
    ///Client-side scripting  method that gets the active View.
    ///</summary>
    ///<returns type = "ASPxSchedulerViewType">
    ///A SchedulerViewType enumeration value, representing  ASPxScheduler's view.
    ///</returns>
};
ASPxClientScheduler.prototype.SetActiveViewType = function(value) {
    ///<summary>
    ///Client-side scripting  method to change the ASPxScheduler's active View.
    ///</summary>
    ///<param name = "value">
    ///A ASPxSchedulerViewType enumeration value, representing a view type to set.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.Refresh = function() {
    ///<summary>
    ///Client-side scripting method which initiates a round trip to the server so that the current page will be reloaded.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.Refresh = function(refreshAction) {
    ///<summary>
    ///Client-side scripting method which initiates a round trip to the server, so that the control will be reloaded using the specified refresh action.
    ///</summary>
    ///<param name = "refreshAction">
    ///An ASPxClientSchedulerRefreshAction enumeration value, specifying the refresh action.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetGroupType = function() {
    ///<summary>
    ///Client-side function that returns the type of grouping applied to the appointments displayed in the scheduler.
    ///</summary>
    ///<returns type = "ASPxSchedulerGroupType">
    ///A ASPxSchedulerGroupType enumeration value, specifying the grouping type.
    ///</returns>
};
ASPxClientScheduler.prototype.SetGroupType = function(value) {
    ///<summary>
    ///Client-side scripting method which raises the callback command to set the GroupType.
    ///</summary>
    ///<param name = "value">
    ///An ASPxSchedulerGroupType enumeration value, which specifies how appointments are grouped.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GotoToday = function() {
    ///<summary>
    ///Client-side method that navigates the scheduler to the current system date.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GotoDate = function(date) {
    ///<summary>
    ///Client-side scripting method which raises the GotoDate callback command.
    ///</summary>
    ///<param name = "date">
    ///A DateTime value specifying the destination time.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.NavigateBackward = function() {
    ///<summary>
    ///Client-side function which slides the visible interval one time span back.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.NavigateForward = function() {
    ///<summary>
    ///Client-side function which slides the visible interval one time span forward.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ChangeTimeZoneId = function(timeZoneId) {
    ///<summary>
    ///Client-side method which raises the callback command to change the ClientTimeZoneId of the scheduler.
    ///</summary>
    ///<param name = "timeZoneId">
    ///A string, corresponding to the  TimeZoneId enumeration value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ShowSelectionToolTip = function(x, y) {
    ///<summary>
    ///Displays a Selection ToolTip on a position given by the specified coordinates.
    ///</summary>
    ///<param name = "x">
    ///An integer representing the X-coordinate.
    ///</param>
    ///<param name = "y">
    ///An integer representing the Y-coordinate.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetSelectedInterval = function() {
    ///<summary>
    ///Client-side function that returns the time interval, selected in the scheduler.
    ///</summary>
    ///<returns type = "ASPxClientTimeInterval">
    ///An ASPxClientTimeInterval object, representing the time interval.
    ///</returns>
};
ASPxClientScheduler.prototype.GetSelectedResource = function() {
    ///<summary>
    ///Client-side function that returns the ResourceId of selected time cell's resource.
    ///</summary>
    ///<returns>
    ///A string, representing the ID of the resource.
    ///</returns>
};
ASPxClientScheduler.prototype.GetAppointmentById = function(id) {
    ///<summary>
    ///Client-side function that returns an appointment with the specified ID.
    ///</summary>
    ///<param name = "id">
    ///An appointment's identifier.
    ///</param>
    ///<returns type = "ASPxClientAppointment">
    ///An Appointment on the client.
    ///</returns>
};
ASPxClientScheduler.prototype.GetSelectedAppointmentIds = function() {
    ///<summary>
    ///Client-side function that returns the id's of selected appointments.
    ///</summary>
    ///<returns>
    ///A string array which holds the appointment identifiers.
    ///</returns>
};
ASPxClientScheduler.prototype.DeselectAppointmentById = function(aptId) {
    ///<summary>
    ///Client-side function that removes the appointment specified by its client ID from a collection of selected appointments.
    ///</summary>
    ///<param name = "aptId">
    ///An appointment's identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.SelectAppointmentById = function(aptId) {
    ///<summary>
    ///Client-side function that selects an appointment with the specified ID.
    ///</summary>
    ///<param name = "aptId">
    ///An appointment's identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetAppointmentProperties = function(aptId, propertyNames, onCallBack) {
    ///<summary>
    ///Enables obtaining appointment property values in a client-side script. Executes the callback command with the AppointmentData identifier.
    ///</summary>
    ///<param name = "aptId">
    ///An integer, representing the appointment ID.
    ///</param>
    ///<param name = "propertyNames">
    ///An array of strings, representing the appointment properties to query.
    ///</param>
    ///<param name = "onCallBack">
    ///A handler of a function which will receive and process the properties' values.
    ///</param>
    ///<returns>
    ///An array of strings containing string representations of appointment properties.
    ///</returns>
};
ASPxClientScheduler.prototype.RefreshClientAppointmentProperties = function(clientAppointment, propertyNames, onCallBack) {
    ///<summary>
    ///Initiates a callback to retrieve and apply the values for the specified list of properties to the specified appointment, and transfer control to the specified function.
    ///</summary>
    ///<param name = "clientAppointment">
    ///An ASPxClientAppointment object that is the client appointment for which the data is retrieved.
    ///</param>
    ///<param name = "propertyNames">
    ///An array of strings, that are the names of appointment properties to query.
    ///</param>
    ///<param name = "onCallBack">
    ///A handler of a function executed after a callback.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ShowAppointmentFormByClientId = function(aptClientId) {
    ///<summary>
    ///Client-side function that invokes the editing form for the appointment specified by its client ID.
    ///</summary>
    ///<param name = "aptClientId">
    ///A string, representing the appointment client identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ShowAppointmentFormByServerId = function(aptServerId) {
    ///<summary>
    ///Client-side function that invokes the editing form for the appointment specified by its storage identifier.
    ///</summary>
    ///<param name = "aptServerId">
    ///A string, representing the appointment identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.SetTopRowTime = function(duration, viewType) {
    ///<summary>
    ///Sets the time of the day corresponding to the start of the topmost displayed time cell row.
    ///</summary>
    ///<param name = "duration">
    ///An integer, representing the number of milliseconds passed since the start of the day.
    ///</param>
    ///<param name = "viewType">
    ///An ASPxSchedulerViewType enumeration member, representing the scheduler's View. It can be either 'Day' or 'WorkWeek'.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.SetTopRowTime = function(duration) {
    ///<summary>
    ///Sets the time of the day corresponding to the start of the topmost displayed time cell row.
    ///</summary>
    ///<param name = "duration">
    ///An integer, representing the number of milliseconds passed since the start of the day.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetTopRowTime = function(viewType) {
    ///<summary>
    ///Gets the time of the day corresponding to the start of the topmost displayed time cell row.
    ///</summary>
    ///<param name = "viewType">
    ///An ASPxSchedulerViewType enumeration member, representing the scheduler's View. It can be either "Day" or  "WorkWeek", otherwise the result is undefined.
    ///</param>
    ///<returns>
    ///An integer, representing the number of milliseconds passed since the start of the day.
    ///</returns>
};
ASPxClientScheduler.prototype.GetTopRowTime = function() {
    ///<summary>
    ///Gets the time of day corresponding to the start of the topmost displayed time cell row.
    ///</summary>
    ///<returns>
    ///An integer, representing the number of milliseconds passed since the start of the day.
    ///</returns>
};
ASPxClientScheduler.prototype.ShowLoadingPanel = function() {
    ///<summary>
    ///Client-side scripting method which displays the Loading Panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.HideLoadingPanel = function() {
    ///<summary>
    ///Client-side scripting method which hides the Loading Panel from view.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ShowInplaceEditor = function(start, end) {
    ///<summary>
    ///Client-side method that invokes the inplace editor form to create a new appointment.
    ///</summary>
    ///<param name = "start">
    ///A date object, representing the start of the new appointment.
    ///</param>
    ///<param name = "end">
    ///A date object, representing the end of the new appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ShowInplaceEditor = function(start, end, resourceId) {
    ///<summary>
    ///Client-side method that invokes the inplace editor form to create a new appointment.
    ///</summary>
    ///<param name = "start">
    ///A date object, representing the start of the new appointment.
    ///</param>
    ///<param name = "end">
    ///A date object, representing the end of the new appointment.
    ///</param>
    ///<param name = "resourceId">
    ///An object representing the identifier of a resource associated with the new appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.InsertAppointment = function(apt) {
    ///<summary>
    ///Client-side scripting  method to insert the specified appointment.
    ///</summary>
    ///<param name = "apt">
    ///An ASPxClientAppointment object representing the client-side appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.UpdateAppointment = function(apt) {
    ///<summary>
    ///Client-side scripting  method to update the specified appointment.
    ///</summary>
    ///<param name = "apt">
    ///An ASPxClientAppointment object representing the client-side appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.DeleteAppointment = function(apt) {
    ///<summary>
    ///Client-side scripting  method to delete the specified appointment.
    ///</summary>
    ///<param name = "apt">
    ///An ASPxClientAppointment object representing the client-side appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetVisibleIntervals = function() {
    ///<summary>
    ///Client-side method that allows retrieving a collection of time intervals displayed by the ASPxScheduler.
    ///</summary>
    ///<returns type = "ASPxClientTimeInterval[]">
    ///An array of ASPxClientTimeInterval objects, representing visible intervals.
    ///</returns>
};
ASPxClientScheduler.prototype.ChangeToolTipContainer = function(container) {
    ///<summary>
    ///Changes the container that the ASPxScheduler tooltip belongs to.
    ///</summary>
    ///<param name = "container">
    ///An object that serves as the new container for the pop-up menu.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ChangePopupMenuContainer = function(container) {
    ///<summary>
    ///Changes the container that the ASPxScheduler pop-up menu belongs to.
    ///</summary>
    ///<param name = "container">
    ///An object that serves as the new container for the pop-up menu.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ChangeFormContainer = function(container) {
    ///<summary>
    ///Returns focus to the form if the ASPxScheduler control is not visible when the reminder fires.
    ///</summary>
    ///<param name = "container">
    ///A DIV object that is located in such a way that it is visible on the page in situations when the ASPxScheduler control is hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientScheduler.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientScheduler.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientScheduler.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientScheduler.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientScheduler.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxSchedulerViewType.prototype.Day= 0;
ASPxSchedulerViewType.prototype.WorkWeek= 0;
ASPxSchedulerViewType.prototype.Week= 0;
ASPxSchedulerViewType.prototype.Month= 0;
ASPxSchedulerViewType.prototype.Timeline= 0;
ASPxSchedulerGroupType.prototype.None= 0;
ASPxSchedulerGroupType.prototype.Date= 0;
ASPxSchedulerGroupType.prototype.Resource= 0;
ASPxAppointmentType.prototype.Normal= 0;
ASPxAppointmentType.prototype.Pattern= 0;
ASPxAppointmentType.prototype.Occurrence= 0;
ASPxAppointmentType.prototype.ChangedOccurrence= 0;
ASPxAppointmentType.prototype.DeletedOccurrence= 0;
ASPxClientAppointmentDeletingEventHandler.prototype.Invoke = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointmentDeletingEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientAppointmentDeletingEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointmentDeletingEventArgs.prototype.appointmentIds= 0;
ASPxClientAppointmentDeletingEventArgs.prototype.cancel= 0;
AppointmentClickEventHandler.prototype.Invoke = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
AppointmentClickEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
AppointmentClickEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
AppointmentClickEventArgs.prototype.appointmentId= 0;
AppointmentClickEventArgs.prototype.htmlElement= 0;
AppointmentClickEventArgs.prototype.handled= 0;
AppointmentsSelectionEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the AppointmentsSelectionChanged event.
    ///</summary>
    ///<param name = "source">
    ///The ASPxScheduler control which fires the event.
    ///</param>
    ///<param name = "e">
    ///A AppointmentsSelectionEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
AppointmentsSelectionEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
AppointmentsSelectionEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
AppointmentsSelectionEventArgs.prototype.appointmentIds= 0;
ActiveViewChangingEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the ActiveViewChanging event.
    ///</summary>
    ///<param name = "source">
    ///The ASPxClientScheduler control which fires the event.
    ///</param>
    ///<param name = "e">
    ///An ActiveViewChangingEventArgs object that contains event data
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ActiveViewChangingEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ActiveViewChangingEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ActiveViewChangingEventArgs.prototype.oldView= 0;
ActiveViewChangingEventArgs.prototype.newView= 0;
ActiveViewChangingEventArgs.prototype.cancel= 0;
MoreButtonClickedEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle MoreButtonClicked event.
    ///</summary>
    ///<param name = "source">
    ///The ASPxClientScheduler control which fires the event.
    ///</param>
    ///<param name = "e">
    ///A MoreButtonClickedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MoreButtonClickedEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
MoreButtonClickedEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
MoreButtonClickedEventArgs.prototype.targetDateTime= 0;
MoreButtonClickedEventArgs.prototype.interval= 0;
MoreButtonClickedEventArgs.prototype.resource= 0;
MoreButtonClickedEventArgs.prototype.handled= 0;
MoreButtonClickedEventArgs.prototype.processOnServer= 0;
MenuItemClickedEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the MenuItemClicked event.
    ///</summary>
    ///<param name = "source">
    ///The ASPxClientScheduler control which fires the event.
    ///</param>
    ///<param name = "e">
    ///A MenuItemClickedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MenuItemClickedEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
MenuItemClickedEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
MenuItemClickedEventArgs.prototype.itemName= 0;
MenuItemClickedEventArgs.prototype.handled= 0;
AppointmentDropEventHandler.prototype.Invoke = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
AppointmentDropEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
AppointmentDropEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointmentDragEventArgs.prototype.handled= 0;
ASPxClientAppointmentDragEventArgs.prototype.operation= 0;
AppointmentResizeEventHandler.prototype.Invoke = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
AppointmentResizeEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
AppointmentResizeEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointmentResizeEventArgs.prototype.handled= 0;
ASPxClientAppointmentResizeEventArgs.prototype.operation= 0;
ASPxClientSpellChecker.prototype.name= 0;
ASPxClientSpellChecker.prototype.BeforeCheck= 0;
ASPxClientSpellChecker.prototype.CheckCompleteFormShowing= 0;
ASPxClientSpellChecker.prototype.AfterCheck= 0;
ASPxClientSpellChecker.prototype.WordChanged= 0;
ASPxClientSpellChecker.prototype.Init= 0;
ASPxClientSpellChecker.prototype.Check = function() {
    ///<summary>
    ///Starts the spelling check of the text contained within the element specified by the CheckedElementID value.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.CheckElement = function(element) {
    ///<summary>
    ///Starts checking contents of the specified element.
    ///</summary>
    ///<param name = "element">
    ///An object representing the element being checked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.CheckElementById = function(id) {
    ///<summary>
    ///Starts checking contents of the specified element.
    ///</summary>
    ///<param name = "id">
    ///A string representing the identifier of the element being checked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.CheckElementsInContainer = function(containerElement) {
    ///<summary>
    ///Starts checking the contents of controls in the specified container.
    ///</summary>
    ///<param name = "containerElement">
    ///An object representing a control which contains elements being checked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.CheckElementsInContainerById = function(containerId) {
    ///<summary>
    ///Starts checking the contents of controls in the specified container.
    ///</summary>
    ///<param name = "containerId">
    ///A string, specifying the control's identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientSpellChecker.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientSpellChecker.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientSpellChecker.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientSpellChecker.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientSpellChecker.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientBeforeCheckEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the BeforeCheck event.
    ///</summary>
    ///<param name = "source">
    ///The ASPxClientSpellChecker control which fires the event.
    ///</param>
    ///<param name = "e">
    ///A ASPxClientSpellCheckerBeforeCheckEventArgs object that contains event data
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBeforeCheckEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientBeforeCheckEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellCheckerBeforeCheckEventArgs.prototype.controlId= 0;
ASPxClientSpellCheckerBeforeCheckEventArgs.prototype.cancel= 0;
ASPxClientAfterCheckEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the AfterCheck event.
    ///</summary>
    ///<param name = "source">
    ///The ASPxClientSpellChecker control which fires the event.
    ///</param>
    ///<param name = "e">
    ///A ASPxClientSpellCheckerAfterCheckEventArgs object that contains event data
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAfterCheckEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientAfterCheckEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellCheckerAfterCheckEventArgs.prototype.controlId= 0;
ASPxClientSpellCheckerAfterCheckEventArgs.prototype.checkedText= 0;
ASPxClientWordChangedEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the AfterCheck event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientSpellCheckerAfterCheckEventArgs object which contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWordChangedEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientWordChangedEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.name= 0;
ASPxClientTreeList.prototype.BeginCallback= 0;
ASPxClientTreeList.prototype.EndCallback= 0;
ASPxClientTreeList.prototype.CallbackError= 0;
ASPxClientTreeList.prototype.ContextMenu= 0;
ASPxClientTreeList.prototype.CustomButtonClick= 0;
ASPxClientTreeList.prototype.NodeFocusing= 0;
ASPxClientTreeList.prototype.FocusedNodeChanged= 0;
ASPxClientTreeList.prototype.SelectionChanged= 0;
ASPxClientTreeList.prototype.CustomizationWindowCloseUp= 0;
ASPxClientTreeList.prototype.CustomDataCallback= 0;
ASPxClientTreeList.prototype.NodeClick= 0;
ASPxClientTreeList.prototype.NodeDblClick= 0;
ASPxClientTreeList.prototype.NodeExpanding= 0;
ASPxClientTreeList.prototype.NodeCollapsing= 0;
ASPxClientTreeList.prototype.StartDragNode= 0;
ASPxClientTreeList.prototype.EndDragNode= 0;
ASPxClientTreeList.prototype.Init= 0;
ASPxClientTreeList.prototype.StartEditNewNode = function(parentNodeKey) {
    ///<summary>
    ///Switches the ASPxTreeList to edit mode and allows new node values to be edited.
    ///</summary>
    ///<param name = "parentNodeKey">
    ///A String value that identifies the parent node, which owns a new node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetEditor = function(column) {
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
    ///</param>
    ///<returns>
    ///An object that represents the specified column's editor.
    ///</returns>
};
ASPxClientTreeList.prototype.GetEditor = function(columnIndex) {
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that identifies the column by its position within the column collection.
    ///</param>
    ///<returns>
    ///An object that represents the specified column's editor.
    ///</returns>
};
ASPxClientTreeList.prototype.GetEditor = function(columnNameOrFieldName) {
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnNameOrFieldName">
    ///A String value that identifies the column by its name or field name.
    ///</param>
    ///<returns>
    ///An object that represents the specified column's editor.
    ///</returns>
};
ASPxClientTreeList.prototype.GetEditValue = function(column) {
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
    ///</param>
    ///<returns>
    ///A String value that represents the value of the edit cell, which corresponds to the specified data column.
    ///</returns>
};
ASPxClientTreeList.prototype.GetEditValue = function(columnIndex) {
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that identifies the data column by its index within the ASPxTreeList's column collection.
    ///</param>
    ///<returns>
    ///A String value that represents the value of the edit cell, which corresponds to the specified data column.
    ///</returns>
};
ASPxClientTreeList.prototype.GetEditValue = function(columnNameOrFieldName) {
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnNameOrFieldName">
    ///A String value that identifies the column by its name or field name.
    ///</param>
    ///<returns>
    ///A String value that represents the value of the edit cell, which corresponds to the specified data column.
    ///</returns>
};
ASPxClientTreeList.prototype.SetEditValue = function(column, value) {
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
    ///</param>
    ///<param name = "value">
    ///An object that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.SetEditValue = function(columnIndex, value) {
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that identifies the data column by its index within the ASPxTreeList's column collection.
    ///</param>
    ///<param name = "value">
    ///An object that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.SetEditValue = function(columnNameOrFieldName, value) {
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnNameOrFieldName">
    ///A String value that identifies the column by its name or field name.
    ///</param>
    ///<param name = "value">
    ///An object that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.FocusEditor = function(column) {
    ///<summary>
    ///Moves focus to the specified editor within the edited node.
    ///</summary>
    ///<param name = "column">
    ///A ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.FocusEditor = function(columnIndex) {
    ///<summary>
    ///Moves focus to the specified editor within the edited node.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that identifies the data column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.FocusEditor = function(columnNameOrFieldName) {
    ///<summary>
    ///Moves focus to the specified editor within the edited node.
    ///</summary>
    ///<param name = "columnNameOrFieldName">
    ///A String value that specifies the column's name or field name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetFocusedNodeKey = function() {
    ///<summary>
    ///Returns the focused node's key value.
    ///</summary>
    ///<returns>
    ///A String value that uniquely identifies the node.
    ///</returns>
};
ASPxClientTreeList.prototype.SetFocusedNodeKey = function(key) {
    ///<summary>
    ///Moves focus to the specified node.
    ///</summary>
    ///<param name = "key">
    ///A String value that uniquely identifies the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.IsNodeSelected = function(nodeKey) {
    ///<summary>
    ///Indicates whether the specified node is selected.
    ///</summary>
    ///<param name = "nodeKey">
    ///A String value that identifies the node by its key value.
    ///</param>
    ///<returns>
    ///true if the specified node is selected; false if the specified node isn't selected; null if the specified node was not found on the client.
    ///</returns>
};
ASPxClientTreeList.prototype.SelectNode = function(nodeKey) {
    ///<summary>
    ///Selects the specified node.
    ///</summary>
    ///<param name = "nodeKey">
    ///A string value that identifies the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.SelectNode = function(nodeKey, state) {
    ///<summary>
    ///Selects or deselects the specified node.
    ///</summary>
    ///<param name = "nodeKey">
    ///A string value that identifies the node.
    ///</param>
    ///<param name = "state">
    ///true to select the node; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetVisibleSelectedNodeKeys = function() {
    ///<summary>
    ///Obtains key values of selected nodes that are displayed within the current page.
    ///</summary>
    ///<returns>
    ///The list of key values of selected nodes that are displayed within the current page.
    ///</returns>
};
ASPxClientTreeList.prototype.IsCustomizationWindowVisible = function() {
    ///<summary>
    ///Indicates whether the Customization Window is displayed.
    ///</summary>
    ///<returns>
    ///true if the customization window is displayed; otherwise, false.
    ///</returns>
};
ASPxClientTreeList.prototype.ShowCustomizationWindow = function() {
    ///<summary>
    ///Invokes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.ShowCustomizationWindow = function(htmlElement) {
    ///<summary>
    ///Invokes the Customization Window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement">
    ///An object that specifies the HTML element relative to whose position the customization window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.HideCustomizationWindow = function() {
    ///<summary>
    ///Closes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.PerformCustomCallback = function(arg) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "arg">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.PerformCallback = function(args) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.PerformCustomDataCallback = function(arg) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
    ///</summary>
    ///<param name = "arg">
    ///A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetNodeValues = function(nodeKey, fieldNames, onCallback) {
    ///<summary>
    ///Obtains specified data source field values within a specified node, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "nodeKey">
    ///A string value that identifies the node.
    ///</param>
    ///<param name = "fieldNames">
    ///A string value that contains the names of data source fields whose values within the specified node are returned. The field names should be separated by ';'.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetNodeValues = function(nodeKey, fieldNames, onCallback) {
    ///<summary>
    ///Obtains specified data source field values within a specified node, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "nodeKey">
    ///A string value that identifies the node.
    ///</param>
    ///<param name = "fieldNames">
    ///The names of data source fields whose values within the specified node are returned.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetVisibleNodeValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Obtains specified data source field values within nodes that are displayed within the current page, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames">
    ///A string value that contains the names of data source fields whose values within visible nodes are returned. The field names should be separated by ';'.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetVisibleNodeValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Obtains specified data source field values within nodes that are displayed within the current page, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames">
    ///The names of data source fields whose values within visible nodes are returned.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetSelectedNodeValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames">
    ///A string value that contains the names of data source fields whose values within selected nodes are returned. The field names should be separated by ';'.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetSelectedNodeValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames">
    ///The names of data source fields whose values within selected nodes are returned.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetSelectedNodeValues = function(fieldNames, onCallback, visibleOnly) {
    ///<summary>
    ///Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames">
    ///A string value that contains the names of data source fields whose values within selected nodes are returned. The field names should be separated by ';'.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<param name = "visibleOnly">
    ///true to return values within selected nodes that are displayed within the current page; false to return values within all selected nodes.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetSelectedNodeValues = function(fieldNames, onCallback, visibleOnly) {
    ///<summary>
    ///Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames">
    ///The names of data source fields whose values within selected nodes are returned.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<param name = "visibleOnly">
    ///true to return values within selected nodes that are displayed within the current page; false to return values within all selected nodes.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GoToPage = function(index) {
    ///<summary>
    ///Selects the specified page.
    ///</summary>
    ///<param name = "index">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetNodeState = function(nodeKey) {
    ///<summary>
    ///Returns the specified node's state.
    ///</summary>
    ///<param name = "nodeKey">
    ///A String value that identifies the node.
    ///</param>
    ///<returns>
    ///A String value that represents the specified node's state.
    ///</returns>
};
ASPxClientTreeList.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all Node.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all Node.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.ExpandNode = function(key) {
    ///<summary>
    ///Expands the specified node preserving the collapsed state of child nodes.
    ///</summary>
    ///<param name = "key">
    ///A String value that uniquely identifies the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.CollapseNode = function(key) {
    ///<summary>
    ///Collapses the specified node preserving the expanded state of child nodes.
    ///</summary>
    ///<param name = "key">
    ///A String value that uniquely identifies the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetVisibleNodeKeys = function() {
    ///<summary>
    ///Obtains key values of nodes that are displayed within the current page.
    ///</summary>
    ///<returns>
    ///The list of key values of nodes that are displayed within the current page.
    ///</returns>
};
ASPxClientTreeList.prototype.GetNodeHtmlElement = function(nodeKey) {
    ///<summary>
    ///Returns an HTML table row that represents the specified node.
    ///</summary>
    ///<param name = "nodeKey">
    ///A string value that identifies the node.
    ///</param>
    ///<returns>
    ///An object that represents the HTML table row, which corresponds to the specified node.
    ///</returns>
};
ASPxClientTreeList.prototype.GetVisibleColumnCount = function() {
    ///<summary>
    ///Returns the number of visible columns within the client ASPxTreeList.
    ///</summary>
    ///<returns>
    ///An integer value that specifies the number of visible columns within the client ASPxTreeList.
    ///</returns>
};
ASPxClientTreeList.prototype.GetColumnCount = function() {
    ///<summary>
    ///Returns the number of columns within the client ASPxTreeList.
    ///</summary>
    ///<returns>
    ///An integer value that specifies the number of columns within the client ASPxTreeList.
    ///</returns>
};
ASPxClientTreeList.prototype.GetColumnByIndex = function(index) {
    ///<summary>
    ///Returns the column located at the specified position within the Columns collection.
    ///</summary>
    ///<param name = "index">
    ///An integer value that identifies the column within the collection.
    ///</param>
    ///<returns type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the client column located at the specified position within the collection.
    ///</returns>
};
ASPxClientTreeList.prototype.GetColumnByName = function(name) {
    ///<summary>
    ///Returns the column with the specified name.
    ///</summary>
    ///<param name = "name">
    ///A String value that specifies the column's name.
    ///</param>
    ///<returns type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the column with the specified name.
    ///</returns>
};
ASPxClientTreeList.prototype.GetColumnByFieldName = function(fieldName) {
    ///<summary>
    ///Returns the client column which is bound to the specified data source field.
    ///</summary>
    ///<param name = "fieldName">
    ///A String value that specifies the name of the data source field to which the column is bound.
    ///</param>
    ///<returns type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the client column bound to the specified data source field.
    ///</returns>
};
ASPxClientTreeList.prototype.SortBy = function(columnIndex) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.SortBy = function(columnIndex, sortOrder) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.SortBy = function(columnIndex, sortOrder, reset) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<param name = "reset">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.SortBy = function(nameOrFieldName) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "nameOrFieldName">
    ///A String value that specifies the column's name or field name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.SortBy = function(nameOrFieldName, sortOrder) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "nameOrFieldName">
    ///A String value that specifies the column's name or field name.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.SortBy = function(nameOrFieldName, sortOrder, reset) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "nameOrFieldName">
    ///A String value that specifies the column's name or field name.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<param name = "reset">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.SortBy = function(column) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientTreeListColumn object that represents the data column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.SortBy = function(column, sortOrder) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientTreeListColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.SortBy = function(column, sortOrder, reset) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientTreeListColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<param name = "reset">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.StartEdit = function(nodeKey) {
    ///<summary>
    ///Switches the ASPxTreeList to edit mode.
    ///</summary>
    ///<param name = "nodeKey">
    ///A string value that identifies the node by its key value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.UpdateEdit = function() {
    ///<summary>
    ///Saves all the changes made and switches the ASPxTreeList to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.CancelEdit = function() {
    ///<summary>
    ///Cancels all the changes made and switches the ASPxTreeList to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.IsEditing = function() {
    ///<summary>
    ///Indicates whether the ASPxTreeList is in edit mode.
    ///</summary>
    ///<returns>
    ///true if the ASPxTreeList is in edit mode; otherwise, false.
    ///</returns>
};
ASPxClientTreeList.prototype.GetEditingNodeKey = function() {
    ///<summary>
    ///Gets the key value of the node currently being edited.
    ///</summary>
    ///<returns>
    ///A string value that identifies the node currently being edited.
    ///</returns>
};
ASPxClientTreeList.prototype.MoveNode = function(nodeKey, parentNodeKey) {
    ///<summary>
    ///Moves the specified node to a new position.
    ///</summary>
    ///<param name = "nodeKey">
    ///A string value that identifies the target node by its key value.
    ///</param>
    ///<param name = "parentNodeKey">
    ///A string value that identifies the node to whose child collection the target node is moved. An empty string to display the target node within the root.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.DeleteNode = function(nodeKey) {
    ///<summary>
    ///Deletes the specified node.
    ///</summary>
    ///<param name = "nodeKey">
    ///A string value that identifies the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.StartEditNewNode = function() {
    ///<summary>
    ///Switches the ASPxTreeList to edit mode and allows new root node values to be edited.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTreeList.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTreeList.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTreeList.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTreeList.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTreeList.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTreeListColumn.prototype.index= 0;
ASPxClientTreeListColumn.prototype.name= 0;
ASPxClientTreeListColumn.prototype.fieldName= 0;
ASPxClientTreeListCustomDataCallbackEventArgs.prototype.arg= 0;
ASPxClientTreeListCustomDataCallbackEventArgs.prototype.result= 0;
ASPxClientTreeListCustomDataCallbackEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomDataCallback event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientTreeListCustomDataCallbackEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListCustomDataCallbackEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientTreeListCustomDataCallbackEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListNodeEventArgs.prototype.nodeKey= 0;
ASPxClientTreeListNodeEventArgs.prototype.htmlEvent= 0;
ASPxClientTreeListNodeEventArgs.prototype.cancel= 0;
ASPxClientTreeListNodeEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the NodeDblClick event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientTreeListNodeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListNodeEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientTreeListNodeEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListContextMenuEventArgs.prototype.objectType= 0;
ASPxClientTreeListContextMenuEventArgs.prototype.objectKey= 0;
ASPxClientTreeListContextMenuEventArgs.prototype.htmlEvent= 0;
ASPxClientTreeListContextMenuEventArgs.prototype.cancel= 0;
ASPxClientTreeListContextMenuEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the ContextMenu event.
    ///</summary>
    ///<param name = "source">
    ///The event sender.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientTreeListContextMenuEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListContextMenuEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientTreeListContextMenuEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListStartDragNodeEventArgs.prototype.targets= 0;
ASPxClientTreeListStartDragNodeEventArgs.prototype.nodeKey= 0;
ASPxClientTreeListStartDragNodeEventArgs.prototype.htmlEvent= 0;
ASPxClientTreeListStartDragNodeEventArgs.prototype.cancel= 0;
ASPxClientTreeListStartDragNodeEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the StartDragNode event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientTreeListStartDragNodeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListStartDragNodeEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientTreeListStartDragNodeEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListEndDragNodeEventArgs.prototype.targetElement= 0;
ASPxClientTreeListEndDragNodeEventArgs.prototype.nodeKey= 0;
ASPxClientTreeListEndDragNodeEventArgs.prototype.htmlEvent= 0;
ASPxClientTreeListEndDragNodeEventArgs.prototype.cancel= 0;
ASPxClientTreeListEndDragNodeEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the EndDragNode event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientTreeListEndDragNodeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListEndDragNodeEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientTreeListEndDragNodeEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListCustomButtonEventArgs.prototype.nodeKey= 0;
ASPxClientTreeListCustomButtonEventArgs.prototype.buttonIndex= 0;
ASPxClientTreeListCustomButtonEventArgs.prototype.buttonID= 0;
ASPxClientTreeListCustomButtonEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomButtonClick event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientTreeListCustomButtonEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListCustomButtonEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientTreeListCustomButtonEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListValuesCallback.prototype.Invoke = function(result) {
    ///<summary>
    ///A JavaScript function which receives the list of row values when a specific client method (such as the GetSelectedNodeValues) is called.
    ///</summary>
    ///<param name = "result">
    ///An object that represents the list of row values received from the server.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListValuesCallback.prototype.BeginInvoke = function(result, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientTreeListValuesCallback.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.name= 0;
MVCxClientCallbackPanel.prototype.BeginCallback= 0;
MVCxClientCallbackPanel.prototype.EndCallback= 0;
MVCxClientCallbackPanel.prototype.CallbackError= 0;
MVCxClientCallbackPanel.prototype.Init= 0;
MVCxClientCallbackPanel.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.GetLoadingPanelText = function() {
    ///<summary>
    ///Returns the text displayed within the control's loading panel.
    ///</summary>
    ///<returns>
    ///A string value representing the text displayed within the button.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.SetLoadingPanelText = function(loadingPanelText) {
    ///<summary>
    ///Sets the text to be displayed within the control's loading panel.
    ///</summary>
    ///<param name = "loadingPanelText">
    ///A string value specifying the text to be displayed within the loading panel.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that represents the contents of the panel.
    ///</summary>
    ///<returns>
    ///A string that represents the panel's HTML content.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Specifies the HTML markup that represents the panel's content.
    ///</summary>
    ///<param name = "html">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Sets a value specifying whether the callback panel is enabled.
    ///</summary>
    ///<param name = "enabled">
    ///true to make the callback panel enabled; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a callback panel is enabled.
    ///</summary>
    ///<returns>
    ///true if the callback panel is enabled; otherwise, false.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientChart.prototype.name= 0;
MVCxClientChart.prototype.BeginCallback= 0;
MVCxClientChart.prototype.EndCallback= 0;
MVCxClientChart.prototype.CallbackError= 0;
MVCxClientChart.prototype.ObjectHotTracked= 0;
MVCxClientChart.prototype.ObjectSelected= 0;
MVCxClientChart.prototype.Init= 0;
MVCxClientChart.prototype.GetChart = function() {
    ///<summary>
    ///Returns an ASPxClientWebChart object, which contains information about the hierarchy of a chart control, and provides access to the main properties of chart elements  on the client side.
    ///</summary>
    ///<returns type = "ASPxClientWebChart">
    ///An ASPxClientWebChart object containing information about a chart on the client side.
    ///</returns>
};
MVCxClientChart.prototype.SetCursor = function(cursor) {
    ///<summary>
    ///Changes the mouse pointer, which is shown when the mouse is over the chart control, to the pointer with the specified name.
    ///</summary>
    ///<param name = "cursor">
    ///A string value representing the name of the desired cursor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.HitTest = function(x, y) {
    ///<summary>
    ///Returns the specific chart element which is located under the test point.
    ///</summary>
    ///<param name = "x">
    ///An integer value that specifies the x coordinate of the test point.
    ///</param>
    ///<param name = "y">
    ///An integer value that specifies the y coordinate of the test point.
    ///</param>
    ///<returns type = "ASPxClientHitObject[]">
    ///An array collection of ASPxClientHitObject objects, that represent the chart elements located under the test point.
    ///</returns>
};
MVCxClientChart.prototype.PerformCallback = function(args) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.Print = function() {
    ///<summary>
    ///Prints the current chart on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.SaveToDisk = function(format) {
    ///<summary>
    ///Exports a chart to the file of the specified format, and saves it to the disk.
    ///</summary>
    ///<param name = "format">
    ///A string value specifying the format, to which a chart should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.SaveToDisk = function(format, filename) {
    ///<summary>
    ///Exports a chart to a file in the specified format, and saves it to disk, using the specified file name.
    ///</summary>
    ///<param name = "format">
    ///A string value specifying the format, to which a chart should be exported.
    ///</param>
    ///<param name = "filename">
    ///A string value specifying the file name, to which a chart should be exported. If this parameter is missing or set to an empty string, then the created file will be named using the client-side name of a chart.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.SaveToWindow = function(format) {
    ///<summary>
    ///Exports a report to the file of the specified format, and shows it in a new Web Browser window.
    ///</summary>
    ///<param name = "format">
    ///A string  value specifying a format in which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.GetMainDOMElement = function() {
    ///<summary>
    ///Gets the main DOM (Document Object Model) element on a Web Page representing this ASPxClientWebChartControl object.
    ///</summary>
    ///<returns>
    ///An object which represents the main DOM element.
    ///</returns>
};
MVCxClientChart.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientChart.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientChart.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientChart.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientChart.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientChart.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientComboBox.prototype.name= 0;
MVCxClientComboBox.prototype.BeginCallback= 0;
MVCxClientComboBox.prototype.EndCallback= 0;
MVCxClientComboBox.prototype.CallbackError= 0;
MVCxClientComboBox.prototype.SelectedIndexChanged= 0;
MVCxClientComboBox.prototype.DropDown= 0;
MVCxClientComboBox.prototype.CloseUp= 0;
MVCxClientComboBox.prototype.ButtonClick= 0;
MVCxClientComboBox.prototype.KeyDown= 0;
MVCxClientComboBox.prototype.KeyPress= 0;
MVCxClientComboBox.prototype.KeyUp= 0;
MVCxClientComboBox.prototype.TextChanged= 0;
MVCxClientComboBox.prototype.GotFocus= 0;
MVCxClientComboBox.prototype.LostFocus= 0;
MVCxClientComboBox.prototype.Validation= 0;
MVCxClientComboBox.prototype.ValueChanged= 0;
MVCxClientComboBox.prototype.Init= 0;
MVCxClientComboBox.prototype.SetText = function(text) {
    ///<summary>
    ///Specifies the text displayed within the editor's edit box.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the editor's text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.AddItem = function(text) {
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text and returns the index of the added item.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns>
    ///An integer value that represents the added item's index.
    ///</returns>
};
MVCxClientComboBox.prototype.AddItem = function(text, value) {
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text and associated value, and returns the index of the added item.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns>
    ///An integer value that represents the added item's index.
    ///</returns>
};
MVCxClientComboBox.prototype.AddItem = function(text, value, imageUrl) {
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns>
    ///An integer value that represents the added item's index.
    ///</returns>
};
MVCxClientComboBox.prototype.InsertItem = function(index, text, value, imageUrl) {
    ///<summary>
    ///Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.InsertItem = function(index, text, value) {
    ///<summary>
    ///Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.InsertItem = function(index, text) {
    ///<summary>
    ///Inserts a new item specified by its display text into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.RemoveItem = function(index) {
    ///<summary>
    ///Removes an item specified by its index from the client list editor.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the index of the list item to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.ClearItems = function() {
    ///<summary>
    ///Removes all items from the client combo box editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.BeginUpdate = function() {
    ///<summary>
    ///Prevents the client combobox editor from being rendered until the EndUpdate method is called.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.EndUpdate = function() {
    ///<summary>
    ///Re-enables editor render operations after a call to the BeginUpdate method and forces an immediate re-rendering.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.MakeItemVisible = function(index) {
    ///<summary>
    ///Scrolls the editor's item list, so that the specified item becomes visible.
    ///</summary>
    ///<param name = "index">
    ///An integer value that specifies the item's index within the editor's client item list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the combo box editor's item collection.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the item to search for.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object representing the collection item found.
    ///</returns>
};
MVCxClientComboBox.prototype.FindItemByText = function(text) {
    ///<summary>
    ///Returns a combo box item by its text.
    ///</summary>
    ///<param name = "text">
    ///A string that specifies the item's text.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
MVCxClientComboBox.prototype.FindItemByValue = function(value) {
    ///<summary>
    ///Returns a combo box item by its value.
    ///</summary>
    ///<param name = "value">
    ///An object that specifies the item's value.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
MVCxClientComboBox.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns>
    ///An integer value representing the total number of items in the editor's item collection.
    ///</returns>
};
MVCxClientComboBox.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the combo box editor.
    ///</summary>
    ///<returns>
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
MVCxClientComboBox.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the combobox editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the combo box editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
MVCxClientComboBox.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetText = function() {
    ///<summary>
    ///Gets the text displayed in the editor's edit box.
    ///</summary>
    ///<returns>
    ///A string value representing the text within the editor.
    ///</returns>
};
MVCxClientComboBox.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.AddItem = function(texts) {
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns>
    ///An integer value representing the position at which a new item was added.
    ///</returns>
};
MVCxClientComboBox.prototype.AddItem = function(texts, value) {
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns>
    ///An integer value representing the position at which a new item was added.
    ///</returns>
};
MVCxClientComboBox.prototype.AddItem = function(texts, value, imageUrl) {
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns>
    ///An integer value representing the position at which a new item was added.
    ///</returns>
};
MVCxClientComboBox.prototype.InsertItem = function(index, texts, value, imageUrl) {
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.InsertItem = function(index, texts, value) {
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.InsertItem = function(index, texts) {
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns>
    ///A string value representing the editor's display text.
    ///</returns>
};
MVCxClientComboBox.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
MVCxClientComboBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
MVCxClientComboBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
MVCxClientComboBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
MVCxClientComboBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
MVCxClientComboBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientComboBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientComboBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientComboBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientComboBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientComboBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.name= 0;
MVCxClientGridView.prototype.BeginCallback= 0;
MVCxClientGridView.prototype.SelectionChanged= 0;
MVCxClientGridView.prototype.FocusedRowChanged= 0;
MVCxClientGridView.prototype.ColumnSorting= 0;
MVCxClientGridView.prototype.ColumnGrouping= 0;
MVCxClientGridView.prototype.ColumnMoving= 0;
MVCxClientGridView.prototype.ColumnStartDragging= 0;
MVCxClientGridView.prototype.ColumnResizing= 0;
MVCxClientGridView.prototype.ColumnResized= 0;
MVCxClientGridView.prototype.RowExpanding= 0;
MVCxClientGridView.prototype.RowCollapsing= 0;
MVCxClientGridView.prototype.DetailRowExpanding= 0;
MVCxClientGridView.prototype.DetailRowCollapsing= 0;
MVCxClientGridView.prototype.RowClick= 0;
MVCxClientGridView.prototype.RowDblClick= 0;
MVCxClientGridView.prototype.ContextMenu= 0;
MVCxClientGridView.prototype.CustomizationWindowCloseUp= 0;
MVCxClientGridView.prototype.CustomButtonClick= 0;
MVCxClientGridView.prototype.EndCallback= 0;
MVCxClientGridView.prototype.CallbackError= 0;
MVCxClientGridView.prototype.Init= 0;
MVCxClientGridView.prototype.SetEditValue = function(columnIndex, value) {
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that identifies the data column within the ASPxGridView's column collection.
    ///</param>
    ///<param name = "value">
    ///A String value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SetEditValue = function(columnFieldNameOrId, value) {
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<param name = "value">
    ///A String value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ShowFilterControl = function() {
    ///<summary>
    ///Displays the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.CloseFilterControl = function() {
    ///<summary>
    ///Hides the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SetFilterEnabled = function(isFilterEnabled) {
    ///<summary>
    ///Enables or disables the current filter.
    ///</summary>
    ///<param name = "isFilterEnabled">
    ///true to enable the current filter; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetVertScrollPos = function() {
    ///<summary>
    ///Returns the current vertical scroll position of the grid's content.
    ///</summary>
    ///<returns>
    ///An integer value representing the vertical scroll position.
    ///</returns>
};
MVCxClientGridView.prototype.GetHorzScrollPos = function() {
    ///<summary>
    ///Returns the current horizontal scroll position of the grid's content.
    ///</summary>
    ///<returns>
    ///An integer value representing the horizontal scroll position.
    ///</returns>
};
MVCxClientGridView.prototype.SetVertScrollPos = function(position) {
    ///<summary>
    ///Specifies the vertical scroll position for the grid's content.
    ///</summary>
    ///<param name = "position">
    ///An integer value specifying the vertical scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SetHorzScrollPos = function(position) {
    ///<summary>
    ///Specifies the horizontal scroll position for the grid's content.
    ///</summary>
    ///<param name = "position">
    ///An integer value specifying the horizontal scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GroupBy = function(column, groupIndex) {
    ///<summary>
    ///Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
    ///</param>
    ///<param name = "groupIndex">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GroupBy = function(columnIndex, groupIndex) {
    ///<summary>
    ///Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "groupIndex">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GroupBy = function(columnFieldNameOrId, groupIndex) {
    ///<summary>
    ///Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<param name = "groupIndex">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GroupBy = function(column, groupIndex, sortOrder) {
    ///<summary>
    ///Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
    ///</param>
    ///<param name = "groupIndex">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GroupBy = function(columnIndex, groupIndex, sortOrder) {
    ///<summary>
    ///Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "groupIndex">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GroupBy = function(columnFieldNameOrId, groupIndex, sortOrder) {
    ///<summary>
    ///Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<param name = "groupIndex">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SortBy = function(column) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SortBy = function(columnIndex) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SortBy = function(columnFieldNameOrId) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SortBy = function(column, sortOrder) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SortBy = function(columnIndex, sortOrder) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SortBy = function(columnFieldNameOrId, sortOrder) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SortBy = function(column, sortOrder, reset) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SortBy = function(columnIndex, sortOrder, reset) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SortBy = function(columnFieldNameOrId, sortOrder, reset) {
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SortBy = function(column, sortOrder, reset, sortIndex) {
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SortBy = function(columnIndex, sortOrder, reset, sortIndex) {
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SortBy = function(columnFieldNameOrId, sortOrder, reset, sortIndex) {
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<param name = "sortOrder">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MoveColumn = function(column) {
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the column to hide.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MoveColumn = function(columnIndex) {
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the absolute index of the column to hide.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MoveColumn = function(columnFieldNameOrId) {
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that identifies the column to be hidden by the name of the data source field to which the column is bound, or by the column's name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MoveColumn = function(column, moveToColumnVisibleIndex) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that specifies the column's position among the visible columns within the ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MoveColumn = function(columnIndex, moveToColumnVisibleIndex) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that specifies the column's position among the visible columns within the ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MoveColumn = function(columnFieldNameOrId, moveToColumnVisibleIndex) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that specifies the column's position among the visible columns within the ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MoveColumn = function(column, moveToColumnVisibleIndex, moveBefore) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MoveColumn = function(columnIndex, moveToColumnVisibleIndex, moveBefore) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MoveColumn = function(columnFieldNameOrId, moveToColumnVisibleIndex, moveBefore) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MoveColumn = function(column, moveToColumnVisibleIndex, moveBefore, moveToGroup) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView and optionally groups the ASPxGridView's data by this column.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup">
    ///true to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MoveColumn = function(columnIndex, moveToColumnVisibleIndex, moveBefore, moveToGroup) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView and optionally groups the ASPxGridView's data by this column.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup">
    ///true to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MoveColumn = function(columnFieldNameOrId, moveToColumnVisibleIndex, moveBefore, moveToGroup) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView and optionally groups the ASPxGridView's data by this column.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's ID.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup">
    ///true to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MoveColumn = function(column, moveToColumnVisibleIndex, moveBefore, moveToGroup, moveFromGroup) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView and optionally groups or ungroups the ASPxGridView's data by this column.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup">
    ///true to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup">
    ///true to ungroup the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MoveColumn = function(columnIndex, moveToColumnVisibleIndex, moveBefore, moveToGroup, moveFromGroup) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView and optionally groups or ungroups the ASPxGridView's data by this column.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup">
    ///true to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup">
    ///true to ungroup the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MoveColumn = function(columnFieldNameOrId, moveToColumnVisibleIndex, moveBefore, moveToGroup, moveFromGroup) {
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxGridView and optionally groups or ungroups the ASPxGridView's data by this column.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex">
    ///An integer value that identifies the target column displayed within the ASPxGridView.
    ///</param>
    ///<param name = "moveBefore">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup">
    ///true to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup">
    ///true to ungroup the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetFocusedRowIndex = function() {
    ///<summary>
    ///Returns the focused row's index.
    ///</summary>
    ///<returns>
    ///A zero-based integer that specifies the focused row's index.
    ///</returns>
};
MVCxClientGridView.prototype.SetFocusedRowIndex = function(visibleIndex) {
    ///<summary>
    ///Moves focus to the specified row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that specifies the focused row's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.IsCustomizationWindowVisible = function() {
    ///<summary>
    ///Indicates whether the Customization Window is displayed.
    ///</summary>
    ///<returns>
    ///true if the customization window is displayed; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.ShowCustomizationWindow = function() {
    ///<summary>
    ///Invokes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ShowCustomizationWindow = function(showAtElement) {
    ///<summary>
    ///Invokes the Customization Window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "showAtElement">
    ///An object that specifies the HTML element relative to whose position the customization window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.HideCustomizationWindow = function() {
    ///<summary>
    ///Closes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectRows = function() {
    ///<summary>
    ///Selects all the unselected rows within the ASPxGridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectRows = function(visibleIndex) {
    ///<summary>
    ///Selects the specified row displayed within the ASPxGridView.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectRows = function(visibleIndices) {
    ///<summary>
    ///Selects the specified rows within the ASPxGridView.
    ///</summary>
    ///<param name = "visibleIndices">
    ///An array of zero-based indices that identify data rows within the ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectRows = function(visibleIndices, selected) {
    ///<summary>
    ///Selects or deselects the specified rows within the ASPxGridView.
    ///</summary>
    ///<param name = "visibleIndices">
    ///An array of zero-based indices that identify data rows within the ASPxGridView.
    ///</param>
    ///<param name = "selected">
    ///true to select the specified rows; false to deselect the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectRows = function(visibleIndex, selected) {
    ///<summary>
    ///Selects or deselects the specified row within the ASPxGridView.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer zero-based index that identifies the data row within the ASPxGridView.
    ///</param>
    ///<param name = "selected">
    ///true to select the specified row; false to deselect the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectRowsByKey = function(keys, selected) {
    ///<summary>
    ///Selects or deselects the specified rows displayed within the ASPxGridView.
    ///</summary>
    ///<param name = "keys">
    ///An array of objects that uniquely identify the rows.
    ///</param>
    ///<param name = "selected">
    ///true to select the specified rows; false to deselect the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectRowsByKey = function(key, selected) {
    ///<summary>
    ///Selects or deselects the specified row displayed within the ASPxGridView.
    ///</summary>
    ///<param name = "key">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<param name = "selected">
    ///true to select the specified row; false to deselect the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectRowsByKey = function(keys) {
    ///<summary>
    ///Selects the specified rows displayed within the ASPxGridView.
    ///</summary>
    ///<param name = "keys">
    ///An array of objects that uniquely identify the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectRowsByKey = function(key) {
    ///<summary>
    ///Selects the specified row displayed within the ASPxGridView.
    ///</summary>
    ///<param name = "key">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.UnselectRowsByKey = function(keys) {
    ///<summary>
    ///Deselects the specified rows displayed within the ASPxGridView.
    ///</summary>
    ///<param name = "keys">
    ///An array of objects that uniquely identify the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.UnselectRowsByKey = function(key) {
    ///<summary>
    ///Deselects the specified row displayed within the ASPxGridView.
    ///</summary>
    ///<param name = "key">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.UnselectRows = function() {
    ///<summary>
    ///Deselects all the selected rows within the ASPxGridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.UnselectRows = function(visibleIndices) {
    ///<summary>
    ///Deselects the specified rows (if selected) within the ASPxGridView.
    ///</summary>
    ///<param name = "visibleIndices">
    ///An array of zero-based indices that identify data rows within the ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.UnselectRows = function(visibleIndex) {
    ///<summary>
    ///Deselects the specified row (if selected) within the ASPxGridView.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.UnselectFilteredRows = function() {
    ///<summary>
    ///Deselects all grid rows which match a filter criteria currently applied within the ASPxGridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectRowOnPage = function(visibleIndex) {
    ///<summary>
    ///Selects the specified row displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectRowOnPage = function(visibleIndex, selected) {
    ///<summary>
    ///Selects or deselects the specified row displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<param name = "selected">
    ///true to select the specified row; false to deselect the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.UnselectRowOnPage = function(visibleIndex) {
    ///<summary>
    ///Deselects the specified row (if selected) displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectAllRowsOnPage = function() {
    ///<summary>
    ///Selects all unselected rows displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectAllRowsOnPage = function(selected) {
    ///<summary>
    ///Selects or deselects all rows displayed on the current page.
    ///</summary>
    ///<param name = "selected">
    ///true to select all unselected rows displayed on the current page; false to deselect all selected rows on the page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.UnselectAllRowsOnPage = function() {
    ///<summary>
    ///Deselects all selected rows displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetSelectedRowCount = function() {
    ///<summary>
    ///Returns the number of selected rows.
    ///</summary>
    ///<returns>
    ///An integer value that specifies the number of selected rows.
    ///</returns>
};
MVCxClientGridView.prototype.GetSelectedFieldValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the row values displayed within all selected rows.
    ///</summary>
    ///<param name = "fieldNames">
    ///The names of data source fields separated via a semicolon, whose values within the selected rows are returned.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetSelectedKeysOnPage = function() {
    ///<summary>
    ///Returns key values of selected rows displayed within the current page.
    ///</summary>
    ///<returns>
    ///An array that contains key values of selected rows displayed within the current page.
    ///</returns>
};
MVCxClientGridView.prototype.IsRowSelectedOnPage = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified row is selected within the current page.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns>
    ///true if the specified row is selected within the current page; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.GetRowValues = function(visibleIndex, fieldNames, onCallback) {
    ///<summary>
    ///Returns the values of the specified data source fields within the specified row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the data row.
    ///</param>
    ///<param name = "fieldNames">
    ///The names of data source fields separated via a semicolon, whose values within the specified row are returned.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetPageRowValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the row values displayed within the current page.
    ///</summary>
    ///<param name = "fieldNames">
    ///The names of data source fields whose values are returned.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetVisibleRowsOnPage = function() {
    ///<summary>
    ///Returns the number of rows displayed within the active page.
    ///</summary>
    ///<returns>
    ///An integer value that specifies the number of rows displayed within the active page.
    ///</returns>
};
MVCxClientGridView.prototype.GetTopVisibleIndex = function() {
    ///<summary>
    ///Returns the index of the first data row displayed within the ASPxGridView's active page.
    ///</summary>
    ///<returns>
    ///An integer value that specifies the index of the topmost row.
    ///</returns>
};
MVCxClientGridView.prototype.IsGroupRow = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified row is a group row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns>
    ///true if the specified row is a group row; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.IsDataRow = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified row is a data row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns>
    ///true if the specified row is a data row; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.IsGroupRowExpanded = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified group row is expanded.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the group row by its visible index.
    ///</param>
    ///<returns>
    ///true if the specified group row is expanded; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.GetColumnsCount = function() {
    ///<summary>
    ///Returns the number of columns within the client ASPxGridView.
    ///</summary>
    ///<returns>
    ///An integer value that specifies the number of columns within the client ASPxGridView.
    ///</returns>
};
MVCxClientGridView.prototype.GetColumn = function(columnIndex) {
    ///<summary>
    ///Returns the client column that resides at the specified position within the column collection.
    ///</summary>
    ///<param name = "columnIndex">
    ///A zero-based index that identifies the column within the column collection.
    ///</param>
    ///<returns type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the client column.
    ///</returns>
};
MVCxClientGridView.prototype.GetColumnById = function(columnId) {
    ///<summary>
    ///Returns the column with the specified unique identifier.
    ///</summary>
    ///<param name = "columnId">
    ///A String value that specifies the column's unique identifier.
    ///</param>
    ///<returns type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the client column.
    ///</returns>
};
MVCxClientGridView.prototype.GetColumnByField = function(columnFieldName) {
    ///<summary>
    ///Returns the client column which is bound to the specified data source field.
    ///</summary>
    ///<param name = "columnFieldName">
    ///A String value that specifies the name of the data source field to which the column is bound.
    ///</param>
    ///<returns type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the client column bound to the specified data source field.
    ///</returns>
};
MVCxClientGridView.prototype.GetEditor = function(column) {
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the required data column within the client ASPxGridView.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An object representing the specified column's editor.
    ///</returns>
};
MVCxClientGridView.prototype.GetEditor = function(columnIndex) {
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An object representing the specified column's editor.
    ///</returns>
};
MVCxClientGridView.prototype.GetEditor = function(columnFieldNameOrId) {
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A string value that specifies the column's field name or ID.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An object representing the specified column's editor.
    ///</returns>
};
MVCxClientGridView.prototype.FocusEditor = function(column) {
    ///<summary>
    ///Moves focus to the specified edit cell within the edited row.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column within the client ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.FocusEditor = function(columnIndex) {
    ///<summary>
    ///Moves focus to the specified edit cell within the edited row.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.FocusEditor = function(columnFieldNameOrId) {
    ///<summary>
    ///Moves focus to the specified edit cell within the edited row.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's unique identifier, name or field name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetEditValue = function(column) {
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column within the client ASPxGridView.
    ///</param>
    ///<returns>
    ///A String value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
};
MVCxClientGridView.prototype.GetEditValue = function(columnIndex) {
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that identifies the data column within the ASPxGridView's column collection.
    ///</param>
    ///<returns>
    ///A String value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
};
MVCxClientGridView.prototype.GetEditValue = function(columnFieldNameOrId) {
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<returns>
    ///A String value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
};
MVCxClientGridView.prototype.SetEditValue = function(column, value) {
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column within the client ASPxGridView.
    ///</param>
    ///<param name = "value">
    ///A String value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetPopupEditForm = function() {
    ///<summary>
    ///Gets the Popup Edit Form.
    ///</summary>
    ///<returns type = "ASPxClientPopupControl">
    ///An ASPxClientPopupControl object that represents the Popup Edit Form.
    ///</returns>
};
MVCxClientGridView.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.PerformCallback = function(args) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetValuesOnCustomCallback = function(args, onCallback) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
    ///</summary>
    ///<param name = "args">
    ///A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the information on the client side.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Selects the specified page.
    ///</summary>
    ///<param name = "pageIndex">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page currently being selected.
    ///</summary>
    ///<returns>
    ///An integer value that specifies the active page's index.
    ///</returns>
};
MVCxClientGridView.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages to which the ASPxGridView's data is divided.
    ///</summary>
    ///<returns>
    ///An integer value that represents the number of grid pages.
    ///</returns>
};
MVCxClientGridView.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.UnGroup = function(column) {
    ///<summary>
    ///Ungroups data by the values of the specified column.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column within the ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.UnGroup = function(columnIndex) {
    ///<summary>
    ///Ungroups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.UnGroup = function(columnFieldNameOrId) {
    ///<summary>
    ///Ungroups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all group rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all group rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ExpandAllDetailRows = function() {
    ///<summary>
    ///Expands all detail rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.CollapseAllDetailRows = function() {
    ///<summary>
    ///Collapses all detail rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ExpandRow = function(visibleIndex) {
    ///<summary>
    ///Expands the specified group row preserving the collapsed state of any child group row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the group row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ExpandRow = function(visibleIndex, recursive) {
    ///<summary>
    ///Expands the specified group row and optionally child group rows at all nesting levels.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the group row.
    ///</param>
    ///<param name = "recursive">
    ///true to expand any child group rows at all nesting levels; false to preserve the collapsed state of any child group rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.CollapseRow = function(visibleIndex) {
    ///<summary>
    ///Collapses the specified group row preserving the expanded state of child group rows.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the group row by its visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.CollapseRow = function(visibleIndex, recursive) {
    ///<summary>
    ///Collapses the specified group row and optionally child group rows at all nesting levels.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the group row by its visible index.
    ///</param>
    ///<param name = "recursive">
    ///true to collapse child group rows at all nesting levels; false to preserve the expanded state of any child group row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.MakeRowVisible = function(visibleIndex) {
    ///<summary>
    ///Scrolls the view to the specified row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies a row by its visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ExpandDetailRow = function(visibleIndex) {
    ///<summary>
    ///Expands the specified detail row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer index that identifies the detail row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.CollapseDetailRow = function(visibleIndex) {
    ///<summary>
    ///Collapses the specified detail row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer index that identifies the detail row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetRowKey = function(visibleIndex) {
    ///<summary>
    ///Returns the key value of the specified data row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that specifies the row's visible index.
    ///</param>
    ///<returns>
    ///An object that is the specified data row's key value. If the index passed via the visibleIndex parameter is wrong, or the KeyFieldName property is not set, null is returned.
    ///</returns>
};
MVCxClientGridView.prototype.StartEditRow = function(visibleIndex) {
    ///<summary>
    ///Switches the ASPxGridView to edit mode.
    ///</summary>
    ///<param name = "visibleIndex">
    ///A zero-based integer that identifies a data row to be edited.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.StartEditRowByKey = function(key) {
    ///<summary>
    ///Switches the ASPxGridView to edit mode.
    ///</summary>
    ///<param name = "key">
    ///An object that uniquely identifies a data row to be edited.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.IsEditing = function() {
    ///<summary>
    ///Indicates whether the ASPxGridView is in edit mode.
    ///</summary>
    ///<returns>
    ///true if the ASPxGridView is in edit mode; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.IsNewRowEditing = function() {
    ///<summary>
    ///Indicates whether a new row is being edited.
    ///</summary>
    ///<returns>
    ///true if the ASPxGridView is in edit mode for a new row; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.UpdateEdit = function() {
    ///<summary>
    ///Saves all the changes made and switches the ASPxGridView to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.CancelEdit = function() {
    ///<summary>
    ///Cancels all the changes made and switches the ASPxGridView to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.AddNewRow = function() {
    ///<summary>
    ///Adds a new record.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.DeleteRow = function(visibleIndex) {
    ///<summary>
    ///Deletes the specified row.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value that identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.DeleteRowByKey = function(key) {
    ///<summary>
    ///Deletes a row with the specified key value.
    ///</summary>
    ///<param name = "key">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.Refresh = function() {
    ///<summary>
    ///Updates data displayed within the ASPxGridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ApplyFilter = function(filterExpression) {
    ///<summary>
    ///Applies the specified filter expression to the ASPxGridView.
    ///</summary>
    ///<param name = "filterExpression">
    ///A String value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ClearFilter = function() {
    ///<summary>
    ///Clears the filter expression applied to a client ASPxGridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetAutoFilterEditor = function(column) {
    ///<summary>
    ///Returns the editor used to edit the value in the auto filter row for the specified data column.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data colum within the ASPxGridView.
    ///</param>
    ///<returns>
    ///An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
    ///</returns>
};
MVCxClientGridView.prototype.GetAutoFilterEditor = function(columnIndex) {
    ///<summary>
    ///Returns the editor used to edit the value in the auto filter row for the specified data column.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that identifies the data column by its index.
    ///</param>
    ///<returns>
    ///An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
    ///</returns>
};
MVCxClientGridView.prototype.GetAutoFilterEditor = function(columnFieldNameOrId) {
    ///<summary>
    ///Returns the editor used to edit the value in the auto filter row for the specified data column.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's name or its data base field name.
    ///</param>
    ///<returns>
    ///An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
    ///</returns>
};
MVCxClientGridView.prototype.AutoFilterByColumn = function(column, val) {
    ///<summary>
    ///Applies a filter to the specified data column.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column within the client ASPxGridView.
    ///</param>
    ///<param name = "val">
    ///A String value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.AutoFilterByColumn = function(columnIndex, val) {
    ///<summary>
    ///Applies a filter to the specified data column.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "val">
    ///A String value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.AutoFilterByColumn = function(columnFieldNameOrId, val) {
    ///<summary>
    ///Applies a filter to the specified data column.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<param name = "val">
    ///A String value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GroupBy = function(column) {
    ///<summary>
    ///Groups data by the values of the specified column.
    ///</summary>
    ///<param name = "column">
    ///An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GroupBy = function(columnIndex) {
    ///<summary>
    ///Groups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnIndex">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GroupBy = function(columnFieldNameOrId) {
    ///<summary>
    ///Groups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId">
    ///A String value that specifies the column's field name or ID.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientGridView.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientGridView.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientGridView.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.name= 0;
MVCxClientHtmlEditor.prototype.BeginCallback= 0;
MVCxClientHtmlEditor.prototype.CustomCommand= 0;
MVCxClientHtmlEditor.prototype.CommandExecuted= 0;
MVCxClientHtmlEditor.prototype.GotFocus= 0;
MVCxClientHtmlEditor.prototype.LostFocus= 0;
MVCxClientHtmlEditor.prototype.SelectionChanged= 0;
MVCxClientHtmlEditor.prototype.HtmlChanged= 0;
MVCxClientHtmlEditor.prototype.CustomDialogOpened= 0;
MVCxClientHtmlEditor.prototype.CustomDialogClosing= 0;
MVCxClientHtmlEditor.prototype.CustomDialogClosed= 0;
MVCxClientHtmlEditor.prototype.Validation= 0;
MVCxClientHtmlEditor.prototype.EndCallback= 0;
MVCxClientHtmlEditor.prototype.CallbackError= 0;
MVCxClientHtmlEditor.prototype.CustomDataCallback= 0;
MVCxClientHtmlEditor.prototype.Init= 0;
MVCxClientHtmlEditor.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the ASPxHtmlEditor's edit region.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetHtml = function() {
    ///<summary>
    ///Gets the HTML markup that represents the editor's content.
    ///</summary>
    ///<returns>
    ///A string value that represents the HTML markup.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetHtml = function(html) {
    ///<summary>
    ///Specifies the HTML markup that represents the editor's content.
    ///</summary>
    ///<param name = "html">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetHtml = function(html, clearUndoHistory) {
    ///<summary>
    ///Sets the HTML markup that represents the editor's content.
    ///</summary>
    ///<param name = "html">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<param name = "clearUndoHistory">
    ///true to clear the undo stack; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.ExecuteCommand = function(commandName, parameter, addToUndoHistory) {
    ///<summary>
    ///Executes the specified command.
    ///</summary>
    ///<param name = "commandName">
    ///A string value that specifies the command to perform.
    ///</param>
    ///<param name = "parameter">
    ///A string value specifying additional information about the command to perform.
    ///</param>
    ///<param name = "addToUndoHistory">
    ///true to add the specified command to the undo stack; otherwise, false.
    ///</param>
    ///<returns>
    ///true if the specified command has been completed successfully; otherwise, false.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SaveToUndoHistory = function() {
    ///<summary>
    ///Adds the current editor state to the undo/redo history.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetSelection = function() {
    ///<summary>
    ///Returns the selection within the ASPxHtmlEditor.
    ///</summary>
    ///<returns type = "ASPxClientHtmlEditorSelection">
    ///The ASPxClientHtmlEditorSelection object specifying the selection within the ASPxHtmlEditor.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.RestoreSelection = function() {
    ///<summary>
    ///Restores the selection within the ASPxHtmlEditor.
    ///</summary>
    ///<returns>
    ///true if selection has been restored successfully; otherwise, false.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetToolbarComboBoxValue = function(commandName, value) {
    ///<summary>
    ///Sets the value of the combo box within the HtmlEditor on the client side.
    ///</summary>
    ///<param name = "commandName">
    ///A string value that identifies the combo box's command name within the HtmlEditor's control collection.
    ///</param>
    ///<param name = "value">
    ///A string value that specifies the combo box's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value passes validation.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value passes validation; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.Validate = function() {
    ///<summary>
    ///Performs validation of the editor's content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.PerformDataCallback = function(parameter, onCallback) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<param name = "onCallback">
    ///A ASPxClientDataCallback object that represents the JavaScript function which receives the callback data as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientListBox.prototype.name= 0;
MVCxClientListBox.prototype.BeginCallback= 0;
MVCxClientListBox.prototype.EndCallback= 0;
MVCxClientListBox.prototype.CallbackError= 0;
MVCxClientListBox.prototype.KeyDown= 0;
MVCxClientListBox.prototype.KeyPress= 0;
MVCxClientListBox.prototype.KeyUp= 0;
MVCxClientListBox.prototype.SelectedIndexChanged= 0;
MVCxClientListBox.prototype.ItemDoubleClick= 0;
MVCxClientListBox.prototype.GotFocus= 0;
MVCxClientListBox.prototype.LostFocus= 0;
MVCxClientListBox.prototype.Validation= 0;
MVCxClientListBox.prototype.ValueChanged= 0;
MVCxClientListBox.prototype.Init= 0;
MVCxClientListBox.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns>
    ///An integer value representing the total number of items in the editor's item collection.
    ///</returns>
};
MVCxClientListBox.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the list box editor's item collection.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the item to search for.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object representing the collection item found.
    ///</returns>
};
MVCxClientListBox.prototype.GetSelectedIndices = function() {
    ///<summary>
    ///Returns an array of the list editor's selected items indices.
    ///</summary>
    ///<returns>
    ///An array of integer values that represent the indices of the selected items.
    ///</returns>
};
MVCxClientListBox.prototype.GetSelectedValues = function() {
    ///<summary>
    ///Returns an array of the list editor's selected items values.
    ///</summary>
    ///<returns>
    ///An array of Object[] objects that represent the values of the selected items.
    ///</returns>
};
MVCxClientListBox.prototype.GetSelectedItems = function() {
    ///<summary>
    ///Returns an array of the list editor's selected items.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem[]">
    ///An array of ASPxClientListEditItem objects that represent the selected items.
    ///</returns>
};
MVCxClientListBox.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all list box items.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.UnselectAll = function() {
    ///<summary>
    ///Unselects all list box items.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.SelectIndices = function(indices) {
    ///<summary>
    ///Selects the items with the specified indices within a list box.
    ///</summary>
    ///<param name = "indices">
    ///An array of integer values that represent the items indices.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.UnselectIndices = function(indices) {
    ///<summary>
    ///Unselects an array of the list box items with the specified indices.
    ///</summary>
    ///<param name = "indices">
    ///An array of integer values that represent the indices.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.SelectItems = function(items) {
    ///<summary>
    ///Selects the specified items within a list box.
    ///</summary>
    ///<param name = "items">
    ///An array of ASPxClientListEditItem objects that represent the items.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.UnselectItems = function(items) {
    ///<summary>
    ///Unselects an array of the specified list box items.
    ///</summary>
    ///<param name = "items">
    ///An array of ASPxClientListEditItem objects that represent the items.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.SelectValues = function(values) {
    ///<summary>
    ///Select the items with the specified values within a list box.
    ///</summary>
    ///<param name = "values">
    ///An array of Object[] objects that represent the item's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.UnselectValues = function(values) {
    ///<summary>
    ///Unselects an array of the list box items with the specified values.
    ///</summary>
    ///<param name = "values">
    ///An array of Object[] objects that represent the values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.MakeItemVisible = function(index) {
    ///<summary>
    ///Scrolls the editor's item list, so that the specified item becomes visible.
    ///</summary>
    ///<param name = "index">
    ///An integer value that specifies the item's index within the editor's client item list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.InitOnContainerMadeVisible = function() {
    ///<summary>
    ///Initializes the ASPxClientListBox client object when its parent container becomes visible dynamically, on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.AddItem = function(text) {
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns>
    ///An integer value that represents the added item's index.
    ///</returns>
};
MVCxClientListBox.prototype.AddItem = function(text, value) {
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text and associated value, and returns the index of the added item.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns>
    ///An integer value that represents the added item's index.
    ///</returns>
};
MVCxClientListBox.prototype.AddItem = function(text, value, imageUrl) {
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns>
    ///An integer value that represents the added item's index.
    ///</returns>
};
MVCxClientListBox.prototype.InsertItem = function(index, text, value, imageUrl) {
    ///<summary>
    ///Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.InsertItem = function(index, text, value) {
    ///<summary>
    ///Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.InsertItem = function(index, text) {
    ///<summary>
    ///Inserts a new item specified by its display text into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.BeginUpdate = function() {
    ///<summary>
    ///Prevents the client list box editor from being rendered until the EndUpdate method is called.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.EndUpdate = function() {
    ///<summary>
    ///Re-enables editor render operations after a call to the BeginUpdate method, and forces an immediate re-rendering.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.ClearItems = function() {
    ///<summary>
    ///Removes all items from the client list box editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.RemoveItem = function(index) {
    ///<summary>
    ///Removes an item specified by its index from the client list editor.
    ///</summary>
    ///<param name = "index">
    ///An integer value representing the index of the list item to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.FindItemByText = function(text) {
    ///<summary>
    ///Returns a list box item by its text.
    ///</summary>
    ///<param name = "text">
    ///A string that specifies the item's text.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the list box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
MVCxClientListBox.prototype.FindItemByValue = function(value) {
    ///<summary>
    ///Returns a list box item by its value.
    ///</summary>
    ///<param name = "value">
    ///An object that specifies the item's value.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the list box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
MVCxClientListBox.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server, and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.AddItem = function(texts) {
    ///<summary>
    ///Adds a new item to the end of the editor's items collection, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns>
    ///An integer value representing the position at which a new item was added.
    ///</returns>
};
MVCxClientListBox.prototype.AddItem = function(texts, value) {
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns>
    ///An integer value representing the position to which the new item was added.
    ///</returns>
};
MVCxClientListBox.prototype.AddItem = function(texts, value, imageUrl) {
    ///<summary>
    ///Adds a new item to the end of the editor's items collection, specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns>
    ///An integer value representing the position at which a new item was added.
    ///</returns>
};
MVCxClientListBox.prototype.InsertItem = function(index, texts, value, imageUrl) {
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.InsertItem = function(index, texts, value) {
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.InsertItem = function(index, texts) {
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the list editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
MVCxClientListBox.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the list editor.
    ///</summary>
    ///<returns>
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
MVCxClientListBox.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the list editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns>
    ///An object representing the control's input element.
    ///</returns>
};
MVCxClientListBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns>
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
MVCxClientListBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns>
    ///A string value representing the error text.
    ///</returns>
};
MVCxClientListBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid">
    ///true if the editor's value is valid; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns>
    ///An object representing the editor's value.
    ///</returns>
};
MVCxClientListBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns>
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
MVCxClientListBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientListBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientListBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientListBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientListBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientListBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientNavBar.prototype.name= 0;
MVCxClientNavBar.prototype.BeginCallback= 0;
MVCxClientNavBar.prototype.ItemClick= 0;
MVCxClientNavBar.prototype.ExpandedChanged= 0;
MVCxClientNavBar.prototype.ExpandedChanging= 0;
MVCxClientNavBar.prototype.HeaderClick= 0;
MVCxClientNavBar.prototype.EndCallback= 0;
MVCxClientNavBar.prototype.CallbackError= 0;
MVCxClientNavBar.prototype.Init= 0;
MVCxClientNavBar.prototype.GetGroupCount = function() {
    ///<summary>
    ///Returns the number of groups in the navbar.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of groups in the navbar.
    ///</returns>
};
MVCxClientNavBar.prototype.GetGroup = function(index) {
    ///<summary>
    ///Returns a group specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the group object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientNavBarGroup">
    ///An Groups collection.
    ///</returns>
};
MVCxClientNavBar.prototype.GetGroupByName = function(name) {
    ///<summary>
    ///Returns a group specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the group.
    ///</param>
    ///<returns type = "ASPxClientNavBarGroup">
    ///An ASPxClientNavBarGroup object that represents the group with the specified name.
    ///</returns>
};
MVCxClientNavBar.prototype.GetActiveGroup = function() {
    ///<summary>
    ///Returns the navbar's active group.
    ///</summary>
    ///<returns type = "ASPxClientNavBarGroup">
    ///A ASPxClientNavBarGroup object that represents the active group.
    ///</returns>
};
MVCxClientNavBar.prototype.SetActiveGroup = function(group) {
    ///<summary>
    ///Makes the specified group active.
    ///</summary>
    ///<param name = "group">
    ///A ASPxClientNavBarGroup object that specifies the active group.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns an item specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the item.
    ///</param>
    ///<returns type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object that represents the item with the specified name.
    ///</returns>
};
MVCxClientNavBar.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the selected item within the navbar control.
    ///</summary>
    ///<returns type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object that represents the selected item.
    ///</returns>
};
MVCxClientNavBar.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Selects the specified item within the navbar control on the client side.
    ///</summary>
    ///<param name = "item">
    ///An ASPxClientNavBarItem object specifying the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all groups of the navbar.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all groups of the navbar.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientNavBar.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientNavBar.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientNavBar.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientNavBar.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientNavBar.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientReportViewer.prototype.name= 0;
MVCxClientReportViewer.prototype.PageLoad= 0;
MVCxClientReportViewer.prototype.Init= 0;
MVCxClientReportViewer.prototype.Print = function() {
    ///<summary>
    ///Prints a report shown in the ReportViewer.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.Print = function(pageIndex) {
    ///<summary>
    ///Prints a report page with the specified page index.
    ///</summary>
    ///<param name = "pageIndex">
    ///An integer value which specifies an index of the page to be printed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Displays a report page with the specified page index in the ReportViewer.
    ///</summary>
    ///<param name = "pageIndex">
    ///An integer value which specifies the index of a page to be displayed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.Refresh = function() {
    ///<summary>
    ///Initiates a round trip to the server so that the current page will be reloaded.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.Search = function() {
    ///<summary>
    ///Invokes the Search dialog, which allows end-users to search for specific text in a report.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.SaveToWindow = function(format) {
    ///<summary>
    ///Exports a report to a file of the specified format, and shows it in a new Web Browser window.
    ///</summary>
    ///<param name = "format">
    ///A string specifying the format, to which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.SaveToDisk = function(format) {
    ///<summary>
    ///Exports a report to a file of the specified format, and saves it to the disk.
    ///</summary>
    ///<param name = "format">
    ///A string specifying the format, to which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.IsSearchAllowed = function() {
    ///<summary>
    ///Gets a value indicating whether it's possible to search for a specified text in the Web Browser, which displays a report on the client side.
    ///</summary>
    ///<returns>
    ///true if searching is allowed; otherwise, false.
    ///</returns>
};
MVCxClientReportViewer.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientReportViewer.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientReportViewer.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientReportViewer.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientReportViewer.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientReportViewer.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientPageControl.prototype.name= 0;
MVCxClientPageControl.prototype.BeginCallback= 0;
MVCxClientPageControl.prototype.TabClick= 0;
MVCxClientPageControl.prototype.ActiveTabChanged= 0;
MVCxClientPageControl.prototype.ActiveTabChanging= 0;
MVCxClientPageControl.prototype.EndCallback= 0;
MVCxClientPageControl.prototype.CallbackError= 0;
MVCxClientPageControl.prototype.Init= 0;
MVCxClientPageControl.prototype.GetTabContentHTML = function(tab) {
    ///<summary>
    ///Returns the HTML code that represents the contents of the specified page within the page control.
    ///</summary>
    ///<param name = "tab">
    ///An ASPxClientTab object that specifies the required page.
    ///</param>
    ///<returns>
    ///A string that represents the specified page's HTML content.
    ///</returns>
};
MVCxClientPageControl.prototype.SetTabContentHTML = function(tab, html) {
    ///<summary>
    ///Defines the HTML content for a specific tab page within the page control.
    ///</summary>
    ///<param name = "tab">
    ///An ASPxClientTab object that specifies the required tab page.
    ///</param>
    ///<param name = "html">
    ///A string value that represents the HTML code defining the content of the specified page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a tab page's size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.GetActiveTab = function() {
    ///<summary>
    ///Returns the active tab within the tab control.
    ///</summary>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the active tab.
    ///</returns>
};
MVCxClientPageControl.prototype.SetActiveTab = function(tab) {
    ///<summary>
    ///Makes the specified tab active within the tab control on the client side.
    ///</summary>
    ///<param name = "tab">
    ///An ASPxClientTab object specifying the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.GetActiveTabIndex = function() {
    ///<summary>
    ///Returns the index of the active tab within the tab control.
    ///</summary>
    ///<returns>
    ///An integer that represents the active tab's index.
    ///</returns>
};
MVCxClientPageControl.prototype.SetActiveTabIndex = function(index) {
    ///<summary>
    ///Makes a tab active within the tab control, specifying the tab's index.
    ///</summary>
    ///<param name = "index">
    ///An integer valie specifying the index of the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.GetTabCount = function() {
    ///<summary>
    ///Returns the number of tabs in the ASPxTabControl.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of tabs in the control.
    ///</returns>
};
MVCxClientPageControl.prototype.GetTab = function(index) {
    ///<summary>
    ///Returns a tab specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the tab object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An Tabs collection.
    ///</returns>
};
MVCxClientPageControl.prototype.GetTabByName = function(name) {
    ///<summary>
    ///Returns a tab specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the tab.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the tab with the specified name.
    ///</returns>
};
MVCxClientPageControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientPageControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientPageControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientPageControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientPageControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientPageControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientTreeView.prototype.name= 0;
MVCxClientTreeView.prototype.BeginCallback= 0;
MVCxClientTreeView.prototype.NodeClick= 0;
MVCxClientTreeView.prototype.ExpandedChanged= 0;
MVCxClientTreeView.prototype.ExpandedChanging= 0;
MVCxClientTreeView.prototype.CheckedChanged= 0;
MVCxClientTreeView.prototype.EndCallback= 0;
MVCxClientTreeView.prototype.CallbackError= 0;
MVCxClientTreeView.prototype.Init= 0;
MVCxClientTreeView.prototype.GetNode = function(index) {
    ///<summary>
    ///Returns a node specified by its index within the ASPxTreeView's node collection.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the node to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object, representing the node located at the specified index within the ASPxTreeView's node collection.
    ///</returns>
};
MVCxClientTreeView.prototype.GetNodeByName = function(name) {
    ///<summary>
    ///Returns a node specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the node.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the node with the specified name.
    ///</returns>
};
MVCxClientTreeView.prototype.GetNodeByText = function(text) {
    ///<summary>
    ///Returns a node specified by its text.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text content of the node.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the node with the specified node's text content.
    ///</returns>
};
MVCxClientTreeView.prototype.GetNodeCount = function() {
    ///<summary>
    ///Returns the number of nodes at the ASPxTreeView's zero level.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of the root node child nodes.
    ///</returns>
};
MVCxClientTreeView.prototype.GetSelectedNode = function() {
    ///<summary>
    ///Returns the selected node within the ASPxTreeView control on the client side.
    ///</summary>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the selected node.
    ///</returns>
};
MVCxClientTreeView.prototype.SetSelectedNode = function(node) {
    ///<summary>
    ///Selects the specified node within the ASPxTreeView control on the client side.
    ///</summary>
    ///<param name = "node">
    ///An ASPxClientTreeViewNode object specifying the node to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.GetRootNode = function() {
    ///<summary>
    ///Gets the root node of the ASPxTreeView object.
    ///</summary>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object representing a root node.
    ///</returns>
};
MVCxClientTreeView.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all nodes in the ASPxTreeView on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all nodes in the ASPxTreeView on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientTreeView.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientTreeView.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientTreeView.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientTreeView.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientTreeView.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientUploadControl.prototype.name= 0;
MVCxClientUploadControl.prototype.FileUploadComplete= 0;
MVCxClientUploadControl.prototype.FilesUploadComplete= 0;
MVCxClientUploadControl.prototype.FileUploadStart= 0;
MVCxClientUploadControl.prototype.UploadingProgressChanged= 0;
MVCxClientUploadControl.prototype.TextChanged= 0;
MVCxClientUploadControl.prototype.FileInputCountChanged= 0;
MVCxClientUploadControl.prototype.Init= 0;
MVCxClientUploadControl.prototype.AddFileInput = function() {
    ///<summary>
    ///Adds a new file input element to the ASPxUploadControl.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.RemoveFileInput = function() {
    ///<summary>
    ///Removes the last file input element from the ASPxUploadControl.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.RemoveFileInput = function(index) {
    ///<summary>
    ///Removes a file input element from the ASPxUploadControl.
    ///</summary>
    ///<param name = "index">
    ///An integer value that represents a file input element's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.ClearText = function() {
    ///<summary>
    ///Clears the text displayed within the control's edit box.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.GetText = function() {
    ///<summary>
    ///Gets the text displayed within the control's edit box.
    ///</summary>
    ///<returns>
    ///A string value representing the displayed text.
    ///</returns>
};
MVCxClientUploadControl.prototype.GetText = function(index) {
    ///<summary>
    ///Gets the text displayed within the edit box of the specified file input element.
    ///</summary>
    ///<param name = "index">
    ///An integer value that specifies the required file input element's index.
    ///</param>
    ///<returns>
    ///A string value representing the displayed text.
    ///</returns>
};
MVCxClientUploadControl.prototype.UploadFile = function() {
    ///<summary>
    ///Initiates uploading of the specified file to the web server's memory.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.Upload = function() {
    ///<summary>
    ///Initiates uploading of the specified file(s) to the web server's memory.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.Cancel = function() {
    ///<summary>
    ///Cancels the initiated file uploading process.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.GetFileInputCount = function() {
    ///<summary>
    ///Gets the number of file input elements contained within the ASPxUploadControl.
    ///</summary>
    ///<returns>
    ///An integer value representing the total number of file input elements.
    ///</returns>
};
MVCxClientUploadControl.prototype.SetFileInputCount = function(count) {
    ///<summary>
    ///Specifies the count of the file input elements within the upload control.
    ///</summary>
    ///<param name = "count">
    ///An integer value that specifies the file input elements count.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.SetAddButtonText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the add button.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.SetUploadButtonText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the upload button.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.GetAddButtonText = function() {
    ///<summary>
    ///Returns the text displayed within the add button.
    ///</summary>
    ///<returns>
    ///A string value representing the text displayed within the button.
    ///</returns>
};
MVCxClientUploadControl.prototype.GetUploadButtonText = function() {
    ///<summary>
    ///Returns the text displayed within the upload button.
    ///</summary>
    ///<returns>
    ///A string value representing the text displayed within the button.
    ///</returns>
};
MVCxClientUploadControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientUploadControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientUploadControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientUploadControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientUploadControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientUploadControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientBeginCallbackEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle client BeginCallback events.
    ///</summary>
    ///<param name = "source">
    ///An object which is the event source. Identifies the client object that raised the event.
    ///</param>
    ///<param name = "e">
    ///A MVCxClientBeginCallbackEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientBeginCallbackEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
MVCxClientBeginCallbackEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientBeginCallbackEventArgs.prototype.customArgs= 0;
MVCxClientBeginCallbackEventArgs.prototype.command= 0;
ASPxClientControl.prototype.name= 0;
ASPxClientControl.prototype.Init= 0;
ASPxClientControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientCallback.prototype.name= 0;
ASPxClientCallback.prototype.BeginCallback= 0;
ASPxClientCallback.prototype.EndCallback= 0;
ASPxClientCallback.prototype.CallbackError= 0;
ASPxClientCallback.prototype.CallbackComplete= 0;
ASPxClientCallback.prototype.Init= 0;
ASPxClientCallback.prototype.SendCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallback.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallback.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientCallback.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientCallback.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallback.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallback.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallback.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientCallback.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCallback.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallback.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCallback.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallback.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientCallbackCompleteEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client events related to completion of callback server-side processing.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source. Identifies the web control that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientCallbackCompleteEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackCompleteEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientCallbackCompleteEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackCompleteEventArgs.prototype.parameter= 0;
ASPxClientCallbackCompleteEventArgs.prototype.result= 0;
ASPxClientCallbackPanel.prototype.name= 0;
ASPxClientCallbackPanel.prototype.BeginCallback= 0;
ASPxClientCallbackPanel.prototype.EndCallback= 0;
ASPxClientCallbackPanel.prototype.CallbackError= 0;
ASPxClientCallbackPanel.prototype.Init= 0;
ASPxClientCallbackPanel.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.GetLoadingPanelText = function() {
    ///<summary>
    ///Returns the text displayed within the control's loading panel.
    ///</summary>
    ///<returns>
    ///A string value representing the text displayed within the button.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.SetLoadingPanelText = function(loadingPanelText) {
    ///<summary>
    ///Sets the text to be displayed within the control's loading panel.
    ///</summary>
    ///<param name = "loadingPanelText">
    ///A string value specifying the text to be displayed within the loading panel.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that represents the contents of the panel.
    ///</summary>
    ///<returns>
    ///A string that represents the panel's HTML content.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Specifies the HTML markup that represents the panel's content.
    ///</summary>
    ///<param name = "html">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Sets a value specifying whether the callback panel is enabled.
    ///</summary>
    ///<param name = "enabled">
    ///true to make the callback panel enabled; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a callback panel is enabled.
    ///</summary>
    ///<returns>
    ///true if the callback panel is enabled; otherwise, false.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientEvent.prototype.AddHandler = function(handler) {
    ///<summary>
    ///Dynamically connects the event with an appropriate event handler function.
    ///</summary>
    ///<param name = "handler">
    ///An object representing the event handling function's content.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEvent.prototype.RemoveHandler = function(handler) {
    ///<summary>
    ///Dynamically disconnects the event from the associated event handler function.
    ///</summary>
    ///<param name = "handler">
    ///An object representing the event handling function's content.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEvent.prototype.ClearHandlers = function() {
    ///<summary>
    ///Dynamically disconnects the event from all the associated event handler functions.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEvent.prototype.FireEvent = function(source, e) {
    ///<summary>
    ///For internal use only.
    ///</summary>
    ///<param name = "source">
    ///
    ///</param>
    ///<param name = "e">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client-side events of a web control's client-side equivalent.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source. Identifies the control that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCancelEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the cancelable events of a web control's client-side equivalent.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source. Identifies the web control that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCancelEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientCancelEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCancelEventArgs.prototype.cancel= 0;
ASPxClientProcessingModeEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client events which can't be cancelled and allow the event's processing to be passed to the server side.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source. Identifies the web control that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientProcessingModeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProcessingModeEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientProcessingModeEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProcessingModeEventArgs.prototype.processOnServer= 0;
ASPxClientProcessingModeCancelEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the cancelable client-side events which allow the event's processing to be passed to the server side.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source. Identifies the web control that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientProcessingModeCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProcessingModeCancelEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientProcessingModeCancelEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProcessingModeCancelEventArgs.prototype.cancel= 0;
ASPxClientProcessingModeCancelEventArgs.prototype.processOnServer= 0;
ASPxClientBeginCallbackEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle client BeginCallback events.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source. Identifies the web control that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientBeginCallbackEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBeginCallbackEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientBeginCallbackEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBeginCallbackEventArgs.prototype.command= 0;
ASPxClientEndCallbackEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle client EndCallback events.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e">
    ///A MenuItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEndCallbackEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientEndCallbackEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCustomDataCallbackEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client CustomCallback event of some controls.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientCustomDataCallbackEventHandler object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCustomDataCallbackEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientCustomDataCallbackEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCustomDataCallbackEventArgs.prototype.result= 0;
ASPxClientCallbackErrorEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle client CallbackError events.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e">
    ///A ASPxClientCallbackErrorEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackErrorEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientCallbackErrorEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackErrorEventArgs.prototype.message= 0;
ASPxClientCallbackErrorEventArgs.prototype.handled= 0;
ASPxClientControlsInitializedEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client ControlsInitialized event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientControlsInitializedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControlsInitializedEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientControlsInitializedEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControlsInitializedEventArgs.prototype.isCallback= 0;
ASPxClientControlCollection.prototype.ControlsInitialized= 0;
ASPxClientControlCollection.prototype.Get = function(name) {
    ///<summary>
    ///Returns a collection item identified by its unique hierarchically-qualified identifier.
    ///</summary>
    ///<param name = "name">
    ///A string value representing the hierarchically-qualified identifier of the required control.
    ///</param>
    ///<returns>
    ///An object representing the collection item found.
    ///</returns>
};
ASPxClientControlCollection.prototype.GetByName = function(name) {
    ///<summary>
    ///Returns a DevExpress client control object identified by its unique hierarchically-qualified identifier (either ClientInstanceName or ClientID property value).
    ///</summary>
    ///<param name = "name">
    ///A string value that is the hierarchically-qualified identifier of the required DevExpress control.
    ///</param>
    ///<returns>
    ///An object that is the client control object found.
    ///</returns>
};
ASPxClientDataCallback.prototype.Invoke = function(sender, result) {
    ///<summary>
    ///A JavaScript function which receives a callback data obtained via a call to a specific client method (such as the PerformDataCallback).
    ///</summary>
    ///<param name = "sender">
    ///An object whose client method generated a callback.
    ///</param>
    ///<param name = "result">
    ///A string value that represents the result of server-side callback processing.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataCallback.prototype.BeginInvoke = function(sender, result, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientDataCallback.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.prototype.agent= 0;
ASPxClientUtils.prototype.opera= 0;
ASPxClientUtils.prototype.opera9= 0;
ASPxClientUtils.prototype.safari= 0;
ASPxClientUtils.prototype.safari3= 0;
ASPxClientUtils.prototype.safariMacOS= 0;
ASPxClientUtils.prototype.chrome= 0;
ASPxClientUtils.prototype.ie= 0;
ASPxClientUtils.prototype.ie55= 0;
ASPxClientUtils.prototype.ie7= 0;
ASPxClientUtils.prototype.firefox= 0;
ASPxClientUtils.prototype.firefox3= 0;
ASPxClientUtils.prototype.mozilla= 0;
ASPxClientUtils.prototype.netscape= 0;
ASPxClientUtils.prototype.browserVersion= 0;
ASPxClientUtils.prototype.browserMajorVersion= 0;
ASPxClientUtils.prototype.macOSPlatform= 0;
ASPxClientUtils.prototype.windowsPlatform= 0;
ASPxClientUtils.prototype.webKitFamily= 0;
ASPxClientUtils.prototype.netscapeFamily= 0;
ASPxClientCloudControl.prototype.name= 0;
ASPxClientCloudControl.prototype.ItemClick= 0;
ASPxClientCloudControl.prototype.Init= 0;
ASPxClientCloudControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientCloudControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientCloudControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientCloudControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCloudControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCloudControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientCloudControlItemEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle client events concerning manipulations with items.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the cloud control object which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientCloudControlItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControlItemEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientCloudControlItemEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControlItemEventArgs.prototype.name= 0;
ASPxClientCloudControlItemEventArgs.prototype.htmlElement= 0;
ASPxClientCloudControlItemEventArgs.prototype.htmlEvent= 0;
ASPxClientCloudControlItemEventArgs.prototype.processOnServer= 0;
ASPxClientDataView.prototype.name= 0;
ASPxClientDataView.prototype.BeginCallback= 0;
ASPxClientDataView.prototype.EndCallback= 0;
ASPxClientDataView.prototype.CallbackError= 0;
ASPxClientDataView.prototype.Init= 0;
ASPxClientDataView.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDataView.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDataView.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDataView.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDataView.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDataView.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDockingFilterPredicate.prototype.Invoke = function(item) {
    ///<summary>
    ///A JavaScript function which returns a value specifying whether an object meets the criteria defined within the method specified by this delegate.
    ///</summary>
    ///<param name = "item">
    ///An object to compare against the criteria defined within the method.
    ///</param>
    ///<returns>
    ///true if the object meets the criteria; otherwise, false.
    ///</returns>
};
ASPxClientDockingFilterPredicate.prototype.BeginInvoke = function(item, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientDockingFilterPredicate.prototype.EndInvoke = function(result) {
    ///<returns type = "Boolean">
    ///</returns>
};
ASPxClientDockManager.prototype.name= 0;
ASPxClientDockManager.prototype.BeforeDock= 0;
ASPxClientDockManager.prototype.AfterDock= 0;
ASPxClientDockManager.prototype.BeforeFloat= 0;
ASPxClientDockManager.prototype.AfterFloat= 0;
ASPxClientDockManager.prototype.StartPanelDragging= 0;
ASPxClientDockManager.prototype.EndPanelDragging= 0;
ASPxClientDockManager.prototype.PanelClosing= 0;
ASPxClientDockManager.prototype.PanelCloseUp= 0;
ASPxClientDockManager.prototype.PanelPopUp= 0;
ASPxClientDockManager.prototype.PanelShown= 0;
ASPxClientDockManager.prototype.PanelResize= 0;
ASPxClientDockManager.prototype.Init= 0;
ASPxClientDockManager.prototype.GetZoneByUID = function(zoneUID) {
    ///<summary>
    ///Returns a zone specified by its unique identifier (zoneUID).
    ///</summary>
    ///<param name = "zoneUID">
    ///A string value specifying the unique identifier of the zone.
    ///</param>
    ///<returns type = "ASPxClientDockZone">
    ///An <A HREF="clsDevExpressWebASPxDockingScriptsASPxClientDockZonetopic.htm">ASPxClientDockZone</A> object that is the zone with the specified unique identifier.
    ///</returns>
};
ASPxClientDockManager.prototype.GetPanelByUID = function(panelUID) {
    ///<summary>
    ///Returns a panel specified by its unique identifier (panelUID).
    ///</summary>
    ///<param name = "panelUID">
    ///A string value specifying the unique identifier of the panel.
    ///</param>
    ///<returns type = "ASPxClientDockPanel">
    ///An <A HREF="clsDevExpressWebASPxDockingScriptsASPxClientDockPaneltopic.htm">ASPxClientDockPanel</A> object that is the panel with the specified unique identifier.
    ///</returns>
};
ASPxClientDockManager.prototype.GetPanels = function() {
    ///<summary>
    ///Returns an array of panels contained in a page.
    ///</summary>
    ///<returns type = "ASPxClientDockPanel[]">
    ///An array of ASPxClientDockPanel objects that are the panels contained in a page.
    ///</returns>
};
ASPxClientDockManager.prototype.GetPanels = function(filterPredicate) {
    ///<summary>
    ///Returns an array of panels that are contained in a page and meet a specified criteria.
    ///</summary>
    ///<param name = "filterPredicate">
    ///An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a panel meets those criteria.
    ///</param>
    ///<returns type = "ASPxClientDockPanel[]">
    ///An array of ASPxClientDockPanel objects.
    ///</returns>
};
ASPxClientDockManager.prototype.GetZones = function() {
    ///<summary>
    ///Returns an array of zones contained in a page.
    ///</summary>
    ///<returns type = "ASPxClientDockZone[]">
    ///An array of ASPxClientDockZone objects that are the zones contained in a page.
    ///</returns>
};
ASPxClientDockManager.prototype.GetZones = function(filterPredicate) {
    ///<summary>
    ///Returns an array of zones that are contained in a page and meet a specified criteria.
    ///</summary>
    ///<param name = "filterPredicate">
    ///An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a zone meets those criteria.
    ///</param>
    ///<returns type = "ASPxClientDockZone[]">
    ///An array of ASPxClientDockZone objects.
    ///</returns>
};
ASPxClientDockManager.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDockManager.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDockManager.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManager.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManager.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManager.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDockManager.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDockManager.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManager.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDockManager.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManager.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDockManagerProcessingModeCancelEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the BeforeDock event.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the dock manager object which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientDockManagerProcessingModeCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManagerProcessingModeCancelEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientDockManagerProcessingModeCancelEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManagerProcessingModeCancelEventArgs.prototype.panel= 0;
ASPxClientDockManagerProcessingModeCancelEventArgs.prototype.zone= 0;
ASPxClientDockManagerProcessingModeCancelEventArgs.prototype.cancel= 0;
ASPxClientDockManagerProcessingModeCancelEventArgs.prototype.processOnServer= 0;
ASPxClientDockManagerProcessingModeEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the AfterDock event.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the dock manager object which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientDockManagerProcessingModeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManagerProcessingModeEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientDockManagerProcessingModeEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManagerProcessingModeEventArgs.prototype.panel= 0;
ASPxClientDockManagerProcessingModeEventArgs.prototype.zone= 0;
ASPxClientDockManagerProcessingModeEventArgs.prototype.processOnServer= 0;
ASPxClientDockManagerEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle client-side events concerning manipulations with panels.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the dock manager object which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientDockManagerEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManagerEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientDockManagerEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManagerEventArgs.prototype.panel= 0;
ASPxClientDockManagerCancelEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the PanelClosing event.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the dock manager object which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientDockManagerCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManagerCancelEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientDockManagerCancelEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManagerCancelEventArgs.prototype.panel= 0;
ASPxClientDockManagerCancelEventArgs.prototype.cancel= 0;
ASPxClientPopupControlBase.prototype.name= 0;
ASPxClientPopupControlBase.prototype.BeforeResizing= 0;
ASPxClientPopupControlBase.prototype.AfterResizing= 0;
ASPxClientPopupControlBase.prototype.BeginCallback= 0;
ASPxClientPopupControlBase.prototype.EndCallback= 0;
ASPxClientPopupControlBase.prototype.CallbackError= 0;
ASPxClientPopupControlBase.prototype.CloseUp= 0;
ASPxClientPopupControlBase.prototype.Closing= 0;
ASPxClientPopupControlBase.prototype.PopUp= 0;
ASPxClientPopupControlBase.prototype.Resize= 0;
ASPxClientPopupControlBase.prototype.Shown= 0;
ASPxClientPopupControlBase.prototype.Init= 0;
ASPxClientPopupControlBase.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a control's window size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.BringToFront = function() {
    ///<summary>
    ///Brings the window to the front of the z-order.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that specifies the contents of the control's window.
    ///</summary>
    ///<returns>
    ///A string that specifies the window's HTML content.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetContentIFrame = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns>
    ///The iframe object that contains a web page displayed within the control.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetContentIFrameWindow = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns>
    ///The iframe object that contains a web page displayed within the control's window.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetContentUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the web page displayed within the control's window.
    ///</summary>
    ///<returns>
    ///A string value that is the URL to the web page displayed within the control's window.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetFooterImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window footer by default.
    ///</summary>
    ///<returns>
    ///A string value that is the URL for the image displayed within the window footer.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetFooterNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<returns>
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetFooterText = function() {
    ///<summary>
    ///Returns the text displayed within a window's footer.
    ///</summary>
    ///<returns>
    ///A string value that specifies a window's footer text.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetHeaderImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window header.
    ///</summary>
    ///<returns>
    ///A string value that is the URL to the image displayed within the header.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetHeaderNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<returns>
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetHeaderText = function() {
    ///<summary>
    ///Returns the text displayed within a window's header.
    ///</summary>
    ///<returns>
    ///A string value that specifies a window's header text.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side WindowCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that is any information that needs to be sent to the server-side WindowCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.RefreshContentUrl = function() {
    ///<summary>
    ///Refreshes the content of the web page displayed within the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML markup specifying the contents of the control's window.
    ///</summary>
    ///<param name = "html">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetContentUrl = function(url) {
    ///<summary>
    ///Sets the URL to point to the web page that should be loaded into, and displayed within the control's window.
    ///</summary>
    ///<param name = "url">
    ///A string value specifying the URL to the web page displayed within the control's window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetFooterImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window footer by default.
    ///</summary>
    ///<param name = "value">
    ///A string value that is the URL for the image displayed within the window footer.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetFooterNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<param name = "value">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetFooterText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's footer.
    ///</summary>
    ///<param name = "value">
    ///A string value that specifies a window's footer text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetHeaderImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window header.
    ///</summary>
    ///<param name = "value">
    ///A string value that is the URL to the image displayed within the header.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetHeaderNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<param name = "value">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetHeaderText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's header.
    ///</summary>
    ///<param name = "value">
    ///A string value that specifies a window's header text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.Show = function() {
    ///<summary>
    ///Invokes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.ShowAtElement = function(htmlElement) {
    ///<summary>
    ///Invokes the control's window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement">
    ///An object specifying the HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.ShowAtElementByID = function(id) {
    ///<summary>
    ///Invokes the control's window and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "id">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.ShowAtPos = function(x, y) {
    ///<summary>
    ///Invokes the control's window at the specified position.
    ///</summary>
    ///<param name = "x">
    ///A integer value specifying the x-coordinate of the window's display position.
    ///</param>
    ///<param name = "y">
    ///A integer value specifying the y-coordinate of the window's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.Hide = function() {
    ///<summary>
    ///Closes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.IsVisible = function() {
    ///<summary>
    ///Returns a value that specifies whether the control's window is displayed.
    ///</summary>
    ///<returns>
    ///true if the window is displayed; otherwise, false.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDockPanel.prototype.panelUID= 0;
ASPxClientDockPanel.prototype.name= 0;
ASPxClientDockPanel.prototype.BeforeDock= 0;
ASPxClientDockPanel.prototype.AfterDock= 0;
ASPxClientDockPanel.prototype.BeforeFloat= 0;
ASPxClientDockPanel.prototype.AfterFloat= 0;
ASPxClientDockPanel.prototype.StartDragging= 0;
ASPxClientDockPanel.prototype.EndDragging= 0;
ASPxClientDockPanel.prototype.BeforeResizing= 0;
ASPxClientDockPanel.prototype.AfterResizing= 0;
ASPxClientDockPanel.prototype.BeginCallback= 0;
ASPxClientDockPanel.prototype.EndCallback= 0;
ASPxClientDockPanel.prototype.CallbackError= 0;
ASPxClientDockPanel.prototype.CloseUp= 0;
ASPxClientDockPanel.prototype.Closing= 0;
ASPxClientDockPanel.prototype.PopUp= 0;
ASPxClientDockPanel.prototype.Resize= 0;
ASPxClientDockPanel.prototype.Shown= 0;
ASPxClientDockPanel.prototype.Init= 0;
ASPxClientDockPanel.prototype.GetOwnerZone = function() {
    ///<summary>
    ///Retrieves a zone that owns the current panel.
    ///</summary>
    ///<returns type = "ASPxClientDockZone">
    ///A <A HREF="clsDevExpressWebASPxDockingScriptsASPxClientDockZonetopic.htm">ASPxClientDockZone</A> object that is the owner of the current panel.
    ///</returns>
};
ASPxClientDockPanel.prototype.Dock = function(zone) {
    ///<summary>
    ///Docks the current panel in the specified zone.
    ///</summary>
    ///<param name = "zone">
    ///An ASPxClientDockZone object specifying the zone.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.Dock = function(zone, visibleIndex) {
    ///<summary>
    ///Docks the current panel in a zone at the specified position.
    ///</summary>
    ///<param name = "zone">
    ///An ASPxClientDockZone object specifying the zone, where the panel is docked
    ///</param>
    ///<param name = "visibleIndex">
    ///An integer value specifying the visible index position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.MakeFloat = function() {
    ///<summary>
    ///Undocks the current panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.MakeFloat = function(x, y) {
    ///<summary>
    ///Undocks the current panel and place it at the specified position.
    ///</summary>
    ///<param name = "x">
    ///An integer value that specifies the X-coordinate of the panel's display position.
    ///</param>
    ///<param name = "y">
    ///An integer value that specifies the Y-coordinate of the panel's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.GetVisibleIndex = function() {
    ///<summary>
    ///Gets or sets a value specifying the position of the current panel, amongst the visible panels within a zone.
    ///</summary>
    ///<returns>
    ///An integer value specifying the zero-based index of the panel amongst visible panels in the zone.
    ///</returns>
};
ASPxClientDockPanel.prototype.SetVisibleIndex = function(visibleIndex) {
    ///<summary>
    ///Sets a value specifying the position of the current panel, amongst the visible panels in a zone.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value specifying the zero-based index of the panel amongst visible panels in the zone.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.IsDocked = function() {
    ///<summary>
    ///Returns a value indicating whether the panel is docked.
    ///</summary>
    ///<returns>
    ///true if the panel is docked; otherwise, false.
    ///</returns>
};
ASPxClientDockPanel.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a control's window size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.BringToFront = function() {
    ///<summary>
    ///Brings the window to the front of the z-order.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that specifies the contents of the control's window.
    ///</summary>
    ///<returns>
    ///A string that specifies the window's HTML content.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetContentIFrame = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns>
    ///The iframe object that contains a web page displayed within the control.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetContentIFrameWindow = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns>
    ///The iframe object that contains a web page displayed within the control's window.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetContentUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the web page displayed within the control's window.
    ///</summary>
    ///<returns>
    ///A string value that is the URL to the web page displayed within the control's window.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetFooterImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window footer by default.
    ///</summary>
    ///<returns>
    ///A string value that is the URL for the image displayed within the window footer.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetFooterNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<returns>
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetFooterText = function() {
    ///<summary>
    ///Returns the text displayed within a window's footer.
    ///</summary>
    ///<returns>
    ///A string value that specifies a window's footer text.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetHeaderImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window header.
    ///</summary>
    ///<returns>
    ///A string value that is the URL to the image displayed within the header.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetHeaderNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<returns>
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetHeaderText = function() {
    ///<summary>
    ///Returns the text displayed within a window's header.
    ///</summary>
    ///<returns>
    ///A string value that specifies a window's header text.
    ///</returns>
};
ASPxClientDockPanel.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side WindowCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that is any information that needs to be sent to the server-side WindowCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.RefreshContentUrl = function() {
    ///<summary>
    ///Refreshes the content of the web page displayed within the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML markup specifying the contents of the control's window.
    ///</summary>
    ///<param name = "html">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetContentUrl = function(url) {
    ///<summary>
    ///Sets the URL to point to the web page that should be loaded into, and displayed within the control's window.
    ///</summary>
    ///<param name = "url">
    ///A string value specifying the URL to the web page displayed within the control's window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetFooterImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window footer by default.
    ///</summary>
    ///<param name = "value">
    ///A string value that is the URL for the image displayed within the window footer.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetFooterNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<param name = "value">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetFooterText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's footer.
    ///</summary>
    ///<param name = "value">
    ///A string value that specifies a window's footer text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetHeaderImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window header.
    ///</summary>
    ///<param name = "value">
    ///A string value that is the URL to the image displayed within the header.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetHeaderNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<param name = "value">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetHeaderText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's header.
    ///</summary>
    ///<param name = "value">
    ///A string value that specifies a window's header text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.Show = function() {
    ///<summary>
    ///Invokes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.ShowAtElement = function(htmlElement) {
    ///<summary>
    ///Invokes the control's window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement">
    ///An object specifying the HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.ShowAtElementByID = function(id) {
    ///<summary>
    ///Invokes the control's window and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "id">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.ShowAtPos = function(x, y) {
    ///<summary>
    ///Invokes the control's window at the specified position.
    ///</summary>
    ///<param name = "x">
    ///A integer value specifying the x-coordinate of the window's display position.
    ///</param>
    ///<param name = "y">
    ///A integer value specifying the y-coordinate of the window's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.Hide = function() {
    ///<summary>
    ///Closes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.IsVisible = function() {
    ///<summary>
    ///Returns a value that specifies whether the control's window is displayed.
    ///</summary>
    ///<returns>
    ///true if the window is displayed; otherwise, false.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDockPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDockPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDockPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDockPanelProcessingModeCancelEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the BeforeDock event.
    ///</summary>
    ///<param name = "source">
    ///A ASPxClientDockPanel object that raised the event.
    ///</param>
    ///<param name = "e">
    ///A ASPxClientDockPanelProcessingModeCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanelProcessingModeCancelEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientDockPanelProcessingModeCancelEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanelProcessingModeCancelEventArgs.prototype.zone= 0;
ASPxClientDockPanelProcessingModeCancelEventArgs.prototype.cancel= 0;
ASPxClientDockPanelProcessingModeCancelEventArgs.prototype.processOnServer= 0;
ASPxClientDockPanelProcessingModeEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the AfterFloat event.
    ///</summary>
    ///<param name = "source">
    ///A ASPxClientDockPanel object that raised the event.
    ///</param>
    ///<param name = "e">
    ///A ASPxClientDockPanelProcessingModeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanelProcessingModeEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientDockPanelProcessingModeEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanelProcessingModeEventArgs.prototype.zone= 0;
ASPxClientDockPanelProcessingModeEventArgs.prototype.processOnServer= 0;
ASPxClientDockZone.prototype.zoneUID= 0;
ASPxClientDockZone.prototype.name= 0;
ASPxClientDockZone.prototype.BeforeDock= 0;
ASPxClientDockZone.prototype.AfterDock= 0;
ASPxClientDockZone.prototype.Init= 0;
ASPxClientDockZone.prototype.IsVertical = function() {
    ///<summary>
    ///Returns a value that indicates the orientation in which panels are stacked in the current zone.
    ///</summary>
    ///<returns>
    ///true if panels are stacked vertically within the zone; false, if panels are stacked horizontally.
    ///</returns>
};
ASPxClientDockZone.prototype.GetAllowGrowing = function() {
    ///<summary>
    ///Gets a value that indicates whether the zone can enlarge its size.
    ///</summary>
    ///<returns>
    ///true if the zone can enlarge its size; otherwise, false.
    ///</returns>
};
ASPxClientDockZone.prototype.GetPanelCount = function() {
    ///<summary>
    ///Gets the number of panels contained in the zone.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of panels contained within the zone.
    ///</returns>
};
ASPxClientDockZone.prototype.GetPanelByUID = function(panelUID) {
    ///<summary>
    ///Returns a panel specified by its unique identifier (panelUID).
    ///</summary>
    ///<param name = "panelUID">
    ///A string value specifying the unique identifier of the panel.
    ///</param>
    ///<returns type = "ASPxClientDockPanel">
    ///An <A HREF="clsDevExpressWebASPxDockingScriptsASPxClientDockPaneltopic.htm">ASPxClientDockPanel</A> object that is the panel with the specified unique identifier.
    ///</returns>
};
ASPxClientDockZone.prototype.GetPanelByVisibleIndex = function(visibleIndex) {
    ///<summary>
    ///Returns a panel specified by its visible index.
    ///</summary>
    ///<param name = "visibleIndex">
    ///An integer value specifying the panel's position among the visible panels within the current zone.
    ///</param>
    ///<returns type = "ASPxClientDockPanel">
    ///An <A HREF="clsDevExpressWebASPxDockingScriptsASPxClientDockPaneltopic.htm">ASPxClientDockPanel</A> object that is the panel with the specified visible index.
    ///</returns>
};
ASPxClientDockZone.prototype.GetPanels = function() {
    ///<summary>
    ///Returns an array of panels docked in the current zone.
    ///</summary>
    ///<returns type = "ASPxClientDockPanel[]">
    ///An array of ASPxClientDockPanel objects that are the panels docked in the zone.
    ///</returns>
};
ASPxClientDockZone.prototype.GetPanels = function(filterPredicate) {
    ///<summary>
    ///Returns an array of panels that are docked in the current zone and meet a specified criteria.
    ///</summary>
    ///<param name = "filterPredicate">
    ///An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a panel meets those criteria.
    ///</param>
    ///<returns type = "ASPxClientDockPanel[]">
    ///An array of ASPxClientDockPanel objects.
    ///</returns>
};
ASPxClientDockZone.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDockZone.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDockZone.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZone.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZone.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZone.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDockZone.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDockZone.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZone.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDockZone.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZone.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDockZoneCancelEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the BeforeDock event.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the zone object which raised the event.
    ///</param>
    ///<param name = "e">
    ///A ASPxClientDockZoneCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZoneCancelEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientDockZoneCancelEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZoneCancelEventArgs.prototype.panel= 0;
ASPxClientDockZoneCancelEventArgs.prototype.cancel= 0;
ASPxClientDockZoneCancelEventArgs.prototype.processOnServer= 0;
ASPxClientDockZoneProcessingModeEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the AfterDock event.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the zone object which raised the event.
    ///</param>
    ///<param name = "e">
    ///An  ASPxClientDockZoneProcessingModeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZoneProcessingModeEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientDockZoneProcessingModeEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZoneProcessingModeEventArgs.prototype.panel= 0;
ASPxClientDockZoneProcessingModeEventArgs.prototype.processOnServer= 0;
ASPxClientFileManager.prototype.name= 0;
ASPxClientFileManager.prototype.BeginCallback= 0;
ASPxClientFileManager.prototype.EndCallback= 0;
ASPxClientFileManager.prototype.CallbackError= 0;
ASPxClientFileManager.prototype.SelectedFileChanged= 0;
ASPxClientFileManager.prototype.SelectedFileOpened= 0;
ASPxClientFileManager.prototype.FolderCreating= 0;
ASPxClientFileManager.prototype.FolderCreated= 0;
ASPxClientFileManager.prototype.ItemRenaming= 0;
ASPxClientFileManager.prototype.ItemRenamed= 0;
ASPxClientFileManager.prototype.ItemDeleting= 0;
ASPxClientFileManager.prototype.ItemDeleted= 0;
ASPxClientFileManager.prototype.ItemMoving= 0;
ASPxClientFileManager.prototype.ItemMoved= 0;
ASPxClientFileManager.prototype.ErrorOccurred= 0;
ASPxClientFileManager.prototype.FileUploading= 0;
ASPxClientFileManager.prototype.FileUploaded= 0;
ASPxClientFileManager.prototype.FileDownloading= 0;
ASPxClientFileManager.prototype.Init= 0;
ASPxClientFileManager.prototype.Refresh = function() {
    ///<summary>
    ///Client-side scripting method which initiates a round trip to the server, so that the current page will be reloaded.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManager.prototype.GetSelectedFile = function() {
    ///<summary>
    ///Returns the selected file within the ASPxFileManager control's file container.
    ///</summary>
    ///<returns type = "ASPxClientFileManagerFile">
    ///An ASPxClientFileManagerFile object, that is the selected file, or null if no file is selected.
    ///</returns>
};
ASPxClientFileManager.prototype.GetCurrentFolderPath = function() {
    ///<summary>
    ///Gets the current folder's path.
    ///</summary>
    ///<returns>
    ///A String value that represents the path to the folder.
    ///</returns>
};
ASPxClientFileManager.prototype.GetCurrentFolderPath = function(separator) {
    ///<summary>
    ///Gets the current folder's path with the specified separator.
    ///</summary>
    ///<param name = "separator">
    ///A string value that specifies the separator between the folder's name within a path.
    ///</param>
    ///<returns>
    ///A string value that represents the path to the folder.
    ///</returns>
};
ASPxClientFileManager.prototype.GetCurrentFolderPath = function(separator, skipRootFolder) {
    ///<summary>
    ///Gets the current folder's path with the specified settings.
    ///</summary>
    ///<param name = "separator">
    ///A string value that specifies the separator between the folder's name within the path.
    ///</param>
    ///<param name = "skipRootFolder">
    ///true to skip the root folder; otherwise, false.
    ///</param>
    ///<returns>
    ///A string value that represents the path to the folder.
    ///</returns>
};
ASPxClientFileManager.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientFileManager.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientFileManager.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManager.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManager.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManager.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientFileManager.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientFileManager.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManager.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientFileManager.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManager.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientFileManagerFile.prototype.name= 0;
ASPxClientFileManagerFile.prototype.Download = function() {
    ///<summary>
    ///Downloads a file from a file manager.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFile.prototype.GetFullName = function() {
    ///<summary>
    ///Gets the current file's full name.
    ///</summary>
    ///<returns>
    ///A string value that represents the full name of a file.
    ///</returns>
};
ASPxClientFileManagerFile.prototype.GetFullName = function(separator) {
    ///<summary>
    ///Gets the current file's full name with the specified separator.
    ///</summary>
    ///<param name = "separator">
    ///A string value that specifies the separator between the folder's name within file's full name.
    ///</param>
    ///<returns>
    ///A string value that represents the full name of a file.
    ///</returns>
};
ASPxClientFileManagerFile.prototype.GetFullName = function(separator, skipRootFolder) {
    ///<summary>
    ///Gets the current file's full name with the specified settings.
    ///</summary>
    ///<param name = "separator">
    ///A string value that specifies the separator between the folder's name within file's full name.
    ///</param>
    ///<param name = "skipRootFolder">
    ///true to skip the root folder; otherwise, false.
    ///</param>
    ///<returns>
    ///A string value that represents the full name of a file.
    ///</returns>
};
ASPxClientFileManagerFileEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the SelectedFileOpened events.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientFileManagerFileEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFileEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientFileManagerFileEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFileEventArgs.prototype.file= 0;
ASPxClientFileManagerFileOpenedEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the SelectedFileOpened event.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the file manager object which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientFileManagerFileOpenedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFileOpenedEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientFileManagerFileOpenedEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFileOpenedEventArgs.prototype.processOnServer= 0;
ASPxClientFileManagerFileOpenedEventArgs.prototype.file= 0;
ASPxClientFileManagerActionEventArgsBase.prototype.fullName= 0;
ASPxClientFileManagerActionEventArgsBase.prototype.name= 0;
ASPxClientFileManagerActionEventArgsBase.prototype.isFolder= 0;
ASPxClientFileManagerEditingEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the cancelable client events concerning manipulations with an item.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientFileManagerEditingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerEditingEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientFileManagerEditingEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerEditingEventArgs.prototype.cancel= 0;
ASPxClientFileManagerEditingEventArgs.prototype.fullName= 0;
ASPxClientFileManagerEditingEventArgs.prototype.name= 0;
ASPxClientFileManagerEditingEventArgs.prototype.isFolder= 0;
ASPxClientFileManagerRenameEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client ItemRenamed event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientFileManagerRenameEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerRenameEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientFileManagerRenameEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerRenameEventArgs.prototype.oldName= 0;
ASPxClientFileManagerRenameEventArgs.prototype.fullName= 0;
ASPxClientFileManagerRenameEventArgs.prototype.name= 0;
ASPxClientFileManagerRenameEventArgs.prototype.isFolder= 0;
ASPxClientFileManagerDeleteEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client ItemDeleted event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientFileManagerDeleteEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerDeleteEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientFileManagerDeleteEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerDeleteEventArgs.prototype.fullName= 0;
ASPxClientFileManagerDeleteEventArgs.prototype.name= 0;
ASPxClientFileManagerDeleteEventArgs.prototype.isFolder= 0;
ASPxClientFileManagerMoveEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client ItemMoved event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientFileManagerMoveEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerMoveEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientFileManagerMoveEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerMoveEventArgs.prototype.oldFolderFullName= 0;
ASPxClientFileManagerMoveEventArgs.prototype.fullName= 0;
ASPxClientFileManagerMoveEventArgs.prototype.name= 0;
ASPxClientFileManagerMoveEventArgs.prototype.isFolder= 0;
ASPxClientFileManagerCreateEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client FolderCreated event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientFileManagerCreateEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerCreateEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientFileManagerCreateEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerCreateEventArgs.prototype.fullName= 0;
ASPxClientFileManagerCreateEventArgs.prototype.name= 0;
ASPxClientFileManagerCreateEventArgs.prototype.isFolder= 0;
ASPxClientFileManagerErrorEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client ErrorOccurred event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientFileManagerErrorEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerErrorEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientFileManagerErrorEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerErrorEventArgs.prototype.commandName= 0;
ASPxClientFileManagerErrorEventArgs.prototype.errorText= 0;
ASPxClientFileManagerErrorEventArgs.prototype.showAlert= 0;
ASPxClientFileManagerErrorEventArgs.prototype.errorCode= 0;
ASPxClientFileManagerUploadEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client FileUploading event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientFileManagerUploadEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerUploadEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientFileManagerUploadEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerUploadEventArgs.prototype.folder= 0;
ASPxClientFileManagerUploadEventArgs.prototype.fileName= 0;
ASPxClientFileManagerUploadEventArgs.prototype.cancel= 0;
ASPxClientFileManagerUploadedEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the FileUploaded event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e">
    ///A ASPxClientFileManagerUploadedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerUploadedEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientFileManagerUploadedEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerUploadedEventArgs.prototype.folder= 0;
ASPxClientFileManagerUploadedEventArgs.prototype.fileName= 0;
ASPxClientFileManagerDownloadingEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the FileDownloading event.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the file manager object which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientFileManagerDownloadingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerDownloadingEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientFileManagerDownloadingEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerDownloadingEventArgs.prototype.cancel= 0;
ASPxClientFileManagerDownloadingEventArgs.prototype.file= 0;
ASPxClientGlobalEvents.prototype.ControlsInitialized= 0;
ASPxClientGlobalEvents.prototype.BeginCallback= 0;
ASPxClientGlobalEvents.prototype.EndCallback= 0;
ASPxClientGlobalEvents.prototype.CallbackError= 0;
ASPxClientGlobalEvents.prototype.ValidationCompleted= 0;
ASPxClientValidationCompletedEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the ValidationCompleted event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source. Identifies the ASPxClientGlobalEvents object that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientValidationCompletedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationCompletedEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientValidationCompletedEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationCompletedEventArgs.prototype.container= 0;
ASPxClientValidationCompletedEventArgs.prototype.validationGroup= 0;
ASPxClientValidationCompletedEventArgs.prototype.invisibleControlsValidated= 0;
ASPxClientValidationCompletedEventArgs.prototype.isValid= 0;
ASPxClientValidationCompletedEventArgs.prototype.firstInvalidControl= 0;
ASPxClientValidationCompletedEventArgs.prototype.firstVisibleInvalidControl= 0;
ASPxClientHiddenField.prototype.name= 0;
ASPxClientHiddenField.prototype.Init= 0;
ASPxClientHiddenField.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.Add = function(propertyName, propertyValue) {
    ///<summary>
    ///Adds a new value to the control's collection of property name/value pairs, on the client side.
    ///</summary>
    ///<param name = "propertyName">
    ///A string value that specifies the property name. It can contain letters, digits, underline characters, and dollar signs. It cannot begin with a digit character.
    ///</param>
    ///<param name = "propertyValue">
    ///An object that represents the value of the specified property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.Get = function(propertyName) {
    ///<summary>
    ///Returns the value with the specified property name.
    ///</summary>
    ///<param name = "propertyName">
    ///A string value that specifies the property name.
    ///</param>
    ///<returns>
    ///An object that represents the value of the specified property.
    ///</returns>
};
ASPxClientHiddenField.prototype.Set = function(propertyName, propertyValue) {
    ///<summary>
    ///Adds a new value to the control's collection of property name/value pairs, on the client side.
    ///</summary>
    ///<param name = "propertyName">
    ///A string value that specifies the property name. It can contain letters, digits, underline characters, and dollar signs. It cannot begin with a digit character.
    ///</param>
    ///<param name = "propertyValue">
    ///An object that represents the property value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.Remove = function(propertyName) {
    ///<summary>
    ///Removes the specified value from the ASPxHiddenField collection.
    ///</summary>
    ///<param name = "propertyName">
    ///A string value representing the property name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.Clear = function() {
    ///<summary>
    ///Clears the ASPxHiddenField's value collection.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.Contains = function(propertyName) {
    ///<summary>
    ///Returns a value indicating whether the value with the specified property name is contained within the ASPxHiddenField control's value collection.
    ///</summary>
    ///<param name = "propertyName">
    ///A string value that specifies the property name.
    ///</param>
    ///<returns>
    ///true if this value is contained within the collection; otherwise, false.
    ///</returns>
};
ASPxClientHiddenField.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientHiddenField.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientHiddenField.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientHiddenField.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientHiddenField.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientHiddenField.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientLoadingPanel.prototype.name= 0;
ASPxClientLoadingPanel.prototype.Init= 0;
ASPxClientLoadingPanel.prototype.Show = function() {
    ///<summary>
    ///Invokes the loading panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.ShowInElement = function(htmlElement) {
    ///<summary>
    ///Invokes the loading panel, displaying it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement">
    ///An object that specifies the required HTML element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.ShowInElementByID = function(id) {
    ///<summary>
    ///Invokes the loading panel, displaying it over the specified element.
    ///</summary>
    ///<param name = "id">
    ///A string that specifies the required element's identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.ShowAtPos = function(x, y) {
    ///<summary>
    ///Invokes the loading panel at the specified position.
    ///</summary>
    ///<param name = "x">
    ///An integer value specifying the x-coordinate of the loading panel's display position.
    ///</param>
    ///<param name = "y">
    ///An integer value specifying the y-coordinate of the loaidng panel's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the ASPxLoadingPanel.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the ASPxLoadingPanel.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.GetText = function() {
    ///<summary>
    ///Gets the text displayed within the ASPxLoadingPanel.
    ///</summary>
    ///<returns>
    ///A string value representing the text displayed within the control.
    ///</returns>
};
ASPxClientLoadingPanel.prototype.Hide = function() {
    ///<summary>
    ///Hides the loading panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientLoadingPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientLoadingPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientLoadingPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientLoadingPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientLoadingPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientMenuBase.prototype.name= 0;
ASPxClientMenuBase.prototype.ItemClick= 0;
ASPxClientMenuBase.prototype.ItemMouseOver= 0;
ASPxClientMenuBase.prototype.ItemMouseOut= 0;
ASPxClientMenuBase.prototype.PopUp= 0;
ASPxClientMenuBase.prototype.CloseUp= 0;
ASPxClientMenuBase.prototype.Init= 0;
ASPxClientMenuBase.prototype.GetItemCount = function() {
    ///<summary>
    ///Returns the number of menu items at the root menu level.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of the root menu items.
    ///</returns>
};
ASPxClientMenuBase.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the menu's root menu item specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the root menu item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An Items collection.
    ///</returns>
};
ASPxClientMenuBase.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns a menu item specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the menu item.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the menu item with the specified name.
    ///</returns>
};
ASPxClientMenuBase.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the selected item within the menu control.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the selected menu item.
    ///</returns>
};
ASPxClientMenuBase.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Selects the specified menu item within a menu control on the client side.
    ///</summary>
    ///<param name = "item">
    ///An ASPxClientMenuItem object specifying the menu item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuBase.prototype.GetRootItem = function() {
    ///<summary>
    ///Returns a root menu item.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object representing a root menu item.
    ///</returns>
};
ASPxClientMenuBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientMenuBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientMenuBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientMenuBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientMenuBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientMenuBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientMenuCollection.prototype.ControlsInitialized= 0;
ASPxClientMenuCollection.prototype.HideAll = function() {
    ///<summary>
    ///Hides all menus maitained by the collection.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuCollection.prototype.Get = function(name) {
    ///<summary>
    ///Returns a collection item identified by its unique hierarchically-qualified identifier.
    ///</summary>
    ///<param name = "name">
    ///A string value representing the hierarchically-qualified identifier of the required control.
    ///</param>
    ///<returns>
    ///An object representing the collection item found.
    ///</returns>
};
ASPxClientMenuCollection.prototype.GetByName = function(name) {
    ///<summary>
    ///Returns a DevExpress client control object identified by its unique hierarchically-qualified identifier (either ClientInstanceName or ClientID property value).
    ///</summary>
    ///<param name = "name">
    ///A string value that is the hierarchically-qualified identifier of the required DevExpress control.
    ///</param>
    ///<returns>
    ///An object that is the client control object found.
    ///</returns>
};
ASPxClientMenuItem.prototype.menu= 0;
ASPxClientMenuItem.prototype.parent= 0;
ASPxClientMenuItem.prototype.index= 0;
ASPxClientMenuItem.prototype.name= 0;
ASPxClientMenuItem.prototype.GetItemCount = function() {
    ///<summary>
    ///Returns the number of the current menu item's immediate child items.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of the immediate subitems of the current menu item.
    ///</returns>
};
ASPxClientMenuItem.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the current menu item's immediate subitem specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the submenu item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An Items collection.
    ///</returns>
};
ASPxClientMenuItem.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns the current menu item's subitem specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the menu item.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the current menu item's subitem with the specified name.
    ///</returns>
};
ASPxClientMenuItem.prototype.GetChecked = function() {
    ///<summary>
    ///Indicates whether the menu item is checked.
    ///</summary>
    ///<returns>
    ///true if the menu item is checked; otherwise, false.
    ///</returns>
};
ASPxClientMenuItem.prototype.SetChecked = function(value) {
    ///<summary>
    ///Specifies whether the menu item is checked.
    ///</summary>
    ///<param name = "value">
    ///true if the menu item is checked; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItem.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a menu item is enabled.
    ///</summary>
    ///<returns>
    ///true if the menu item is enabled; otherwise, false.
    ///</returns>
};
ASPxClientMenuItem.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether the menu item is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the menu item; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItem.prototype.GetImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the menu item.
    ///</summary>
    ///<returns>
    ///A string value that is the URL to the image displayed within the menu item.
    ///</returns>
};
ASPxClientMenuItem.prototype.SetImageUrl = function(value) {
    ///<summary>
    ///Sets the URL which points to the image displayed within the menu item.
    ///</summary>
    ///<param name = "value">
    ///A string value specifying the URL to the image displayed within the menu item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItem.prototype.GetNavigateUrl = function() {
    ///<summary>
    ///Gets a URL which defines the navigation location for the menu item.
    ///</summary>
    ///<returns>
    ///A string value which represents a URL to where the client web browser will navigate when the menu item is clicked.
    ///</returns>
};
ASPxClientMenuItem.prototype.SetNavigateUrl = function(value) {
    ///<summary>
    ///Specifies a URL which defines the navigation location for the menu item.
    ///</summary>
    ///<param name = "value">
    ///A string value which specifies a URL to where the client web browser will navigate when the menu item is clicked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItem.prototype.GetText = function() {
    ///<summary>
    ///Returns text displayed within the menu item.
    ///</summary>
    ///<returns>
    ///A string value representing the text displayed within the menu item.
    ///</returns>
};
ASPxClientMenuItem.prototype.SetText = function(value) {
    ///<summary>
    ///Sets the text to be displayed within the menu item.
    ///</summary>
    ///<param name = "value">
    ///A string value specifying the text to be displayed within the menu item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItem.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a menu item is displayed.
    ///</summary>
    ///<returns>
    ///true if the menu item is visible; otherwise, false.
    ///</returns>
};
ASPxClientMenuItem.prototype.SetVisible = function(value) {
    ///<summary>
    ///Specifies the menu item's visibility.
    ///</summary>
    ///<param name = "value">
    ///true if the menu item is visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.name= 0;
ASPxClientMenu.prototype.ItemClick= 0;
ASPxClientMenu.prototype.ItemMouseOver= 0;
ASPxClientMenu.prototype.ItemMouseOut= 0;
ASPxClientMenu.prototype.PopUp= 0;
ASPxClientMenu.prototype.CloseUp= 0;
ASPxClientMenu.prototype.Init= 0;
ASPxClientMenu.prototype.GetItemCount = function() {
    ///<summary>
    ///Returns the number of menu items at the root menu level.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of the root menu items.
    ///</returns>
};
ASPxClientMenu.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the menu's root menu item specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the root menu item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An Items collection.
    ///</returns>
};
ASPxClientMenu.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns a menu item specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the menu item.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the menu item with the specified name.
    ///</returns>
};
ASPxClientMenu.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the selected item within the menu control.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the selected menu item.
    ///</returns>
};
ASPxClientMenu.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Selects the specified menu item within a menu control on the client side.
    ///</summary>
    ///<param name = "item">
    ///An ASPxClientMenuItem object specifying the menu item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.GetRootItem = function() {
    ///<summary>
    ///Returns a root menu item.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object representing a root menu item.
    ///</returns>
};
ASPxClientMenu.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientMenu.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientMenu.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientMenu.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientMenu.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientMenu.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientMenuItemEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the menu's client events concerning manipulations with an item.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the menu object which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientMenuItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItemEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientMenuItemEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItemEventArgs.prototype.item= 0;
ASPxClientMenuItemMouseEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the ItemMouseOver events.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e">
    ///A MenuItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItemMouseEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientMenuItemMouseEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItemMouseEventArgs.prototype.htmlElement= 0;
ASPxClientMenuItemMouseEventArgs.prototype.item= 0;
ASPxClientMenuItemClickEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle client ItemClick events.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e">
    ///A MenuItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItemClickEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientMenuItemClickEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItemClickEventArgs.prototype.item= 0;
ASPxClientMenuItemClickEventArgs.prototype.htmlElement= 0;
ASPxClientMenuItemClickEventArgs.prototype.htmlEvent= 0;
ASPxClientMenuItemClickEventArgs.prototype.processOnServer= 0;
ASPxClientNavBar.prototype.name= 0;
ASPxClientNavBar.prototype.ItemClick= 0;
ASPxClientNavBar.prototype.ExpandedChanged= 0;
ASPxClientNavBar.prototype.ExpandedChanging= 0;
ASPxClientNavBar.prototype.HeaderClick= 0;
ASPxClientNavBar.prototype.BeginCallback= 0;
ASPxClientNavBar.prototype.EndCallback= 0;
ASPxClientNavBar.prototype.CallbackError= 0;
ASPxClientNavBar.prototype.Init= 0;
ASPxClientNavBar.prototype.GetGroupCount = function() {
    ///<summary>
    ///Returns the number of groups in the navbar.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of groups in the navbar.
    ///</returns>
};
ASPxClientNavBar.prototype.GetGroup = function(index) {
    ///<summary>
    ///Returns a group specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the group object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientNavBarGroup">
    ///An Groups collection.
    ///</returns>
};
ASPxClientNavBar.prototype.GetGroupByName = function(name) {
    ///<summary>
    ///Returns a group specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the group.
    ///</param>
    ///<returns type = "ASPxClientNavBarGroup">
    ///An ASPxClientNavBarGroup object that represents the group with the specified name.
    ///</returns>
};
ASPxClientNavBar.prototype.GetActiveGroup = function() {
    ///<summary>
    ///Returns the navbar's active group.
    ///</summary>
    ///<returns type = "ASPxClientNavBarGroup">
    ///A ASPxClientNavBarGroup object that represents the active group.
    ///</returns>
};
ASPxClientNavBar.prototype.SetActiveGroup = function(group) {
    ///<summary>
    ///Makes the specified group active.
    ///</summary>
    ///<param name = "group">
    ///A ASPxClientNavBarGroup object that specifies the active group.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns an item specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the item.
    ///</param>
    ///<returns type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object that represents the item with the specified name.
    ///</returns>
};
ASPxClientNavBar.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the selected item within the navbar control.
    ///</summary>
    ///<returns type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object that represents the selected item.
    ///</returns>
};
ASPxClientNavBar.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Selects the specified item within the navbar control on the client side.
    ///</summary>
    ///<param name = "item">
    ///An ASPxClientNavBarItem object specifying the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all groups of the navbar.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all groups of the navbar.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientNavBar.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientNavBar.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientNavBar.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientNavBar.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientNavBar.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientNavBarGroup.prototype.navBar= 0;
ASPxClientNavBarGroup.prototype.index= 0;
ASPxClientNavBarGroup.prototype.name= 0;
ASPxClientNavBarGroup.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a group is enabled.
    ///</summary>
    ///<returns>
    ///true if the group is enabled; otherwise, false.
    ///</returns>
};
ASPxClientNavBarGroup.prototype.GetExpanded = function() {
    ///<summary>
    ///Returns a value specifying whether the group is expanded.
    ///</summary>
    ///<returns>
    ///true if the group is expanded; otherwise, false.
    ///</returns>
};
ASPxClientNavBarGroup.prototype.SetExpanded = function(value) {
    ///<summary>
    ///Sets the group's expansion state.
    ///</summary>
    ///<param name = "value">
    ///true to expand the group; false to collapse the group.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarGroup.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a group is displayed.
    ///</summary>
    ///<returns>
    ///true is the group is visible; otherwise, false.
    ///</returns>
};
ASPxClientNavBarGroup.prototype.SetVisible = function(value) {
    ///<summary>
    ///Specifies whether the group is visible.
    ///</summary>
    ///<param name = "value">
    ///true if the group is visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarGroup.prototype.GetItemCount = function() {
    ///<summary>
    ///Returns the number of items in the group.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of items in the group.
    ///</returns>
};
ASPxClientNavBarGroup.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the group's item specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object representing the item located at the specified index within the current group.
    ///</returns>
};
ASPxClientNavBarGroup.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns a group item specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the item.
    ///</param>
    ///<returns type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object that represents the item with the specified name.
    ///</returns>
};
ASPxClientNavBarItem.prototype.navBar= 0;
ASPxClientNavBarItem.prototype.group= 0;
ASPxClientNavBarItem.prototype.index= 0;
ASPxClientNavBarItem.prototype.name= 0;
ASPxClientNavBarItem.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an item is enabled.
    ///</summary>
    ///<returns>
    ///true if an item is enabled; otherwise, false.
    ///</returns>
};
ASPxClientNavBarItem.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether the item is enabled.
    ///</summary>
    ///<param name = "value">
    ///true if the item is enabled; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarItem.prototype.GetImageUrl = function() {
    ///<summary>
    ///Returns the URL which points to the image displayed within the item.
    ///</summary>
    ///<returns>
    ///A string value that specifies the URL to the image displayed within the item.
    ///</returns>
};
ASPxClientNavBarItem.prototype.SetImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the item.
    ///</summary>
    ///<param name = "value">
    ///A string value that specifies the URL to the image displayed within the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarItem.prototype.GetNavigateUrl = function() {
    ///<summary>
    ///Gets an URL which defines the item's navigation location.
    ///</summary>
    ///<returns>
    ///A string value which represents the URL to where the client web browser will navigate when the item is clicked.
    ///</returns>
};
ASPxClientNavBarItem.prototype.SetNavigateUrl = function(value) {
    ///<summary>
    ///Specifies an URL which defines the item's navigation location.
    ///</summary>
    ///<param name = "value">
    ///A string value which represents the URL to where the client web browser will navigate when the item is clicked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarItem.prototype.GetText = function() {
    ///<summary>
    ///Returns text displayed within the item.
    ///</summary>
    ///<returns>
    ///A string value that represents the text displayed within the item.
    ///</returns>
};
ASPxClientNavBarItem.prototype.SetText = function(value) {
    ///<summary>
    ///Specifies the text displayed within the item.
    ///</summary>
    ///<param name = "value">
    ///A string value that represents the text displayed within the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarItem.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether an item is displayed.
    ///</summary>
    ///<returns>
    ///true is the item is visible; otherwise, false.
    ///</returns>
};
ASPxClientNavBarItem.prototype.SetVisible = function(value) {
    ///<summary>
    ///Specifies whether the item is visible.
    ///</summary>
    ///<param name = "value">
    ///true is the item is visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarItemEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the navbar's client events concerning manipulations with an item.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source. Identifies the navbar object that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientNavBarItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarItemEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientNavBarItemEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarItemEventArgs.prototype.item= 0;
ASPxClientNavBarItemEventArgs.prototype.htmlElement= 0;
ASPxClientNavBarItemEventArgs.prototype.htmlEvent= 0;
ASPxClientNavBarItemEventArgs.prototype.processOnServer= 0;
ASPxClientNavBarGroupEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the navbar's client events concerning manipulations with a group.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source. Identifies the navbar object that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientNavBarGroupEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarGroupEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientNavBarGroupEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarGroupEventArgs.prototype.group= 0;
ASPxClientNavBarGroupCancelEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the navbar's cancelable client events concerning manipulations with a group.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source. Identifies the navbar object that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientNavBarGroupCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarGroupCancelEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientNavBarGroupCancelEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarGroupCancelEventArgs.prototype.group= 0;
ASPxClientNavBarGroupCancelEventArgs.prototype.cancel= 0;
ASPxClientNavBarGroupCancelEventArgs.prototype.processOnServer= 0;
ASPxClientNavBarGroupClickEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the navbar's client events concerning clicks on groups.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the navbar object which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientNavBarGroupClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarGroupClickEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientNavBarGroupClickEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarGroupClickEventArgs.prototype.htmlElement= 0;
ASPxClientNavBarGroupClickEventArgs.prototype.htmlEvent= 0;
ASPxClientNavBarGroupClickEventArgs.prototype.group= 0;
ASPxClientNavBarGroupClickEventArgs.prototype.cancel= 0;
ASPxClientNavBarGroupClickEventArgs.prototype.processOnServer= 0;
ASPxClientNewsControl.prototype.name= 0;
ASPxClientNewsControl.prototype.TailClick= 0;
ASPxClientNewsControl.prototype.Init= 0;
ASPxClientNewsControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientNewsControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientNewsControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientNewsControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientNewsControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientNewsControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientNewsControlItemEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the news control's client events concerning manipulations with an item.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source. Identifies the news control object that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientNewsControlItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControlItemEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientNewsControlItemEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControlItemEventArgs.prototype.name= 0;
ASPxClientNewsControlItemEventArgs.prototype.htmlElement= 0;
ASPxClientNewsControlItemEventArgs.prototype.htmlEvent= 0;
ASPxClientNewsControlItemEventArgs.prototype.processOnServer= 0;
ASPxClientObjectContainer.prototype.name= 0;
ASPxClientObjectContainer.prototype.FlashScriptCommand= 0;
ASPxClientObjectContainer.prototype.Init= 0;
ASPxClientObjectContainer.prototype.Back = function() {
    ///<summary>
    ///Play the movie backwards.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.GetVariable = function(name) {
    ///<summary>
    ///Returns the value of the Flash variable specified.
    ///</summary>
    ///<param name = "name">
    ///A string value that specifies the Flash variable.
    ///</param>
    ///<returns>
    ///A string value that represents the Flash variable's value.
    ///</returns>
};
ASPxClientObjectContainer.prototype.Forward = function() {
    ///<summary>
    ///Play the movie forwards.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.GotoFrame = function(frameNumber) {
    ///<summary>
    ///Activates the specified frame in the movie.
    ///</summary>
    ///<param name = "frameNumber">
    ///An integer value that specifies the requested frame.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.IsPlaying = function() {
    ///<summary>
    ///Indicates whether the movie is currently playing.
    ///</summary>
    ///<returns>
    ///true if the movie is playing; otherwise, false.
    ///</returns>
};
ASPxClientObjectContainer.prototype.LoadMovie = function(layerNumber, url) {
    ///<summary>
    ///Loads the movie to the specified layer.
    ///</summary>
    ///<param name = "layerNumber">
    ///An integer value that identifies a layer in which to load the movie.
    ///</param>
    ///<param name = "url">
    ///A string value that specifies the movie's URL.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.Pan = function(x, y, mode) {
    ///<summary>
    ///Pans a zoomed-in movie to the specified coordinates.
    ///</summary>
    ///<param name = "x">
    ///An integer value that specifies the X-coordinate.
    ///</param>
    ///<param name = "y">
    ///An integer value that specifies the Y-coordinate.
    ///</param>
    ///<param name = "mode">
    ///0 the coordinates are pixels; 1 the coordinates are a percentage of the window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.PercentLoaded = function() {
    ///<summary>
    ///Returns the percent of the Flash Player movie that has streamed into the browser so far.
    ///</summary>
    ///<returns>
    ///An integer value that specifies the percent of the Flash Player movie that has streamed into the browser so far.
    ///</returns>
};
ASPxClientObjectContainer.prototype.Play = function() {
    ///<summary>
    ///Starts playing the movie.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.Rewind = function() {
    ///<summary>
    ///Rewinds the movie to the first frame.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.SetVariable = function(name, value) {
    ///<summary>
    ///Sets the value of the specified Flash variable.
    ///</summary>
    ///<param name = "name">
    ///A string value that specifies the Flash variable.
    ///</param>
    ///<param name = "value">
    ///A string value that represents a new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.SetZoomRect = function(left, top, right, bottom) {
    ///<summary>
    ///Zooms in on the specified rectangular area of the movie.
    ///</summary>
    ///<param name = "left">
    ///An integer value that specifies the x-coordinate of the rectangle's left side, in twips.
    ///</param>
    ///<param name = "top">
    ///An integer value that specifies the y-coordinate of the rectangle's top side, in twips.
    ///</param>
    ///<param name = "right">
    ///An integer value that specifies the x-coordinate of the rectangle's right side, in twips.
    ///</param>
    ///<param name = "bottom">
    ///An integer value that specifies the y-coordinate of the rectangle's bottom side, in twips.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.StopPlay = function() {
    ///<summary>
    ///Stops playing the Flash movie.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.TotalFrames = function() {
    ///<summary>
    ///Returns the total number of frames in the movie.
    ///</summary>
    ///<returns>
    ///An integer value that specifies the total number of frames in the movie.
    ///</returns>
};
ASPxClientObjectContainer.prototype.Zoom = function(percent) {
    ///<summary>
    ///Zooms the view by a relative scale factor.
    ///</summary>
    ///<param name = "percent">
    ///An integer value that specifies the relative scale factor, as a  percentage.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.QTPlay = function() {
    ///<summary>
    ///Starts playing a Quick Time movie.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.QTStopPlay = function() {
    ///<summary>
    ///Stops playing a Quick Time movie.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.QTRewind = function() {
    ///<summary>
    ///Rewinds a Quick Time movie to the first frame.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.QTStep = function(count) {
    ///<summary>
    ///Steps through a Quick Time video stream by a specified number of frames.
    ///</summary>
    ///<param name = "count">
    ///An integer value that specifies the number of frames to step.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientObjectContainer.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientObjectContainer.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientObjectContainer.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientObjectContainer.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientObjectContainer.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientFlashScriptCommandEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the FlashScriptCommand event.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///A ASPxClientFlashScriptCommandEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFlashScriptCommandEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientFlashScriptCommandEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFlashScriptCommandEventArgs.prototype.command= 0;
ASPxClientFlashScriptCommandEventArgs.prototype.args= 0;
ASPxClientPanel.prototype.name= 0;
ASPxClientPanel.prototype.Init= 0;
ASPxClientPanel.prototype.GetContentHTML = function() {
    ///<summary>
    ///Returns the HTML code that represents the panel's contents.
    ///</summary>
    ///<returns>
    ///A string that represents the panel's HTML content.
    ///</returns>
};
ASPxClientPanel.prototype.SetContentHTML = function(html) {
    ///<summary>
    ///Defines the panel's HTML content.
    ///</summary>
    ///<param name = "html">
    ///A string value that represents the HTML code defining the panel's content.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that represents the contents of the panel.
    ///</summary>
    ///<returns>
    ///A string that represents the panel's HTML content.
    ///</returns>
};
ASPxClientPanel.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Specifies the HTML markup that represents the panel's content.
    ///</summary>
    ///<param name = "html">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Sets a value specifying whether the panel is enabled.
    ///</summary>
    ///<param name = "enabled">
    ///true to make the panel enabled; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a panel is enabled.
    ///</summary>
    ///<returns>
    ///true if the panel is enabled; otherwise, false.
    ///</returns>
};
ASPxClientPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientPopupControl.prototype.name= 0;
ASPxClientPopupControl.prototype.CloseButtonClick= 0;
ASPxClientPopupControl.prototype.BeforeResizing= 0;
ASPxClientPopupControl.prototype.AfterResizing= 0;
ASPxClientPopupControl.prototype.BeginCallback= 0;
ASPxClientPopupControl.prototype.EndCallback= 0;
ASPxClientPopupControl.prototype.CallbackError= 0;
ASPxClientPopupControl.prototype.CloseUp= 0;
ASPxClientPopupControl.prototype.Closing= 0;
ASPxClientPopupControl.prototype.PopUp= 0;
ASPxClientPopupControl.prototype.Resize= 0;
ASPxClientPopupControl.prototype.Shown= 0;
ASPxClientPopupControl.prototype.Init= 0;
ASPxClientPopupControl.prototype.PerformWindowCallback = function(window, parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side WindowCallback event, passing it the related popup window object and the specified argument.
    ///</summary>
    ///<param name = "window">
    ///A ASPxClientPopupWindow object identifying the processed popup window.
    ///</param>
    ///<param name = "parameter">
    ///A string value specifying any information that needs to be sent to the server-side WindowCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetSize = function(width, height) {
    ///<summary>
    ///Specifies the default popup window's size.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the default popup window's width.
    ///</param>
    ///<param name = "height">
    ///An integer value that specifies the default popup window's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowHeight = function(window) {
    ///<summary>
    ///Returns the height of a specific popup window.
    ///</summary>
    ///<param name = "window">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns>
    ///An integer value that represents the specified popup window's height.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowWidth = function(window) {
    ///<summary>
    ///Returns the width of a specific popup window.
    ///</summary>
    ///<param name = "window">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns>
    ///An integer value that represents the specified popup window's width.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetWindowSize = function(window, width, height) {
    ///<summary>
    ///Specifies the size of a specific popup window.
    ///</summary>
    ///<param name = "window">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "width">
    ///An integer value that specifies the required popup window's width.
    ///</param>
    ///<param name = "height">
    ///An integer value that specifies the required popup window's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetContentHTML = function() {
    ///<summary>
    ///Returns the HTML code that is the content of the popup control's default popup window.
    ///</summary>
    ///<returns>
    ///A string that is the default popup window's HTML content.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetContentHTML = function(html) {
    ///<summary>
    ///Defines the HTML content for the popup control's default popup window.
    ///</summary>
    ///<param name = "html">
    ///A string value that is the HTML code defining the content of the popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetWindowPopupElementID = function(window, popupElementId) {
    ///<summary>
    ///Sets the ID of a web control or HTML element with which the current popup control's window is associated.
    ///</summary>
    ///<param name = "window">
    ///An ASPxClientPopupWindow object representing a popup control's window.
    ///</param>
    ///<param name = "popupElementId">
    ///A string value specifying the ID of the web control (or HTML element) with which the popup control's window is associated.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetPopupElementID = function(popupElementId) {
    ///<summary>
    ///Sets the ID of a web control or HTML element with which the current popup control is associated.
    ///</summary>
    ///<param name = "popupElementId">
    ///A string value specifying the ID of the web control (or HTML element) to which the popup control is associated.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.IsWindowVisible = function(window) {
    ///<summary>
    ///Returns a value that specifies whether the popup control's specific window is displayed.
    ///</summary>
    ///<param name = "window">
    ///A ASPxClientPopupWindow object representing the popup window whose visibility is checked.
    ///</param>
    ///<returns>
    ///true if the specified popup window is displayed; otherwise, false.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindow = function(index) {
    ///<summary>
    ///Returns a popup window specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the popup window object to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientPopupWindow">
    ///An Windows collection.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowByName = function(name) {
    ///<summary>
    ///Returns a popup window specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the popup window.
    ///</param>
    ///<returns type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that represents the popup window with the specified name.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowCount = function() {
    ///<summary>
    ///Returns the number of popup windows in the popup control.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of popup windows in the popup control.
    ///</returns>
};
ASPxClientPopupControl.prototype.ShowWindow = function(window) {
    ///<summary>
    ///Invokes the popup control's specific window.
    ///</summary>
    ///<param name = "window">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.ShowWindowAtElement = function(window, htmlElement) {
    ///<summary>
    ///Invokes the popup control's specific window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "window">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<param name = "htmlElement">
    ///An object specifying the HTML element relative to whose position the default popup window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.ShowWindowAtElementByID = function(window, id) {
    ///<summary>
    ///Invokes the popup control's specific window and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "window">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<param name = "id">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the default popup window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.ShowWindowAtPos = function(window, x, y) {
    ///<summary>
    ///Invokes the popup control's specific popup window at the specified position.
    ///</summary>
    ///<param name = "window">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<param name = "x">
    ///A integer value specifying the x-coordinate of the popup window's display position.
    ///</param>
    ///<param name = "y">
    ///A integer value specifying the y-coordinate of the popup window's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.BringWindowToFront = function(window) {
    ///<summary>
    ///Brings the specified popup window to the front of the z-order.
    ///</summary>
    ///<param name = "window">
    ///A ASPxClientPopupWindow object representing the popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.HideWindow = function(window) {
    ///<summary>
    ///Closes the popup control's specified window.
    ///</summary>
    ///<param name = "window">
    ///A ASPxClientPopupWindow object representing the popup window to close.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowContentHTML = function(window) {
    ///<summary>
    ///Returns the HTML code that represents the contents of the specified popup window within the popup control.
    ///</summary>
    ///<param name = "window">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns>
    ///A string that represents the specified popup window's HTML content.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetWindowContentHTML = function(window, html) {
    ///<summary>
    ///Defines the HTML content for a specific popup window within the popup control.
    ///</summary>
    ///<param name = "window">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "html">
    ///A string value that represents the HTML code defining the content of the specified popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowContentHtml = function(window) {
    ///<summary>
    ///Returns the HTML code that represents the contents of the specified popup window.
    ///</summary>
    ///<param name = "window">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns>
    ///A string that represents the specified popup window's HTML content.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetWindowContentHtml = function(window, html) {
    ///<summary>
    ///Defines the HTML content for a specific popup window within the popup control.
    ///</summary>
    ///<param name = "window">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "html">
    ///A string value that represents the HTML code defining the content of the specified popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowContentIFrame = function(window) {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the specified popup window's SetWindowContentUrl client method).
    ///</summary>
    ///<param name = "window">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<returns>
    ///The iframe object that contains a web page displayed within the specified popup window.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowContentUrl = function(window) {
    ///<summary>
    ///Returns the URL pointing to the web page displayed within the control's specific popup window.
    ///</summary>
    ///<param name = "window">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<returns>
    ///A string value representing the URL to the web page displayed within the specified popup window.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetWindowContentUrl = function(window, url) {
    ///<summary>
    ///Sets the URL pointing to the web page that should be loaded into and displayed within the control's specific popup window.
    ///</summary>
    ///<param name = "window">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<param name = "url">
    ///A string value specifying the URL to the web page to be displayed within the specified popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.RefreshWindowContentUrl = function(window) {
    ///<summary>
    ///Refreshes the content of the web page displayed within the control's specific popup window.
    ///</summary>
    ///<param name = "window">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.UpdatePosition = function() {
    ///<summary>
    ///Updates the default popup window's position, to correctly align it at either the specified element, or the center of the browser's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.UpdatePositionAtElement = function(htmlElement) {
    ///<summary>
    ///Updates the default popup window's position, to correctly align it at the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement">
    ///An object specifying the HTML element to which the default popup window is aligned using the PopupVerticalAlign properties.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.UpdateWindowPosition = function(window) {
    ///<summary>
    ///Updates the specified popup window's position, to correctly align it at either the specified element, or the center of the browser's window.
    ///</summary>
    ///<param name = "window">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.UpdateWindowPositionAtElement = function(window, htmlElement) {
    ///<summary>
    ///Updates the specified popup window's position, to correctly align it at the specified HTML element.
    ///</summary>
    ///<param name = "window">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "htmlElement">
    ///An object specifying the HTML element to which the specified popup window is aligned using the PopupVerticalAlign properties.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.RefreshPopupElementConnection = function() {
    ///<summary>
    ///Refreshes the connection between the ASPxPopupControl and the popup element.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a control's window size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.BringToFront = function() {
    ///<summary>
    ///Brings the window to the front of the z-order.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that specifies the contents of the control's window.
    ///</summary>
    ///<returns>
    ///A string that specifies the window's HTML content.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetContentIFrame = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns>
    ///The iframe object that contains a web page displayed within the control.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetContentIFrameWindow = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns>
    ///The iframe object that contains a web page displayed within the control's window.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetContentUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the web page displayed within the control's window.
    ///</summary>
    ///<returns>
    ///A string value that is the URL to the web page displayed within the control's window.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetFooterImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window footer by default.
    ///</summary>
    ///<returns>
    ///A string value that is the URL for the image displayed within the window footer.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetFooterNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<returns>
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetFooterText = function() {
    ///<summary>
    ///Returns the text displayed within a window's footer.
    ///</summary>
    ///<returns>
    ///A string value that specifies a window's footer text.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetHeaderImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window header.
    ///</summary>
    ///<returns>
    ///A string value that is the URL to the image displayed within the header.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetHeaderNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<returns>
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetHeaderText = function() {
    ///<summary>
    ///Returns the text displayed within a window's header.
    ///</summary>
    ///<returns>
    ///A string value that specifies a window's header text.
    ///</returns>
};
ASPxClientPopupControl.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side WindowCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter">
    ///A string value that is any information that needs to be sent to the server-side WindowCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.RefreshContentUrl = function() {
    ///<summary>
    ///Refreshes the content of the web page displayed within the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML markup specifying the contents of the control's window.
    ///</summary>
    ///<param name = "html">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetContentUrl = function(url) {
    ///<summary>
    ///Sets the URL to point to the web page that should be loaded into, and displayed within the control's window.
    ///</summary>
    ///<param name = "url">
    ///A string value specifying the URL to the web page displayed within the control's window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetFooterImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window footer by default.
    ///</summary>
    ///<param name = "value">
    ///A string value that is the URL for the image displayed within the window footer.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetFooterNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<param name = "value">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetFooterText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's footer.
    ///</summary>
    ///<param name = "value">
    ///A string value that specifies a window's footer text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetHeaderImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window header.
    ///</summary>
    ///<param name = "value">
    ///A string value that is the URL to the image displayed within the header.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetHeaderNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<param name = "value">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetHeaderText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's header.
    ///</summary>
    ///<param name = "value">
    ///A string value that specifies a window's header text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.Show = function() {
    ///<summary>
    ///Invokes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.ShowAtElement = function(htmlElement) {
    ///<summary>
    ///Invokes the control's window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement">
    ///An object specifying the HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.ShowAtElementByID = function(id) {
    ///<summary>
    ///Invokes the control's window and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "id">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.ShowAtPos = function(x, y) {
    ///<summary>
    ///Invokes the control's window at the specified position.
    ///</summary>
    ///<param name = "x">
    ///A integer value specifying the x-coordinate of the window's display position.
    ///</param>
    ///<param name = "y">
    ///A integer value specifying the y-coordinate of the window's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.Hide = function() {
    ///<summary>
    ///Closes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.IsVisible = function() {
    ///<summary>
    ///Returns a value that specifies whether the control's window is displayed.
    ///</summary>
    ///<returns>
    ///true if the window is displayed; otherwise, false.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientPopupControlCollection.prototype.ControlsInitialized= 0;
ASPxClientPopupControlCollection.prototype.HideAllWindows = function() {
    ///<summary>
    ///Hides all popup windows maintained by the collection.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlCollection.prototype.Get = function(name) {
    ///<summary>
    ///Returns a collection item identified by its unique hierarchically-qualified identifier.
    ///</summary>
    ///<param name = "name">
    ///A string value representing the hierarchically-qualified identifier of the required control.
    ///</param>
    ///<returns>
    ///An object representing the collection item found.
    ///</returns>
};
ASPxClientPopupControlCollection.prototype.GetByName = function(name) {
    ///<summary>
    ///Returns a DevExpress client control object identified by its unique hierarchically-qualified identifier (either ClientInstanceName or ClientID property value).
    ///</summary>
    ///<param name = "name">
    ///A string value that is the hierarchically-qualified identifier of the required DevExpress control.
    ///</param>
    ///<returns>
    ///An object that is the client control object found.
    ///</returns>
};
ASPxClientPopupWindow.prototype.popupControl= 0;
ASPxClientPopupWindow.prototype.index= 0;
ASPxClientPopupWindow.prototype.name= 0;
ASPxClientPopupWindow.prototype.GetHeaderImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window header.
    ///</summary>
    ///<returns>
    ///A string value that is the URL to the image displayed within the header.
    ///</returns>
};
ASPxClientPopupWindow.prototype.SetHeaderImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window header.
    ///</summary>
    ///<param name = "value">
    ///A string value that is the URL to the image displayed within the header.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindow.prototype.GetFooterImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window footer.
    ///</summary>
    ///<returns>
    ///A string value that is the URL to the image displayed within the window footer.
    ///</returns>
};
ASPxClientPopupWindow.prototype.SetFooterImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window footer.
    ///</summary>
    ///<param name = "value">
    ///A string value that is the URL to the image displayed within the window footer.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindow.prototype.GetHeaderNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within the popup window's header.
    ///</summary>
    ///<returns>
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientPopupWindow.prototype.SetHeaderNavigateUrl = function(value) {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within the popup window's header.
    ///</summary>
    ///<param name = "value">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindow.prototype.GetFooterNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within the popup window's footer.
    ///</summary>
    ///<returns>
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientPopupWindow.prototype.SetFooterNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within the popup window's footer.
    ///</summary>
    ///<param name = "value">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindow.prototype.GetHeaderText = function() {
    ///<summary>
    ///Returns the text displayed within the window's header.
    ///</summary>
    ///<returns>
    ///A string value that specifies the window's header text.
    ///</returns>
};
ASPxClientPopupWindow.prototype.SetHeaderText = function(value) {
    ///<summary>
    ///Specifies the text displayed within the window's header.
    ///</summary>
    ///<param name = "value">
    ///A string value that specifies the window's header text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindow.prototype.GetFooterText = function() {
    ///<summary>
    ///Returns the text displayed within the popup window's footer.
    ///</summary>
    ///<returns>
    ///A string value that specifies the window's footer text.
    ///</returns>
};
ASPxClientPopupWindow.prototype.SetFooterText = function(value) {
    ///<summary>
    ///Specifies the text displayed within the window's footer.
    ///</summary>
    ///<param name = "value">
    ///A string value that specifies the window's footer text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindowEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the popup control's client events when a popup window is manipulated.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source. Identifies the popup control object (ASPxClientPopupControl) that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientPopupWindowEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindowEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientPopupWindowEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindowEventArgs.prototype.window= 0;
ASPxClientPopupWindowCancelEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the popup window's cancelable client events.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source. Identifies the popup window object that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientPopupWindowCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindowCancelEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientPopupWindowCancelEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindowCancelEventArgs.prototype.window= 0;
ASPxClientPopupWindowCancelEventArgs.prototype.cancel= 0;
ASPxClientPopupMenu.prototype.name= 0;
ASPxClientPopupMenu.prototype.ItemClick= 0;
ASPxClientPopupMenu.prototype.ItemMouseOver= 0;
ASPxClientPopupMenu.prototype.ItemMouseOut= 0;
ASPxClientPopupMenu.prototype.PopUp= 0;
ASPxClientPopupMenu.prototype.CloseUp= 0;
ASPxClientPopupMenu.prototype.Init= 0;
ASPxClientPopupMenu.prototype.SetPopupElementID = function(popupElementId) {
    ///<summary>
    ///Sets the ID of a web control or HTML element with which the current popup menu is associated.
    ///</summary>
    ///<param name = "popupElementId">
    ///A string value specifying the ID of the web control (or HTML element) with which the popup menu is associated.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.RefreshPopupElementConnection = function() {
    ///<summary>
    ///Refreshes the connection between the ASPxPopupMenu and the popup element.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.Hide = function() {
    ///<summary>
    ///Hides the popup menu.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.Show = function() {
    ///<summary>
    ///Invokes the popup menu.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.ShowAtElement = function(htmlElement) {
    ///<summary>
    ///Invokes the popup menu and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement">
    ///An object specifying the HTML element relative to which position the popup menu is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.ShowAtElementByID = function(id) {
    ///<summary>
    ///Invokes the popup menu and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "id">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to which position the popup menu is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.ShowAtPos = function(x, y) {
    ///<summary>
    ///Invokes the popup menu at the specified position.
    ///</summary>
    ///<param name = "x">
    ///An integer value specifying the x-coordinate of the popup menu's display position.
    ///</param>
    ///<param name = "y">
    ///An integer value specifying the y-coordinate of the popup menu's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetItemCount = function() {
    ///<summary>
    ///Returns the number of menu items at the root menu level.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of the root menu items.
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the menu's root menu item specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the root menu item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An Items collection.
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns a menu item specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the menu item.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the menu item with the specified name.
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the selected item within the menu control.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the selected menu item.
    ///</returns>
};
ASPxClientPopupMenu.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Selects the specified menu item within a menu control on the client side.
    ///</summary>
    ///<param name = "item">
    ///An ASPxClientMenuItem object specifying the menu item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetRootItem = function() {
    ///<summary>
    ///Returns a root menu item.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object representing a root menu item.
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPopupMenu.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPopupMenu.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPopupMenu.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientRatingControl.prototype.name= 0;
ASPxClientRatingControl.prototype.ItemClick= 0;
ASPxClientRatingControl.prototype.ItemMouseOver= 0;
ASPxClientRatingControl.prototype.ItemMouseOut= 0;
ASPxClientRatingControl.prototype.Init= 0;
ASPxClientRatingControl.prototype.GetTitle = function(index) {
    ///<summary>
    ///Gets the item tooltip title specified by the item index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the item index.
    ///</param>
    ///<returns>
    ///A string that is the specified item tooltip title.
    ///</returns>
};
ASPxClientRatingControl.prototype.GetReadOnly = function() {
    ///<summary>
    ///Returns a value indicating whether the control's status is read-only.
    ///</summary>
    ///<returns>
    ///true if the status is read-only; otherwise, false.
    ///</returns>
};
ASPxClientRatingControl.prototype.SetReadOnly = function(value) {
    ///<summary>
    ///Specifies whether the control's status is read-only.
    ///</summary>
    ///<param name = "value">
    ///true to make the control read-only; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControl.prototype.GetValue = function() {
    ///<summary>
    ///Returns the value of the ASPxRatingControl.
    ///</summary>
    ///<returns>
    ///A decimal value representing the value of the control.
    ///</returns>
};
ASPxClientRatingControl.prototype.SetValue = function(value) {
    ///<summary>
    ///Modifies the value of the ASPxRatingControl on the client side.
    ///</summary>
    ///<param name = "value">
    ///A decimal value representing the value of the control.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRatingControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRatingControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRatingControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRatingControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRatingControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientRatingControlItemClickEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client ItemClick event.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e">
    ///A ASPxClientRatingControlItemClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControlItemClickEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientRatingControlItemClickEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControlItemClickEventArgs.prototype.index= 0;
ASPxClientRatingControlItemClickEventArgs.prototype.processOnServer= 0;
ASPxClientRatingControlItemMouseEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the ItemMouseOver events.
    ///</summary>
    ///<param name = "source">
    ///The event source.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientRatingControlItemMouseEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControlItemMouseEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientRatingControlItemMouseEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControlItemMouseEventArgs.prototype.index= 0;
ASPxClientRoundPanel.prototype.name= 0;
ASPxClientRoundPanel.prototype.Init= 0;
ASPxClientRoundPanel.prototype.GetHeaderText = function() {
    ///<summary>
    ///Returns the text displayed within the panel's header.
    ///</summary>
    ///<returns>
    ///A string value that specifies the panel's header text.
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetHeaderText = function(text) {
    ///<summary>
    ///Specifies the text displayed within the panel's header.
    ///</summary>
    ///<param name = "text">
    ///A string value that specifies the panel's header text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetContentHTML = function() {
    ///<summary>
    ///Returns the HTML code that represents the panel's contents.
    ///</summary>
    ///<returns>
    ///A string that represents the panel's HTML content.
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetContentHTML = function(html) {
    ///<summary>
    ///Defines the panel's HTML content.
    ///</summary>
    ///<param name = "html">
    ///A string value that represents the HTML code defining the panel's content.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that represents the contents of the panel.
    ///</summary>
    ///<returns>
    ///A string that represents the panel's HTML content.
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Specifies the HTML markup that represents the panel's content.
    ///</summary>
    ///<param name = "html">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Sets a value specifying whether the panel is enabled.
    ///</summary>
    ///<param name = "enabled">
    ///true to make the panel enabled; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a panel is enabled.
    ///</summary>
    ///<returns>
    ///true if the panel is enabled; otherwise, false.
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientSplitter.prototype.name= 0;
ASPxClientSplitter.prototype.PaneResizing= 0;
ASPxClientSplitter.prototype.PaneResized= 0;
ASPxClientSplitter.prototype.PaneCollapsing= 0;
ASPxClientSplitter.prototype.PaneCollapsed= 0;
ASPxClientSplitter.prototype.PaneExpanding= 0;
ASPxClientSplitter.prototype.PaneExpanded= 0;
ASPxClientSplitter.prototype.PaneResizeCompleted= 0;
ASPxClientSplitter.prototype.PaneContentUrlLoaded= 0;
ASPxClientSplitter.prototype.Init= 0;
ASPxClientSplitter.prototype.GetPaneCount = function() {
    ///<summary>
    ///Returns the number of panes at the root level of a splitter.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of panes at the root level of the splitter control.
    ///</returns>
};
ASPxClientSplitter.prototype.GetPane = function(index) {
    ///<summary>
    ///Returns the splitter's root pane specified by its index within the Panes collection.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the root pane to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientSplitterPane">
    ///An Panes collection.
    ///</returns>
};
ASPxClientSplitter.prototype.GetPaneByName = function(name) {
    ///<summary>
    ///Returns a pane specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the pane.
    ///</param>
    ///<returns type = "ASPxClientSplitterPane">
    ///An ASPxClientSplitterPane object that represents the pane with the specified name.
    ///</returns>
};
ASPxClientSplitter.prototype.SetAllowResize = function(allowResize) {
    ///<summary>
    ///Specifies whether the control's panes can be resized by end-users on the client side.
    ///</summary>
    ///<param name = "allowResize">
    ///true if pane resizing is allowed; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitter.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientSplitter.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientSplitter.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitter.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitter.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitter.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientSplitter.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientSplitter.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitter.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientSplitter.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitter.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.index= 0;
ASPxClientSplitterPane.prototype.name= 0;
ASPxClientSplitterPane.prototype.GetSplitter = function() {
    ///<summary>
    ///Returns a client splitter object that contains the current pane.
    ///</summary>
    ///<returns type = "ASPxClientSplitter">
    ///A ASPxClientSplitter object to which the current pane belongs.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetParentPane = function() {
    ///<summary>
    ///Returns the immediate parent of the current pane.
    ///</summary>
    ///<returns type = "ASPxClientSplitterPane">
    ///A ASPxClientSplitterPane that represents the immediate parent pane of the current pane; otherwise, a null reference (Nothing in Visual Basic), if no parent pane exists.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetPrevPane = function() {
    ///<summary>
    ///Returns the previous sibling pane of the current pane.
    ///</summary>
    ///<returns type = "ASPxClientSplitterPane">
    ///A ASPxClientSplitterPane object that represents the previous pane.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetNextPane = function() {
    ///<summary>
    ///Returns the next sibling pane of the current pane.
    ///</summary>
    ///<returns type = "ASPxClientSplitterPane">
    ///A SplitterPaneCollection.
    ///</returns>
};
ASPxClientSplitterPane.prototype.IsFirstPane = function() {
    ///<summary>
    ///Determines whether the current pane is the first pane within the SplitterPaneCollection.
    ///</summary>
    ///<returns>
    ///true if the pane is the first within the collection; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.IsLastPane = function() {
    ///<summary>
    ///Determines whether the current pane is the last pane within the SplitterPaneCollection.
    ///</summary>
    ///<returns>
    ///true if the pane is the last within the collection; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.IsVertical = function() {
    ///<summary>
    ///Returns a value that indicates the orientation in which the current pane and its sibling panes are stacked.
    ///</summary>
    ///<returns>
    ///true if panes are stacked vertically within their container (a splitter control or a parent pane); false, if panes are stacked horizontally.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetPaneCount = function() {
    ///<summary>
    ///Returns the number of the current pane's immediate child panes.
    ///</summary>
    ///<returns>
    ///An integer value representing the number of the immediate child panes of the current pane.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetPane = function(index) {
    ///<summary>
    ///Returns the current pane's immediate child pane specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the child pane to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientSplitterPane">
    ///An Panes collection.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetPaneByName = function(name) {
    ///<summary>
    ///Returns the current pane's child pane specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the pane.
    ///</param>
    ///<returns type = "ASPxClientSplitterPane">
    ///An ASPxClientSplitterPane object that represents the current pane's child pane with the specified name.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetClientWidth = function() {
    ///<summary>
    ///Gets the width of the pane's content area.
    ///</summary>
    ///<returns>
    ///An integer value representing the width of the splitter's pane content area.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetClientHeight = function() {
    ///<summary>
    ///Gets the height of the pane's content area.
    ///</summary>
    ///<returns>
    ///An integer value representing the height of the pane's content area.
    ///</returns>
};
ASPxClientSplitterPane.prototype.Collapse = function(maximizedPane) {
    ///<summary>
    ///Collapses the current pane and occupies its space by maximizing the specified pane.
    ///</summary>
    ///<param name = "maximizedPane">
    ///A ASPxClientSplitterPane object specifying the pane to be maximized to occupy the freed space.
    ///</param>
    ///<returns>
    ///true if the current pane has been collapsed successfully; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.CollapseForward = function() {
    ///<summary>
    ///Collapses the current pane in a forward direction and occupies its space by maximizing the previous adjacent pane.
    ///</summary>
    ///<returns>
    ///true if the current pane has been collapsed successfully; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.CollapseBackward = function() {
    ///<summary>
    ///Collapses the current pane in a backward direction, and occupies its space by maximizing the next adjacent pane.
    ///</summary>
    ///<returns>
    ///true if the current pane has been collapsed successfully; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.Expand = function() {
    ///<summary>
    ///Expands the current pane object on the client side.
    ///</summary>
    ///<returns>
    ///true if the current pane has been expanded successfully; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.IsCollapsed = function() {
    ///<summary>
    ///Returns whether the pane is collapsed.
    ///</summary>
    ///<returns>
    ///true if the pane is collapsed; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.IsContentUrlPane = function() {
    ///<summary>
    ///Returns whether the pane's content is loaded from an external web page.
    ///</summary>
    ///<returns>
    ///true if the pane's content is loaded from an external web page; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetContentUrl = function() {
    ///<summary>
    ///Gets the URL of a web page displayed as a pane's content.
    ///</summary>
    ///<returns>
    ///A string value specifying the URL to the web page displayed within the current pane.
    ///</returns>
};
ASPxClientSplitterPane.prototype.SetContentUrl = function(url) {
    ///<summary>
    ///Sets the URL to point to a web page that should be loaded into, and displayed within the current pane.
    ///</summary>
    ///<param name = "url">
    ///A string value specifying the URL to a web page displayed within the pane.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPane.prototype.SetContentUrl = function(url, preventBrowserCaching) {
    ///<summary>
    ///Sets the URL to point to a web page that should be loaded into, and displayed within the current pane, but should not be cached by a client browser.
    ///</summary>
    ///<param name = "url">
    ///A string value specifying the URL to a web page displayed within the pane.
    ///</param>
    ///<param name = "preventBrowserCaching">
    ///true to prevent the browser to cache the loaded content; false to allow browser caching.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPane.prototype.RefreshContentUrl = function() {
    ///<summary>
    ///Refreshes the content of the web page displayed within the current pane.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetContentIFrame = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the pane's SetContentUrl client method).
    ///</summary>
    ///<returns>
    ///The iframe object that contains a web page displayed within the pane.
    ///</returns>
};
ASPxClientSplitterPane.prototype.SetAllowResize = function(allowResize) {
    ///<summary>
    ///Specifies whether the current pane can be resized by end-users on the client side.
    ///</summary>
    ///<param name = "allowResize">
    ///true if pane resizing is allowed; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPane.prototype.RaiseResizedEvent = function() {
    ///<summary>
    ///Forces the client PaneResized event to be generated.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetElement = function() {
    ///<summary>
    ///Returns an HTML element representing a splitter pane object.
    ///</summary>
    ///<returns>
    ///The HTML element representing a splitter pane object.
    ///</returns>
};
ASPxClientSplitterPane.prototype.SetSize = function(size) {
    ///<summary>
    ///Specifies the splitter pane's size in pixels.
    ///</summary>
    ///<param name = "size">
    ///An integer value that specifies the splitter pane's size.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPane.prototype.SetSize = function(size) {
    ///<summary>
    ///Specifies the splitter pane's size, in pixels or percents.
    ///</summary>
    ///<param name = "size">
    ///A string value that specifies the splitter pane's size, in pixels or percents.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetSize = function() {
    ///<summary>
    ///Returns the splitter pane's size, in pixels or percents.
    ///</summary>
    ///<returns>
    ///A string specifying the splitter pane's size, in pixels or percents.
    ///</returns>
};
ASPxClientSplitterPaneEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the splitter's client events concerning pane manipulations.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source. Identifies the splitter object that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientSplitterPaneEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPaneEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientSplitterPaneEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPaneEventArgs.prototype.pane= 0;
ASPxClientSplitterPaneCancelEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle a splitter control's cancelable client events concerning pane manipulations.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source. Identifies the splitter control object that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientSplitterPaneCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPaneCancelEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientSplitterPaneCancelEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPaneCancelEventArgs.prototype.cancel= 0;
ASPxClientSplitterPaneCancelEventArgs.prototype.pane= 0;
ASPxClientTabControlBase.prototype.name= 0;
ASPxClientTabControlBase.prototype.TabClick= 0;
ASPxClientTabControlBase.prototype.ActiveTabChanged= 0;
ASPxClientTabControlBase.prototype.ActiveTabChanging= 0;
ASPxClientTabControlBase.prototype.BeginCallback= 0;
ASPxClientTabControlBase.prototype.EndCallback= 0;
ASPxClientTabControlBase.prototype.CallbackError= 0;
ASPxClientTabControlBase.prototype.Init= 0;
ASPxClientTabControlBase.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a tab page's size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetActiveTab = function() {
    ///<summary>
    ///Returns the active tab within the tab control.
    ///</summary>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the active tab.
    ///</returns>
};
ASPxClientTabControlBase.prototype.SetActiveTab = function(tab) {
    ///<summary>
    ///Makes the specified tab active within the tab control on the client side.
    ///</summary>
    ///<param name = "tab">
    ///An ASPxClientTab object specifying the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetActiveTabIndex = function() {
    ///<summary>
    ///Returns the index of the active tab within the tab control.
    ///</summary>
    ///<returns>
    ///An integer that represents the active tab's index.
    ///</returns>
};
ASPxClientTabControlBase.prototype.SetActiveTabIndex = function(index) {
    ///<summary>
    ///Makes a tab active within the tab control, specifying the tab's index.
    ///</summary>
    ///<param name = "index">
    ///An integer valie specifying the index of the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetTabCount = function() {
    ///<summary>
    ///Returns the number of tabs in the ASPxTabControl.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of tabs in the control.
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetTab = function(index) {
    ///<summary>
    ///Returns a tab specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the tab object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An Tabs collection.
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetTabByName = function(name) {
    ///<summary>
    ///Returns a tab specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the tab.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the tab with the specified name.
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTabControlBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTabControlBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTabControlBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTabControl.prototype.name= 0;
ASPxClientTabControl.prototype.TabClick= 0;
ASPxClientTabControl.prototype.ActiveTabChanged= 0;
ASPxClientTabControl.prototype.ActiveTabChanging= 0;
ASPxClientTabControl.prototype.BeginCallback= 0;
ASPxClientTabControl.prototype.EndCallback= 0;
ASPxClientTabControl.prototype.CallbackError= 0;
ASPxClientTabControl.prototype.Init= 0;
ASPxClientTabControl.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a tab page's size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.GetActiveTab = function() {
    ///<summary>
    ///Returns the active tab within the tab control.
    ///</summary>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the active tab.
    ///</returns>
};
ASPxClientTabControl.prototype.SetActiveTab = function(tab) {
    ///<summary>
    ///Makes the specified tab active within the tab control on the client side.
    ///</summary>
    ///<param name = "tab">
    ///An ASPxClientTab object specifying the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.GetActiveTabIndex = function() {
    ///<summary>
    ///Returns the index of the active tab within the tab control.
    ///</summary>
    ///<returns>
    ///An integer that represents the active tab's index.
    ///</returns>
};
ASPxClientTabControl.prototype.SetActiveTabIndex = function(index) {
    ///<summary>
    ///Makes a tab active within the tab control, specifying the tab's index.
    ///</summary>
    ///<param name = "index">
    ///An integer valie specifying the index of the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.GetTabCount = function() {
    ///<summary>
    ///Returns the number of tabs in the ASPxTabControl.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of tabs in the control.
    ///</returns>
};
ASPxClientTabControl.prototype.GetTab = function(index) {
    ///<summary>
    ///Returns a tab specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the tab object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An Tabs collection.
    ///</returns>
};
ASPxClientTabControl.prototype.GetTabByName = function(name) {
    ///<summary>
    ///Returns a tab specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the tab.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the tab with the specified name.
    ///</returns>
};
ASPxClientTabControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTabControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTabControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTabControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTabControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTabControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientPageControl.prototype.name= 0;
ASPxClientPageControl.prototype.TabClick= 0;
ASPxClientPageControl.prototype.ActiveTabChanged= 0;
ASPxClientPageControl.prototype.ActiveTabChanging= 0;
ASPxClientPageControl.prototype.BeginCallback= 0;
ASPxClientPageControl.prototype.EndCallback= 0;
ASPxClientPageControl.prototype.CallbackError= 0;
ASPxClientPageControl.prototype.Init= 0;
ASPxClientPageControl.prototype.GetTabContentHTML = function(tab) {
    ///<summary>
    ///Returns the HTML code that represents the contents of the specified page within the page control.
    ///</summary>
    ///<param name = "tab">
    ///An ASPxClientTab object that specifies the required page.
    ///</param>
    ///<returns>
    ///A string that represents the specified page's HTML content.
    ///</returns>
};
ASPxClientPageControl.prototype.SetTabContentHTML = function(tab, html) {
    ///<summary>
    ///Defines the HTML content for a specific tab page within the page control.
    ///</summary>
    ///<param name = "tab">
    ///An ASPxClientTab object that specifies the required tab page.
    ///</param>
    ///<param name = "html">
    ///A string value that represents the HTML code defining the content of the specified page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a tab page's size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.GetActiveTab = function() {
    ///<summary>
    ///Returns the active tab within the tab control.
    ///</summary>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the active tab.
    ///</returns>
};
ASPxClientPageControl.prototype.SetActiveTab = function(tab) {
    ///<summary>
    ///Makes the specified tab active within the tab control on the client side.
    ///</summary>
    ///<param name = "tab">
    ///An ASPxClientTab object specifying the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.GetActiveTabIndex = function() {
    ///<summary>
    ///Returns the index of the active tab within the tab control.
    ///</summary>
    ///<returns>
    ///An integer that represents the active tab's index.
    ///</returns>
};
ASPxClientPageControl.prototype.SetActiveTabIndex = function(index) {
    ///<summary>
    ///Makes a tab active within the tab control, specifying the tab's index.
    ///</summary>
    ///<param name = "index">
    ///An integer valie specifying the index of the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.GetTabCount = function() {
    ///<summary>
    ///Returns the number of tabs in the ASPxTabControl.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of tabs in the control.
    ///</returns>
};
ASPxClientPageControl.prototype.GetTab = function(index) {
    ///<summary>
    ///Returns a tab specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the tab object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An Tabs collection.
    ///</returns>
};
ASPxClientPageControl.prototype.GetTabByName = function(name) {
    ///<summary>
    ///Returns a tab specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the tab.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the tab with the specified name.
    ///</returns>
};
ASPxClientPageControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPageControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPageControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPageControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPageControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPageControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTab.prototype.tabControl= 0;
ASPxClientTab.prototype.index= 0;
ASPxClientTab.prototype.name= 0;
ASPxClientTab.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a tab is enabled.
    ///</summary>
    ///<returns>
    ///true if the tab is enabled; otherwise, false.
    ///</returns>
};
ASPxClientTab.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether the tab is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to enable the tab; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTab.prototype.GetImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the tab.
    ///</summary>
    ///<returns>
    ///A string value that is the URL to the image displayed within the tab.
    ///</returns>
};
ASPxClientTab.prototype.SetImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the tab.
    ///</summary>
    ///<param name = "value">
    ///A string value that is the URL to the image displayed within the tab.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTab.prototype.GetActiveImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the active tab.
    ///</summary>
    ///<returns>
    ///A string value that is the URL to the image displayed within the active tab.
    ///</returns>
};
ASPxClientTab.prototype.SetActiveImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the active tab.
    ///</summary>
    ///<param name = "value">
    ///A string value that is the URL to the image displayed within the active tab.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTab.prototype.GetNavigateUrl = function() {
    ///<summary>
    ///Gets an URL which defines the navigation location for the tab.
    ///</summary>
    ///<returns>
    ///A string value which represents an URL to where the client web browser will navigate when the tab is clicked.
    ///</returns>
};
ASPxClientTab.prototype.SetNavigateUrl = function(value) {
    ///<summary>
    ///Specifies a URL which defines the navigation location for the tab.
    ///</summary>
    ///<param name = "value">
    ///A string value which represents a URL to where the client web browser will navigate when the tab is clicked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTab.prototype.GetText = function() {
    ///<summary>
    ///Returns text displayed within the tab.
    ///</summary>
    ///<returns>
    ///A string value that represents the text displayed within the tab.
    ///</returns>
};
ASPxClientTab.prototype.SetText = function(value) {
    ///<summary>
    ///Specifies the text displayed within the tab.
    ///</summary>
    ///<param name = "value">
    ///A string value that represents the text displayed within the tab.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTab.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a tab is displayed.
    ///</summary>
    ///<returns>
    ///true is the tab is visible; otherwise, false.
    ///</returns>
};
ASPxClientTab.prototype.SetVisible = function(value) {
    ///<summary>
    ///Specifies whether the tab is visible.
    ///</summary>
    ///<param name = "value">
    ///true is the tab is visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlTabEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle a tab control's client events concerning manipulations with a tab.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source. Identifies the tab control object that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientTabControlTabEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlTabEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientTabControlTabEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlTabEventArgs.prototype.tab= 0;
ASPxClientTabControlTabCancelEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle a tab control's cancelable client events concerning manipulations with a tab.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source. Identifies the tab control object that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientTabControlTabCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlTabCancelEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientTabControlTabCancelEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlTabCancelEventArgs.prototype.tab= 0;
ASPxClientTabControlTabCancelEventArgs.prototype.reloadContentOnCallback= 0;
ASPxClientTabControlTabCancelEventArgs.prototype.cancel= 0;
ASPxClientTabControlTabCancelEventArgs.prototype.processOnServer= 0;
ASPxClientTabControlTabClickEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle client events concerning clicks on tabs.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the tab control object which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientTabControlTabClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlTabClickEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientTabControlTabClickEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlTabClickEventArgs.prototype.htmlElement= 0;
ASPxClientTabControlTabClickEventArgs.prototype.htmlEvent= 0;
ASPxClientTabControlTabClickEventArgs.prototype.tab= 0;
ASPxClientTabControlTabClickEventArgs.prototype.reloadContentOnCallback= 0;
ASPxClientTabControlTabClickEventArgs.prototype.cancel= 0;
ASPxClientTabControlTabClickEventArgs.prototype.processOnServer= 0;
ASPxClientTimer.prototype.name= 0;
ASPxClientTimer.prototype.Tick= 0;
ASPxClientTimer.prototype.Init= 0;
ASPxClientTimer.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether the timer is enabled.
    ///</summary>
    ///<returns>
    ///true if the timer is enabled; false if it is disabled.
    ///</returns>
};
ASPxClientTimer.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Enables the timer.
    ///</summary>
    ///<param name = "enabled">
    ///true to turn the timer on; false, to turn the timer off.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.GetInterval = function() {
    ///<summary>
    ///Gets the time before the Tick event.
    ///</summary>
    ///<returns>
    ///An integer value that specifies the number of milliseconds before the Tick event is raised relative to the last occurrence of the Tick event.
    ///</returns>
};
ASPxClientTimer.prototype.SetInterval = function(interval) {
    ///<summary>
    ///Specifies the time before the Tick event.
    ///</summary>
    ///<param name = "interval">
    ///An integer value that specifies the number of milliseconds before the Tick event is raised relative to the last occurrence of the Tick event. The value cannot be less than one.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTimer.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTimer.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTimer.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTimer.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTimer.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTitleIndex.prototype.name= 0;
ASPxClientTitleIndex.prototype.ItemClick= 0;
ASPxClientTitleIndex.prototype.BeginCallback= 0;
ASPxClientTitleIndex.prototype.EndCallback= 0;
ASPxClientTitleIndex.prototype.CallbackError= 0;
ASPxClientTitleIndex.prototype.Init= 0;
ASPxClientTitleIndex.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTitleIndex.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTitleIndex.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTitleIndex.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTitleIndex.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTitleIndex.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTitleIndex.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTitleIndex.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTitleIndex.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTitleIndex.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTitleIndex.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTitleIndexItemEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the title index control's client events concerning manipulations with an item.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source. Identifies the title index control object that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientTitleIndexItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTitleIndexItemEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientTitleIndexItemEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTitleIndexItemEventArgs.prototype.name= 0;
ASPxClientTitleIndexItemEventArgs.prototype.htmlElement= 0;
ASPxClientTitleIndexItemEventArgs.prototype.htmlEvent= 0;
ASPxClientTitleIndexItemEventArgs.prototype.processOnServer= 0;
ASPxClientTreeView.prototype.name= 0;
ASPxClientTreeView.prototype.NodeClick= 0;
ASPxClientTreeView.prototype.ExpandedChanged= 0;
ASPxClientTreeView.prototype.ExpandedChanging= 0;
ASPxClientTreeView.prototype.CheckedChanged= 0;
ASPxClientTreeView.prototype.BeginCallback= 0;
ASPxClientTreeView.prototype.EndCallback= 0;
ASPxClientTreeView.prototype.CallbackError= 0;
ASPxClientTreeView.prototype.Init= 0;
ASPxClientTreeView.prototype.GetNode = function(index) {
    ///<summary>
    ///Returns a node specified by its index within the ASPxTreeView's node collection.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the node to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object, representing the node located at the specified index within the ASPxTreeView's node collection.
    ///</returns>
};
ASPxClientTreeView.prototype.GetNodeByName = function(name) {
    ///<summary>
    ///Returns a node specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the node.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the node with the specified name.
    ///</returns>
};
ASPxClientTreeView.prototype.GetNodeByText = function(text) {
    ///<summary>
    ///Returns a node specified by its text.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text content of the node.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the node with the specified node's text content.
    ///</returns>
};
ASPxClientTreeView.prototype.GetNodeCount = function() {
    ///<summary>
    ///Returns the number of nodes at the ASPxTreeView's zero level.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of the root node child nodes.
    ///</returns>
};
ASPxClientTreeView.prototype.GetSelectedNode = function() {
    ///<summary>
    ///Returns the selected node within the ASPxTreeView control on the client side.
    ///</summary>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the selected node.
    ///</returns>
};
ASPxClientTreeView.prototype.SetSelectedNode = function(node) {
    ///<summary>
    ///Selects the specified node within the ASPxTreeView control on the client side.
    ///</summary>
    ///<param name = "node">
    ///An ASPxClientTreeViewNode object specifying the node to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.GetRootNode = function() {
    ///<summary>
    ///Gets the root node of the ASPxTreeView object.
    ///</summary>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object representing a root node.
    ///</returns>
};
ASPxClientTreeView.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all nodes in the ASPxTreeView on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all nodes in the ASPxTreeView on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTreeView.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTreeView.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTreeView.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTreeView.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTreeView.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.treeView= 0;
ASPxClientTreeViewNode.prototype.parent= 0;
ASPxClientTreeViewNode.prototype.index= 0;
ASPxClientTreeViewNode.prototype.name= 0;
ASPxClientTreeViewNode.prototype.GetNodeCount = function() {
    ///<summary>
    ///Returns the number of the current node's immediate child nodes.
    ///</summary>
    ///<returns>
    ///An integer value specifying the number of the immediate child nodes of the current node.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetNode = function(index) {
    ///<summary>
    ///Returns the current node's immediate child node specified by its index.
    ///</summary>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the node to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object representing the node located at the specified index within the current node collection.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetNodeByName = function(name) {
    ///<summary>
    ///Returns the current node's child node specified by its name.
    ///</summary>
    ///<param name = "name">
    ///A string value specifying the name of the node.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the current node's child with the specified name.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetNodeByText = function(text) {
    ///<summary>
    ///Returns the current node's child node specified by its text.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text content of the node.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the current node's child with the specified node's text content.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetExpanded = function() {
    ///<summary>
    ///Returns a value indicating whether the node is expanded.
    ///</summary>
    ///<returns>
    ///true if the node is expanded; otherwise, false.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.SetExpanded = function(value) {
    ///<summary>
    ///Sets a value which specifies the node's expansion state.
    ///</summary>
    ///<param name = "value">
    ///true if the node is expanded; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetChecked = function() {
    ///<summary>
    ///Returns a value indicating whether the node is checked.
    ///</summary>
    ///<returns>
    ///true if the node is checked; otherwise, false.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.SetChecked = function(value) {
    ///<summary>
    ///Sets a value indicating whether the node is checked.
    ///</summary>
    ///<param name = "value">
    ///true if the node is checked; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetCheckState = function() {
    ///<summary>
    ///Returns a value which specifies the node's check state.
    ///</summary>
    ///<returns>
    ///A string value matches one of the CheckState enumeration values.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether the node is enabled.
    ///</summary>
    ///<returns>
    ///true if the node is enabled; otherwise, false.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Sets a value specifying whether the node is enabled.
    ///</summary>
    ///<param name = "value">
    ///true to make the node enabled; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the node.
    ///</summary>
    ///<returns>
    ///A string value that is the URL to the image displayed within the node.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.SetImageUrl = function(value) {
    ///<summary>
    ///Sets the URL which points to the image displayed within the node.
    ///</summary>
    ///<param name = "value">
    ///A string value specifying the URL to the image displayed within the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetNavigateUrl = function() {
    ///<summary>
    ///Gets an URL which defines the navigation location for the node's hyperlink.
    ///</summary>
    ///<returns>
    ///A string value which represents an URL to where the client web browser will navigate when the node is clicked.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.SetNavigateUrl = function(value) {
    ///<summary>
    ///Specifies a URL which defines the node's navigate URL.
    ///</summary>
    ///<param name = "value">
    ///A string value which specifies a URL to where the client web browser will navigate, when the node is clicked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetText = function() {
    ///<summary>
    ///Gets the text, displayed within the node.
    ///</summary>
    ///<returns>
    ///A string value representing the text displayed within the node.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.SetText = function(value) {
    ///<summary>
    ///Specifies the text, displayed within the node.
    ///</summary>
    ///<param name = "value">
    ///A string value that represents the text displayed within the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a node is displayed.
    ///</summary>
    ///<returns>
    ///true is the node is visible; otherwise, false.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.SetVisible = function(value) {
    ///<summary>
    ///Specifies whether the node is visible.
    ///</summary>
    ///<param name = "value">
    ///true if the node is visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetHtmlElement = function() {
    ///<summary>
    ///Gets the HTML object that contains the current node.
    ///</summary>
    ///<returns>
    ///An object representing a container for the current node.
    ///</returns>
};
ASPxClientTreeViewNodeProcessingModeEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client events concerned with node processing.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event source. Identifies the ASPxClientTreeView control that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientTreeViewNodeProcessingModeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNodeProcessingModeEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientTreeViewNodeProcessingModeEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNodeProcessingModeEventArgs.prototype.node= 0;
ASPxClientTreeViewNodeProcessingModeEventArgs.prototype.processOnServer= 0;
ASPxClientTreeViewNodeClickEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the NodeClick event.
    ///</summary>
    ///<param name = "source">
    ///The ASPxClientTreeView control which fires the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientTreeViewNodeClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNodeClickEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientTreeViewNodeClickEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNodeClickEventArgs.prototype.htmlElement= 0;
ASPxClientTreeViewNodeClickEventArgs.prototype.htmlEvent= 0;
ASPxClientTreeViewNodeClickEventArgs.prototype.node= 0;
ASPxClientTreeViewNodeClickEventArgs.prototype.processOnServer= 0;
ASPxClientTreeViewNodeEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the ASPxTreeView control's client events, concerning manipulations with a node.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source. Identifies the ASPxClientTreeView control object that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientTreeViewNodeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNodeEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientTreeViewNodeEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNodeEventArgs.prototype.node= 0;
ASPxClientTreeViewNodeCancelEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the ASPxTreeView's cancelable client events, concerning manipulations with nodes.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source. Identifies the ASPxClientTreeView object that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientTreeViewNodeCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNodeCancelEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientTreeViewNodeCancelEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNodeCancelEventArgs.prototype.node= 0;
ASPxClientTreeViewNodeCancelEventArgs.prototype.cancel= 0;
ASPxClientTreeViewNodeCancelEventArgs.prototype.processOnServer= 0;
ASPxClientUploadControl.prototype.name= 0;
ASPxClientUploadControl.prototype.FileUploadComplete= 0;
ASPxClientUploadControl.prototype.FilesUploadComplete= 0;
ASPxClientUploadControl.prototype.FileUploadStart= 0;
ASPxClientUploadControl.prototype.UploadingProgressChanged= 0;
ASPxClientUploadControl.prototype.TextChanged= 0;
ASPxClientUploadControl.prototype.FileInputCountChanged= 0;
ASPxClientUploadControl.prototype.Init= 0;
ASPxClientUploadControl.prototype.AddFileInput = function() {
    ///<summary>
    ///Adds a new file input element to the ASPxUploadControl.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.RemoveFileInput = function() {
    ///<summary>
    ///Removes the last file input element from the ASPxUploadControl.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.RemoveFileInput = function(index) {
    ///<summary>
    ///Removes a file input element from the ASPxUploadControl.
    ///</summary>
    ///<param name = "index">
    ///An integer value that represents a file input element's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.ClearText = function() {
    ///<summary>
    ///Clears the text displayed within the control's edit box.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.GetText = function() {
    ///<summary>
    ///Gets the text displayed within the control's edit box.
    ///</summary>
    ///<returns>
    ///A string value representing the displayed text.
    ///</returns>
};
ASPxClientUploadControl.prototype.GetText = function(index) {
    ///<summary>
    ///Gets the text displayed within the edit box of the specified file input element.
    ///</summary>
    ///<param name = "index">
    ///An integer value that specifies the required file input element's index.
    ///</param>
    ///<returns>
    ///A string value representing the displayed text.
    ///</returns>
};
ASPxClientUploadControl.prototype.UploadFile = function() {
    ///<summary>
    ///Initiates uploading of the specified file to the web server's memory.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.Upload = function() {
    ///<summary>
    ///Initiates uploading of the specified file(s) to the web server's memory.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.Cancel = function() {
    ///<summary>
    ///Cancels the initiated file uploading process.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.GetFileInputCount = function() {
    ///<summary>
    ///Gets the number of file input elements contained within the ASPxUploadControl.
    ///</summary>
    ///<returns>
    ///An integer value representing the total number of file input elements.
    ///</returns>
};
ASPxClientUploadControl.prototype.SetFileInputCount = function(count) {
    ///<summary>
    ///Specifies the count of the file input elements within the upload control.
    ///</summary>
    ///<param name = "count">
    ///An integer value that specifies the file input elements count.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.SetAddButtonText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the add button.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.SetUploadButtonText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the upload button.
    ///</summary>
    ///<param name = "text">
    ///A string value specifying the text to be displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.GetAddButtonText = function() {
    ///<summary>
    ///Returns the text displayed within the add button.
    ///</summary>
    ///<returns>
    ///A string value representing the text displayed within the button.
    ///</returns>
};
ASPxClientUploadControl.prototype.GetUploadButtonText = function() {
    ///<summary>
    ///Returns the text displayed within the upload button.
    ///</summary>
    ///<returns>
    ///A string value representing the text displayed within the button.
    ///</returns>
};
ASPxClientUploadControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientUploadControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientUploadControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientUploadControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientUploadControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientUploadControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientUploadControlFileUploadStartEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the FileUploadStart client event.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the upload control which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientUploadControlFileUploadStartEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlFileUploadStartEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientUploadControlFileUploadStartEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlFileUploadStartEventArgs.prototype.cancel= 0;
ASPxClientUploadControlFileUploadCompleteEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the corresponding client event.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the upload control which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientUploadControlFileUploadCompleteEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlFileUploadCompleteEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientUploadControlFileUploadCompleteEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlFileUploadCompleteEventArgs.prototype.inputIndex= 0;
ASPxClientUploadControlFileUploadCompleteEventArgs.prototype.isValid= 0;
ASPxClientUploadControlFileUploadCompleteEventArgs.prototype.errorText= 0;
ASPxClientUploadControlFileUploadCompleteEventArgs.prototype.callbackData= 0;
ASPxClientUploadControlFilesUploadCompleteEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the client FilesUploadComplete event.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the upload control which raised the event.
    ///</param>
    ///<param name = "e">
    ///A  object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlFilesUploadCompleteEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientUploadControlFilesUploadCompleteEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlFilesUploadCompleteEventArgs.prototype.errorText= 0;
ASPxClientUploadControlFilesUploadCompleteEventArgs.prototype.callbackData= 0;
ASPxClientUploadControlTextChangedEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the TextChanged client event.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the upload control which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientUploadControlTextChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlTextChangedEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientUploadControlTextChangedEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlTextChangedEventArgs.prototype.inputIndex= 0;
ASPxClientUploadControlUploadingProgressChangedEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///A method that will handle the ASPxUploadControl's client event concerning the uploading process being changed.
    ///</summary>
    ///<param name = "source">
    ///An object representing the event's source. Identifies the ASPxUploadControl object that raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientUploadControlUploadingProgressChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlUploadingProgressChangedEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientUploadControlUploadingProgressChangedEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlUploadingProgressChangedEventArgs.prototype.fileCount= 0;
ASPxClientUploadControlUploadingProgressChangedEventArgs.prototype.currentFileName= 0;
ASPxClientUploadControlUploadingProgressChangedEventArgs.prototype.totalContentLength= 0;
ASPxClientUploadControlUploadingProgressChangedEventArgs.prototype.uploadedContentLength= 0;
ASPxClientUploadControlUploadingProgressChangedEventArgs.prototype.progress= 0;
ASPxClientWebChartControl.prototype.name= 0;
ASPxClientWebChartControl.prototype.BeginCallback= 0;
ASPxClientWebChartControl.prototype.EndCallback= 0;
ASPxClientWebChartControl.prototype.CallbackError= 0;
ASPxClientWebChartControl.prototype.ObjectHotTracked= 0;
ASPxClientWebChartControl.prototype.ObjectSelected= 0;
ASPxClientWebChartControl.prototype.Init= 0;
ASPxClientWebChartControl.prototype.GetChart = function() {
    ///<summary>
    ///Returns an ASPxClientWebChart object, which contains information about the hierarchy of a chart control, and provides access to the main properties of chart elements  on the client side.
    ///</summary>
    ///<returns type = "ASPxClientWebChart">
    ///An ASPxClientWebChart object containing information about a chart on the client side.
    ///</returns>
};
ASPxClientWebChartControl.prototype.SetCursor = function(cursor) {
    ///<summary>
    ///Changes the mouse pointer, which is shown when the mouse is over the chart control, to the pointer with the specified name.
    ///</summary>
    ///<param name = "cursor">
    ///A string value representing the name of the desired cursor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.HitTest = function(x, y) {
    ///<summary>
    ///Returns the specific chart element which is located under the test point.
    ///</summary>
    ///<param name = "x">
    ///An integer value that specifies the x coordinate of the test point.
    ///</param>
    ///<param name = "y">
    ///An integer value that specifies the y coordinate of the test point.
    ///</param>
    ///<returns type = "ASPxClientHitObject[]">
    ///An array collection of ASPxClientHitObject objects, that represent the chart elements located under the test point.
    ///</returns>
};
ASPxClientWebChartControl.prototype.PerformCallback = function(args) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.Print = function() {
    ///<summary>
    ///Prints the current chart on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.SaveToDisk = function(format) {
    ///<summary>
    ///Exports a chart to the file of the specified format, and saves it to the disk.
    ///</summary>
    ///<param name = "format">
    ///A string value specifying the format, to which a chart should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.SaveToDisk = function(format, filename) {
    ///<summary>
    ///Exports a chart to a file in the specified format, and saves it to disk, using the specified file name.
    ///</summary>
    ///<param name = "format">
    ///A string value specifying the format, to which a chart should be exported.
    ///</param>
    ///<param name = "filename">
    ///A string value specifying the file name, to which a chart should be exported. If this parameter is missing or set to an empty string, then the created file will be named using the client-side name of a chart.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.SaveToWindow = function(format) {
    ///<summary>
    ///Exports a report to the file of the specified format, and shows it in a new Web Browser window.
    ///</summary>
    ///<param name = "format">
    ///A string  value specifying a format in which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.GetMainDOMElement = function() {
    ///<summary>
    ///Gets the main DOM (Document Object Model) element on a Web Page representing this ASPxClientWebChartControl object.
    ///</summary>
    ///<returns>
    ///An object which represents the main DOM element.
    ///</returns>
};
ASPxClientWebChartControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientWebChartControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientWebChartControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientWebChartControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientWebChartControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientWebChartControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientWebChartControlHotTrackEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///Represents a method that will handle the ObjectSelected events.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the ASPxClientWebChartControl which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientWebChartControlHotTrackEventArgs object which contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControlHotTrackEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientWebChartControlHotTrackEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControlHotTrackEventArgs.prototype.hitObject= 0;
ASPxClientWebChartControlHotTrackEventArgs.prototype.additionalHitObject= 0;
ASPxClientWebChartControlHotTrackEventArgs.prototype.hitInfo= 0;
ASPxClientWebChartControlHotTrackEventArgs.prototype.chart= 0;
ASPxClientWebChartControlHotTrackEventArgs.prototype.htmlElement= 0;
ASPxClientWebChartControlHotTrackEventArgs.prototype.x= 0;
ASPxClientWebChartControlHotTrackEventArgs.prototype.y= 0;
ASPxClientWebChartControlHotTrackEventArgs.prototype.absoluteX= 0;
ASPxClientWebChartControlHotTrackEventArgs.prototype.absoluteY= 0;
ASPxClientWebChartControlHotTrackEventArgs.prototype.cancel= 0;
ASPxClientWebChartControlHotTrackEventArgs.prototype.processOnServer= 0;
ASPxClientHitObject.prototype.Object= 0;
ASPxClientHitObject.prototype.AdditionalObject= 0;
ASPxClientWebChartHitInfo.prototype.inChart= 0;
ASPxClientWebChartHitInfo.prototype.inChartTitle= 0;
ASPxClientWebChartHitInfo.prototype.inAxis= 0;
ASPxClientWebChartHitInfo.prototype.inAxisLabelItem= 0;
ASPxClientWebChartHitInfo.prototype.inAxisTitle= 0;
ASPxClientWebChartHitInfo.prototype.inConstantLine= 0;
ASPxClientWebChartHitInfo.prototype.inDiagram= 0;
ASPxClientWebChartHitInfo.prototype.inNonDefaultPane= 0;
ASPxClientWebChartHitInfo.prototype.inLegend= 0;
ASPxClientWebChartHitInfo.prototype.inSeries= 0;
ASPxClientWebChartHitInfo.prototype.inSeriesLabel= 0;
ASPxClientWebChartHitInfo.prototype.inSeriesPoint= 0;
ASPxClientWebChartHitInfo.prototype.inSeriesTitle= 0;
ASPxClientWebChartHitInfo.prototype.inTrendLine= 0;
ASPxClientWebChartHitInfo.prototype.inFibonacciIndicator= 0;
ASPxClientWebChartHitInfo.prototype.inRegressionLine= 0;
ASPxClientWebChartHitInfo.prototype.inIndicator= 0;
ASPxClientWebChartHitInfo.prototype.inAnnotation= 0;
ASPxClientWebChartHitInfo.prototype.chart= 0;
ASPxClientWebChartHitInfo.prototype.chartTitle= 0;
ASPxClientWebChartHitInfo.prototype.axis= 0;
ASPxClientWebChartHitInfo.prototype.constantLine= 0;
ASPxClientWebChartHitInfo.prototype.diagram= 0;
ASPxClientWebChartHitInfo.prototype.nonDefaultPane= 0;
ASPxClientWebChartHitInfo.prototype.legend= 0;
ASPxClientWebChartHitInfo.prototype.series= 0;
ASPxClientWebChartHitInfo.prototype.seriesLabel= 0;
ASPxClientWebChartHitInfo.prototype.seriesTitle= 0;
ASPxClientWebChartHitInfo.prototype.trendLine= 0;
ASPxClientWebChartHitInfo.prototype.fibonacciIndicator= 0;
ASPxClientWebChartHitInfo.prototype.regressionLine= 0;
ASPxClientWebChartHitInfo.prototype.indicator= 0;
ASPxClientWebChartHitInfo.prototype.annotation= 0;
ASPxClientWebChartHitInfo.prototype.seriesPoint= 0;
ASPxClientWebChartHitInfo.prototype.axisLabelItem= 0;
ASPxClientWebChartHitInfo.prototype.axisTitle= 0;
ASPxClientDiagramCoordinates.prototype.argumentScaleType= 0;
ASPxClientDiagramCoordinates.prototype.valueScaleType= 0;
ASPxClientDiagramCoordinates.prototype.qualitativeArgument= 0;
ASPxClientDiagramCoordinates.prototype.numericalArgument= 0;
ASPxClientDiagramCoordinates.prototype.dateTimeArgument= 0;
ASPxClientDiagramCoordinates.prototype.numericalValue= 0;
ASPxClientDiagramCoordinates.prototype.dateTimeValue= 0;
ASPxClientDiagramCoordinates.prototype.axisX= 0;
ASPxClientDiagramCoordinates.prototype.axisY= 0;
ASPxClientDiagramCoordinates.prototype.pane= 0;
ASPxClientDiagramCoordinates.prototype.IsEmpty = function() {
    ///<summary>
    ///Checks whether the current object represents a point outside the diagram area.
    ///</summary>
    ///<returns>
    ///true if the diagram coordinates correspond to a point outside the diagram area; otherwise, false.
    ///</returns>
};
ASPxClientDiagramCoordinates.prototype.GetAxisValue = function(axis) {
    ///<summary>
    ///Gets the value of the client-side axis instance.
    ///</summary>
    ///<param name = "axis">
    ///An ASPxClientAxisBase class descendant, representing the axis that contains the requested value.
    ///</param>
    ///<returns type = "ASPxClientAxisValue">
    ///An ASPxClientAxisValue object that contains the information about the axis scale type and value.
    ///</returns>
};
ASPxClientAxisValue.prototype.scaleType= 0;
ASPxClientAxisValue.prototype.qualitativeValue= 0;
ASPxClientAxisValue.prototype.numericalValue= 0;
ASPxClientAxisValue.prototype.dateTimeValue= 0;
ASPxClientControlCoordinates.prototype.pane= 0;
ASPxClientControlCoordinates.prototype.x= 0;
ASPxClientControlCoordinates.prototype.y= 0;
ASPxClientControlCoordinates.prototype.visibility= 0;
ASPxClientWebChartElement.prototype.chart= 0;
ASPxClientWebChartEmptyElement.prototype.chart= 0;
ASPxClientWebChartRequiredElement.prototype.chart= 0;
ASPxClientWebChartElementNamed.prototype.name= 0;
ASPxClientWebChartElementNamed.prototype.chart= 0;
ASPxClientWebChart.prototype.chartControl= 0;
ASPxClientWebChart.prototype.diagram= 0;
ASPxClientWebChart.prototype.series= 0;
ASPxClientWebChart.prototype.titles= 0;
ASPxClientWebChart.prototype.annotations= 0;
ASPxClientWebChart.prototype.legend= 0;
ASPxClientWebChart.prototype.appearanceName= 0;
ASPxClientWebChart.prototype.paletteName= 0;
ASPxClientWebChart.prototype.chart= 0;
ASPxClientSimpleDiagram.prototype.chart= 0;
ASPxClientXYDiagramBase.prototype.axisX= 0;
ASPxClientXYDiagramBase.prototype.axisY= 0;
ASPxClientXYDiagramBase.prototype.chart= 0;
ASPxClientXYDiagram2D.prototype.secondaryAxesX= 0;
ASPxClientXYDiagram2D.prototype.secondaryAxesY= 0;
ASPxClientXYDiagram2D.prototype.defaultPane= 0;
ASPxClientXYDiagram2D.prototype.panes= 0;
ASPxClientXYDiagram2D.prototype.axisX= 0;
ASPxClientXYDiagram2D.prototype.axisY= 0;
ASPxClientXYDiagram2D.prototype.chart= 0;
ASPxClientXYDiagram2D.prototype.PointToDiagram = function(x, y) {
    ///<summary>
    ///Converts the display coordinates into a diagram coordinates object.
    ///</summary>
    ///<param name = "x">
    ///An integer value, representing the X-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<param name = "y">
    ///An integer value, representing the Y-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<returns type = "ASPxClientDiagramCoordinates">
    ///An ASPxClientDiagramCoordinates object, containing information about the point's argument and value, their scale types, associated axes and pane.
    ///</returns>
};
ASPxClientXYDiagram2D.prototype.DiagramToPoint = function(argument, value, axisX, axisY, pane) {
    ///<summary>
    ///Converts the diagram coordinates of a point into screen coordinates.
    ///</summary>
    ///<param name = "argument">
    ///An object, representing the point's argument.
    ///</param>
    ///<param name = "value">
    ///An object, representing the point's value.
    ///</param>
    ///<param name = "axisX">
    ///An ASPxClientAxis2D descendant, representing the X-axis.
    ///</param>
    ///<param name = "axisY">
    ///An ASPxClientAxis2D descendant, representing the Y-axis.
    ///</param>
    ///<param name = "pane">
    ///An ASPxClientXYDiagramPane object, representing the pane.
    ///</param>
    ///<returns type = "ASPxClientControlCoordinates">
    ///An ASPxClientControlCoordinates object, containing information about the point's X and Y coordinates, its visibility state, and the associated pane.
    ///</returns>
};
ASPxClientXYDiagram.prototype.rotated= 0;
ASPxClientXYDiagram.prototype.secondaryAxesX= 0;
ASPxClientXYDiagram.prototype.secondaryAxesY= 0;
ASPxClientXYDiagram.prototype.defaultPane= 0;
ASPxClientXYDiagram.prototype.panes= 0;
ASPxClientXYDiagram.prototype.axisX= 0;
ASPxClientXYDiagram.prototype.axisY= 0;
ASPxClientXYDiagram.prototype.chart= 0;
ASPxClientXYDiagram.prototype.PointToDiagram = function(x, y) {
    ///<summary>
    ///Converts the display coordinates into a diagram coordinates object.
    ///</summary>
    ///<param name = "x">
    ///An integer value, representing the X-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<param name = "y">
    ///An integer value, representing the Y-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<returns type = "ASPxClientDiagramCoordinates">
    ///An ASPxClientDiagramCoordinates object, containing information about the point's argument and value, their scale types, associated axes and pane.
    ///</returns>
};
ASPxClientXYDiagram.prototype.DiagramToPoint = function(argument, value, axisX, axisY, pane) {
    ///<summary>
    ///Converts the diagram coordinates of a point into screen coordinates.
    ///</summary>
    ///<param name = "argument">
    ///An object, representing the point's argument.
    ///</param>
    ///<param name = "value">
    ///An object, representing the point's value.
    ///</param>
    ///<param name = "axisX">
    ///An ASPxClientAxis2D descendant, representing the X-axis.
    ///</param>
    ///<param name = "axisY">
    ///An ASPxClientAxis2D descendant, representing the Y-axis.
    ///</param>
    ///<param name = "pane">
    ///An ASPxClientXYDiagramPane object, representing the pane.
    ///</param>
    ///<returns type = "ASPxClientControlCoordinates">
    ///An ASPxClientControlCoordinates object, containing information about the point's X and Y coordinates, its visibility state, and the associated pane.
    ///</returns>
};
ASPxClientSwiftPlotDiagram.prototype.secondaryAxesX= 0;
ASPxClientSwiftPlotDiagram.prototype.secondaryAxesY= 0;
ASPxClientSwiftPlotDiagram.prototype.defaultPane= 0;
ASPxClientSwiftPlotDiagram.prototype.panes= 0;
ASPxClientSwiftPlotDiagram.prototype.axisX= 0;
ASPxClientSwiftPlotDiagram.prototype.axisY= 0;
ASPxClientSwiftPlotDiagram.prototype.chart= 0;
ASPxClientSwiftPlotDiagram.prototype.PointToDiagram = function(x, y) {
    ///<summary>
    ///Converts the display coordinates into a diagram coordinates object.
    ///</summary>
    ///<param name = "x">
    ///An integer value, representing the X-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<param name = "y">
    ///An integer value, representing the Y-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<returns type = "ASPxClientDiagramCoordinates">
    ///An ASPxClientDiagramCoordinates object, containing information about the point's argument and value, their scale types, associated axes and pane.
    ///</returns>
};
ASPxClientSwiftPlotDiagram.prototype.DiagramToPoint = function(argument, value, axisX, axisY, pane) {
    ///<summary>
    ///Converts the diagram coordinates of a point into screen coordinates.
    ///</summary>
    ///<param name = "argument">
    ///An object, representing the point's argument.
    ///</param>
    ///<param name = "value">
    ///An object, representing the point's value.
    ///</param>
    ///<param name = "axisX">
    ///An ASPxClientAxis2D descendant, representing the X-axis.
    ///</param>
    ///<param name = "axisY">
    ///An ASPxClientAxis2D descendant, representing the Y-axis.
    ///</param>
    ///<param name = "pane">
    ///An ASPxClientXYDiagramPane object, representing the pane.
    ///</param>
    ///<returns type = "ASPxClientControlCoordinates">
    ///An ASPxClientControlCoordinates object, containing information about the point's X and Y coordinates, its visibility state, and the associated pane.
    ///</returns>
};
ASPxClientXYDiagramPane.prototype.diagram= 0;
ASPxClientXYDiagramPane.prototype.name= 0;
ASPxClientXYDiagramPane.prototype.chart= 0;
ASPxClientXYDiagram3D.prototype.axisX= 0;
ASPxClientXYDiagram3D.prototype.axisY= 0;
ASPxClientXYDiagram3D.prototype.chart= 0;
ASPxClientRadarDiagram.prototype.axisX= 0;
ASPxClientRadarDiagram.prototype.axisY= 0;
ASPxClientRadarDiagram.prototype.chart= 0;
ASPxClientRadarDiagram.prototype.PointToDiagram = function(x, y) {
    ///<summary>
    ///Converts the display coordinates into a diagram coordinates object.
    ///</summary>
    ///<param name = "x">
    ///An integer value, representing the X-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<param name = "y">
    ///An integer value, representing the Y-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<returns type = "ASPxClientDiagramCoordinates">
    ///An ASPxClientDiagramCoordinates object, containing information about the point's argument and value, their scale types, associated axes and pane.
    ///</returns>
};
ASPxClientRadarDiagram.prototype.DiagramToPoint = function(argument, value) {
    ///<summary>
    ///Converts the diagram coordinates of a point into screen coordinates.
    ///</summary>
    ///<param name = "argument">
    ///An object, representing the point's argument.
    ///</param>
    ///<param name = "value">
    ///An object, representing the point's value.
    ///</param>
    ///<returns type = "ASPxClientControlCoordinates">
    ///An ASPxClientControlCoordinates object, containing information about the point's X and Y coordinates, its visibility state, and the associated pane.
    ///</returns>
};
ASPxClientAxisBase.prototype.diagram= 0;
ASPxClientAxisBase.prototype.range= 0;
ASPxClientAxisBase.prototype.name= 0;
ASPxClientAxisBase.prototype.chart= 0;
ASPxClientAxis2D.prototype.axisTitle= 0;
ASPxClientAxis2D.prototype.strips= 0;
ASPxClientAxis2D.prototype.constantLines= 0;
ASPxClientAxis2D.prototype.diagram= 0;
ASPxClientAxis2D.prototype.range= 0;
ASPxClientAxis2D.prototype.name= 0;
ASPxClientAxis2D.prototype.chart= 0;
ASPxClientAxis.prototype.reverse= 0;
ASPxClientAxis.prototype.axisTitle= 0;
ASPxClientAxis.prototype.strips= 0;
ASPxClientAxis.prototype.constantLines= 0;
ASPxClientAxis.prototype.diagram= 0;
ASPxClientAxis.prototype.range= 0;
ASPxClientAxis.prototype.name= 0;
ASPxClientAxis.prototype.chart= 0;
ASPxClientSwiftPlotDiagramAxis.prototype.axisTitle= 0;
ASPxClientSwiftPlotDiagramAxis.prototype.strips= 0;
ASPxClientSwiftPlotDiagramAxis.prototype.constantLines= 0;
ASPxClientSwiftPlotDiagramAxis.prototype.diagram= 0;
ASPxClientSwiftPlotDiagramAxis.prototype.range= 0;
ASPxClientSwiftPlotDiagramAxis.prototype.name= 0;
ASPxClientSwiftPlotDiagramAxis.prototype.chart= 0;
ASPxClientAxis3D.prototype.diagram= 0;
ASPxClientAxis3D.prototype.range= 0;
ASPxClientAxis3D.prototype.name= 0;
ASPxClientAxis3D.prototype.chart= 0;
ASPxClientRadarAxis.prototype.diagram= 0;
ASPxClientRadarAxis.prototype.range= 0;
ASPxClientRadarAxis.prototype.name= 0;
ASPxClientRadarAxis.prototype.chart= 0;
ASPxClientAxisTitle.prototype.axis= 0;
ASPxClientAxisTitle.prototype.text= 0;
ASPxClientAxisTitle.prototype.chart= 0;
ASPxClientAxisLabelItem.prototype.axis= 0;
ASPxClientAxisLabelItem.prototype.text= 0;
ASPxClientAxisLabelItem.prototype.axisValue= 0;
ASPxClientAxisLabelItem.prototype.axisValueInternal= 0;
ASPxClientAxisLabelItem.prototype.chart= 0;
ASPxClientAxisRange.prototype.axis= 0;
ASPxClientAxisRange.prototype.minValue= 0;
ASPxClientAxisRange.prototype.maxValue= 0;
ASPxClientAxisRange.prototype.minValueInternal= 0;
ASPxClientAxisRange.prototype.maxValueInternal= 0;
ASPxClientAxisRange.prototype.chart= 0;
ASPxClientStrip.prototype.axis= 0;
ASPxClientStrip.prototype.minValue= 0;
ASPxClientStrip.prototype.maxValue= 0;
ASPxClientStrip.prototype.name= 0;
ASPxClientStrip.prototype.chart= 0;
ASPxClientConstantLine.prototype.axis= 0;
ASPxClientConstantLine.prototype.value= 0;
ASPxClientConstantLine.prototype.title= 0;
ASPxClientConstantLine.prototype.name= 0;
ASPxClientConstantLine.prototype.chart= 0;
ASPxClientSeries.prototype.viewType= 0;
ASPxClientSeries.prototype.argumentScaleType= 0;
ASPxClientSeries.prototype.valueScaleType= 0;
ASPxClientSeries.prototype.axisX= 0;
ASPxClientSeries.prototype.axisY= 0;
ASPxClientSeries.prototype.pane= 0;
ASPxClientSeries.prototype.visible= 0;
ASPxClientSeries.prototype.label= 0;
ASPxClientSeries.prototype.points= 0;
ASPxClientSeries.prototype.titles= 0;
ASPxClientSeries.prototype.indicators= 0;
ASPxClientSeries.prototype.regressionLines= 0;
ASPxClientSeries.prototype.trendLines= 0;
ASPxClientSeries.prototype.fibonacciIndicators= 0;
ASPxClientSeries.prototype.name= 0;
ASPxClientSeries.prototype.chart= 0;
ASPxClientSeriesLabel.prototype.series= 0;
ASPxClientSeriesLabel.prototype.text= 0;
ASPxClientSeriesLabel.prototype.chart= 0;
ASPxClientSeriesPoint.prototype.series= 0;
ASPxClientSeriesPoint.prototype.argument= 0;
ASPxClientSeriesPoint.prototype.values= 0;
ASPxClientSeriesPoint.prototype.chart= 0;
ASPxClientLegend.prototype.chart= 0;
ASPxClientTitleBase.prototype.lines= 0;
ASPxClientTitleBase.prototype.alignment= 0;
ASPxClientTitleBase.prototype.dock= 0;
ASPxClientTitleBase.prototype.chart= 0;
ASPxClientChartTitle.prototype.lines= 0;
ASPxClientChartTitle.prototype.alignment= 0;
ASPxClientChartTitle.prototype.dock= 0;
ASPxClientChartTitle.prototype.chart= 0;
ASPxClientSeriesTitle.prototype.series= 0;
ASPxClientSeriesTitle.prototype.lines= 0;
ASPxClientSeriesTitle.prototype.alignment= 0;
ASPxClientSeriesTitle.prototype.dock= 0;
ASPxClientSeriesTitle.prototype.chart= 0;
ASPxClientIndicator.prototype.series= 0;
ASPxClientIndicator.prototype.name= 0;
ASPxClientIndicator.prototype.chart= 0;
ASPxClientFinancialIndicator.prototype.point1= 0;
ASPxClientFinancialIndicator.prototype.point2= 0;
ASPxClientFinancialIndicator.prototype.series= 0;
ASPxClientFinancialIndicator.prototype.name= 0;
ASPxClientFinancialIndicator.prototype.chart= 0;
ASPxClientTrendLine.prototype.point1= 0;
ASPxClientTrendLine.prototype.point2= 0;
ASPxClientTrendLine.prototype.series= 0;
ASPxClientTrendLine.prototype.name= 0;
ASPxClientTrendLine.prototype.chart= 0;
ASPxClientFibonacciIndicator.prototype.point1= 0;
ASPxClientFibonacciIndicator.prototype.point2= 0;
ASPxClientFibonacciIndicator.prototype.series= 0;
ASPxClientFibonacciIndicator.prototype.name= 0;
ASPxClientFibonacciIndicator.prototype.chart= 0;
ASPxClientFinancialIndicatorPoint.prototype.financialIndicator= 0;
ASPxClientFinancialIndicatorPoint.prototype.argument= 0;
ASPxClientFinancialIndicatorPoint.prototype.valueLevel= 0;
ASPxClientFinancialIndicatorPoint.prototype.chart= 0;
ASPxClientSingleLevelIndicator.prototype.valueLevel= 0;
ASPxClientSingleLevelIndicator.prototype.series= 0;
ASPxClientSingleLevelIndicator.prototype.name= 0;
ASPxClientSingleLevelIndicator.prototype.chart= 0;
ASPxClientRegressionLine.prototype.valueLevel= 0;
ASPxClientRegressionLine.prototype.series= 0;
ASPxClientRegressionLine.prototype.name= 0;
ASPxClientRegressionLine.prototype.chart= 0;
ASPxClientMovingAverage.prototype.pointsCount= 0;
ASPxClientMovingAverage.prototype.kind= 0;
ASPxClientMovingAverage.prototype.envelopePercent= 0;
ASPxClientMovingAverage.prototype.series= 0;
ASPxClientMovingAverage.prototype.name= 0;
ASPxClientMovingAverage.prototype.chart= 0;
ASPxClientSimpleMovingAverage.prototype.pointsCount= 0;
ASPxClientSimpleMovingAverage.prototype.kind= 0;
ASPxClientSimpleMovingAverage.prototype.envelopePercent= 0;
ASPxClientSimpleMovingAverage.prototype.series= 0;
ASPxClientSimpleMovingAverage.prototype.name= 0;
ASPxClientSimpleMovingAverage.prototype.chart= 0;
ASPxClientExponentialMovingAverage.prototype.pointsCount= 0;
ASPxClientExponentialMovingAverage.prototype.kind= 0;
ASPxClientExponentialMovingAverage.prototype.envelopePercent= 0;
ASPxClientExponentialMovingAverage.prototype.series= 0;
ASPxClientExponentialMovingAverage.prototype.name= 0;
ASPxClientExponentialMovingAverage.prototype.chart= 0;
ASPxClientWeightedMovingAverage.prototype.pointsCount= 0;
ASPxClientWeightedMovingAverage.prototype.kind= 0;
ASPxClientWeightedMovingAverage.prototype.envelopePercent= 0;
ASPxClientWeightedMovingAverage.prototype.series= 0;
ASPxClientWeightedMovingAverage.prototype.name= 0;
ASPxClientWeightedMovingAverage.prototype.chart= 0;
ASPxClientTriangularMovingAverage.prototype.pointsCount= 0;
ASPxClientTriangularMovingAverage.prototype.kind= 0;
ASPxClientTriangularMovingAverage.prototype.envelopePercent= 0;
ASPxClientTriangularMovingAverage.prototype.series= 0;
ASPxClientTriangularMovingAverage.prototype.name= 0;
ASPxClientTriangularMovingAverage.prototype.chart= 0;
ASPxClientAnnotation.prototype.name= 0;
ASPxClientAnnotation.prototype.chart= 0;
ASPxClientTextAnnotation.prototype.lines= 0;
ASPxClientTextAnnotation.prototype.name= 0;
ASPxClientTextAnnotation.prototype.chart= 0;
ASPxClientImageAnnotation.prototype.name= 0;
ASPxClientImageAnnotation.prototype.chart= 0;
ASPxClientReportViewer.prototype.name= 0;
ASPxClientReportViewer.prototype.PageLoad= 0;
ASPxClientReportViewer.prototype.Init= 0;
ASPxClientReportViewer.prototype.Print = function() {
    ///<summary>
    ///Prints a report shown in the ReportViewer.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.Print = function(pageIndex) {
    ///<summary>
    ///Prints a report page with the specified page index.
    ///</summary>
    ///<param name = "pageIndex">
    ///An integer value which specifies an index of the page to be printed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Displays a report page with the specified page index in the ReportViewer.
    ///</summary>
    ///<param name = "pageIndex">
    ///An integer value which specifies the index of a page to be displayed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.Refresh = function() {
    ///<summary>
    ///Initiates a round trip to the server so that the current page will be reloaded.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.Search = function() {
    ///<summary>
    ///Invokes the Search dialog, which allows end-users to search for specific text in a report.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.SaveToWindow = function(format) {
    ///<summary>
    ///Exports a report to a file of the specified format, and shows it in a new Web Browser window.
    ///</summary>
    ///<param name = "format">
    ///A string specifying the format, to which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.SaveToDisk = function(format) {
    ///<summary>
    ///Exports a report to a file of the specified format, and saves it to the disk.
    ///</summary>
    ///<param name = "format">
    ///A string specifying the format, to which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.IsSearchAllowed = function() {
    ///<summary>
    ///Gets a value indicating whether it's possible to search for a specified text in the Web Browser, which displays a report on the client side.
    ///</summary>
    ///<returns>
    ///true if searching is allowed; otherwise, false.
    ///</returns>
};
ASPxClientReportViewer.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientReportViewer.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns>
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientReportViewer.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.
    ///</summary>
    ///<param name = "height">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns>
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientReportViewer.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientReportViewer.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns>
    ///true if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientReportViewer.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns>
    ///true if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientEventHandler.prototype.Invoke = function(source, e) {
    ///<summary>
    ///Represents a method that will handle the PageLoad client-side event.
    ///</summary>
    ///<param name = "source">
    ///The event source. This parameter identifies the ASPxClientReportViewer which raised the event.
    ///</param>
    ///<param name = "e">
    ///An ASPxClientReportViewerPageLoadEventArgs object which contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEventHandler.prototype.BeginInvoke = function(source, e, callback, object) {
    ///<returns type = "IAsyncResult">
    ///</returns>
};
ASPxClientEventHandler.prototype.EndInvoke = function(result) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewerPageLoadEventArgs.prototype.IsFirstPage = function() {
    ///<summary>
    ///Gets a value indicating whether a report page, which is currently loaded into the ASPxClientReportViewer, is the first page of a report.
    ///</summary>
    ///<returns>
    ///true if the loaded page is first; otherwise, false.
    ///</returns>
};
ASPxClientReportViewerPageLoadEventArgs.prototype.IsLastPage = function() {
    ///<summary>
    ///Gets a value indicating whether a report page, which is currently loaded into the ASPxClientReportViewer, is the last page of a report.
    ///</summary>
    ///<returns>
    ///true if the loaded page is last; otherwise, false.
    ///</returns>
};

ASPxClientButton.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientButton">
    ///An object of the ASPxClientButton type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientEdit.ClearEditorsInContainer = function(container, validationGroup, clearInvisibleEditors) {
    ///<summary>
    ///Assigns a null value to all editors in a specified visibility state, which are located within a specified container and belong to a specific validation group.
    ///</summary>
    ///<param name = "container">
    ///An HTML element specifying the container of editors to be validated.
    ///</param>
    ///<param name = "validationGroup">
    ///A string value specifying the validation group's name.
    ///</param>
    ///<param name = "clearInvisibleEditors">
    ///true to clear both visible and invisible editors that belong to the specified container and group; false to clear only visible editors.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.ClearEditorsInContainer = function(container, validationGroup) {
    ///<summary>
    ///Assigns a null value to all editors located within a specified container, and belonging to a specific validation group.
    ///</summary>
    ///<param name = "container">
    ///An HTML element specifying the container of editors to be validated.
    ///</param>
    ///<param name = "validationGroup">
    ///A string value specifying the validation group's name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.ClearEditorsInContainer = function(container) {
    ///<summary>
    ///Assigns a null value to all editors located within a specified container.
    ///</summary>
    ///<param name = "container">
    ///An HTML element specifying the container of editors to be validated.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.ClearEditorsInContainerById = function(containerId, validationGroup, clearInvisibleEditors) {
    ///<summary>
    ///Assigns a null value to all editors which are located within the specified container object, and belonging to a specific validation group, dependent on the visibility state specified.
    ///</summary>
    ///<param name = "containerId">
    ///A string value specifying the editor container's identifier.
    ///</param>
    ///<param name = "validationGroup">
    ///A string value specifying the validatiion group's name.
    ///</param>
    ///<param name = "clearInvisibleEditors">
    ///true to clear both visible and invisible editors that belong to the specified container and group; false to clear only visible editors.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.ClearEditorsInContainerById = function(containerId, validationGroup) {
    ///<summary>
    ///Assigns a null value to all editors which are located within the specified container object, and belonging to a specific validation group.
    ///</summary>
    ///<param name = "containerId">
    ///A string value specifying the editor container's identifier.
    ///</param>
    ///<param name = "validationGroup">
    ///A string value specifying the validatiion group's name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.ClearEditorsInContainerById = function(containerId) {
    ///<summary>
    ///Assigns a null value to all editors which are located within the specified container object.
    ///</summary>
    ///<param name = "containerId">
    ///A string value specifying the editor container's identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.ClearGroup = function(validationGroup, clearInvisibleEditors) {
    ///<summary>
    ///Assigns a null value to all editors which belong to a specific validation group, dependent on the visibility state specified.
    ///</summary>
    ///<param name = "validationGroup">
    ///A string value specifying the validation group's name.
    ///</param>
    ///<param name = "clearInvisibleEditors">
    ///true to clear both visible and invisible editors that belong to the specified validation group; false to clear only visible editors.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.ClearGroup = function(validationGroup) {
    ///<summary>
    ///Assigns a null value to all editors which belong to a specific validation group.
    ///</summary>
    ///<param name = "validationGroup">
    ///A string value specifying the validation group's name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.ValidateEditorsInContainer = function(container, validationGroup, validateInvisibleEditors) {
    ///<summary>
    ///Performs validation of all editors in a specified visibility state, which are located within a specified container and belong to a specific validation group.
    ///</summary>
    ///<param name = "container">
    ///An HTML element specifying the container of editors to be validated.
    ///</param>
    ///<param name = "validationGroup">
    ///A string value that specifies the validation group's name.
    ///</param>
    ///<param name = "validateInvisibleEditors">
    ///true to validate both visible and invisible editors that belong to the specified container and group; false to validate only visible editors.
    ///</param>
    ///<returns>
    ///true if the specified editors pass validation; otherwise, false.
    ///</returns>
};
ASPxClientEdit.ValidateEditorsInContainer = function(container, validationGroup) {
    ///<summary>
    ///Performs validation of the editors which are located within the specified container and belong to a specific validation group.
    ///</summary>
    ///<param name = "container">
    ///An HTML element specifying the container of editors to be validated.
    ///</param>
    ///<param name = "validationGroup">
    ///A string value that specifies the validation group's name.
    ///</param>
    ///<returns>
    ///true if the specified editors pass validation; otherwise, false.
    ///</returns>
};
ASPxClientEdit.ValidateEditorsInContainer = function(container) {
    ///<summary>
    ///Performs validation of the editors which are located within the specified container.
    ///</summary>
    ///<param name = "container">
    ///An HTML element specifying the container of editors to be validated.
    ///</param>
    ///<returns>
    ///true if the specified editors pass validation; otherwise, false.
    ///</returns>
};
ASPxClientEdit.ValidateEditorsInContainerById = function(containerId, validationGroup, validateInvisibleEditors) {
    ///<summary>
    ///Performs validation of the editors which are located within the specified container and belong to a specific validation group, dependent on the visibility state specified.
    ///</summary>
    ///<param name = "containerId">
    ///A string value specifying the editor container's identifier.
    ///</param>
    ///<param name = "validationGroup">
    ///A string value that specifies the validation group's name.
    ///</param>
    ///<param name = "validateInvisibleEditors">
    ///true to validate both visible and invisible editors that belong to the specified container and group; false to validate only visible editors.
    ///</param>
    ///<returns>
    ///true if the specified editors pass validation; otherwise, false.
    ///</returns>
};
ASPxClientEdit.ValidateEditorsInContainerById = function(containerId, validationGroup) {
    ///<summary>
    ///Performs validation of the editors which are located within the specified container and belong to a specific validation group.
    ///</summary>
    ///<param name = "containerId">
    ///A string value that specifies the container's unique identifier.
    ///</param>
    ///<param name = "validationGroup">
    ///A string value that specifies the validation group's name.
    ///</param>
    ///<returns>
    ///true if the specified editors pass validation; otherwise, false.
    ///</returns>
};
ASPxClientEdit.ValidateEditorsInContainerById = function(containerId) {
    ///<summary>
    ///Performs validation of the editors which are located within the specified container.
    ///</summary>
    ///<param name = "containerId">
    ///A string value that specifies the container's unique identifier.
    ///</param>
    ///<returns>
    ///true if the specified editors pass validation; otherwise, false.
    ///</returns>
};
ASPxClientEdit.ValidateGroup = function(validationGroup, validateInvisibleEditors) {
    ///<summary>
    ///Performs validation of the specified validation control group, dependent on the visibility state specified.
    ///</summary>
    ///<param name = "validationGroup">
    ///A string value specifying the validation group's name.
    ///</param>
    ///<param name = "validateInvisibleEditors">
    ///true to validate both visible and invisible editors that belong to the specified validation group; false to validate only visible editors.
    ///</param>
    ///<returns>
    ///true if web controls of the specified validation group pass validation; otherwise, false.
    ///</returns>
};
ASPxClientEdit.ValidateGroup = function(validationGroup) {
    ///<summary>
    ///Performs validation of the specified validation control group.
    ///</summary>
    ///<param name = "validationGroup">
    ///A string value specifying the validation group's name.
    ///</param>
    ///<returns>
    ///true if web controls of the specified validation group pass validation; otherwise, false.
    ///</returns>
};
ASPxClientEdit.AreEditorsValid = function(container, validationGroup, checkInvisibleEditors) {
    ///<summary>
    ///Verifies whether the editors in a specified visibility state, which are located within a specified container and belong to a specific validation group, are valid.
    ///</summary>
    ///<param name = "container">
    ///An HTML element specifying the container of editors to be validated.
    ///</param>
    ///<param name = "validationGroup">
    ///A string value that specifies the validation group's name.
    ///</param>
    ///<param name = "checkInvisibleEditors">
    ///true to check both visible and invisible editors that belong to the specified container; false to check only visible editors.
    ///</param>
    ///<returns>
    ///true if the editors are valid; otherwise, false.
    ///</returns>
};
ASPxClientEdit.AreEditorsValid = function(container, validationGroup) {
    ///<summary>
    ///Verifies whether the editors, which are located within a specified container and belong to a specific validation group, are valid.
    ///</summary>
    ///<param name = "container">
    ///An HTML element specifying the container of editors to be validated.
    ///</param>
    ///<param name = "validationGroup">
    ///A string value that specifies the validation group's name.
    ///</param>
    ///<returns>
    ///true if the editors are valid; otherwise, false.
    ///</returns>
};
ASPxClientEdit.AreEditorsValid = function(container) {
    ///<summary>
    ///Verifies whether the editors located in a specified container are valid.
    ///</summary>
    ///<param name = "container">
    ///An HTML element specifying the container of editors to be validated.
    ///</param>
    ///<returns>
    ///true if the editors are valid; otherwise, false.
    ///</returns>
};
ASPxClientEdit.AreEditorsValid = function(containerId, validationGroup, checkInvisibleEditors) {
    ///<summary>
    ///Verifies whether the editors with the specified settings are valid.
    ///</summary>
    ///<param name = "containerId">
    ///A string value that specifies the container's unique identifier.
    ///</param>
    ///<param name = "validationGroup">
    ///A string value that specifies the validation group's name.
    ///</param>
    ///<param name = "checkInvisibleEditors">
    ///true to check both visible and invisible editors that belong to the specified container; false to check only visible editors.
    ///</param>
    ///<returns>
    ///true if the editors are valid; otherwise, false.
    ///</returns>
};
ASPxClientEdit.AreEditorsValid = function(containerId, validationGroup) {
    ///<summary>
    ///Verifies whether the editors with the specified settings are valid.
    ///</summary>
    ///<param name = "containerId">
    ///A string value that specifies the container's unique identifier.
    ///</param>
    ///<param name = "validationGroup">
    ///A string value that specifies the validation group's name.
    ///</param>
    ///<returns>
    ///true if the editors are valid; otherwise, false.
    ///</returns>
};
ASPxClientEdit.AreEditorsValid = function(containerId) {
    ///<summary>
    ///Verifies whether the editors with the specified settings are valid.
    ///</summary>
    ///<param name = "containerId">
    ///A string value that specifies the container's unique identifier.
    ///</param>
    ///<returns>
    ///true if the editors are valid; otherwise, false.
    ///</returns>
};
ASPxClientEdit.AreEditorsValid = function() {
    ///<summary>
    ///Verifies whether the editors on a page are valid.
    ///</summary>
    ///<returns>
    ///true if the editors are valid; otherwise, false.
    ///</returns>
};
ASPxClientCalendar.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientCalendar">
    ///An object of the ASPxClientCalendar type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientCaptcha.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientCaptcha">
    ///An object of the ASPxClientCaptcha type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientCheckBox.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientCheckBox">
    ///An object of the ASPxClientCheckBox type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientRadioButton.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientRadioButton">
    ///An object of the ASPxClientRadioButton type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientColorEdit.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientColorEdit">
    ///An object of the ASPxClientColorEdit type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientDropDownEdit.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientDropDownEdit">
    ///An object of the ASPxClientDropDownEdit type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientDateEdit.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientDateEdit">
    ///An object of the ASPxClientDateEdit type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientComboBox.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientComboBox">
    ///An object of the ASPxClientComboBox type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientFilterControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientFilterControl">
    ///An object of the ASPxClientFilterControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientListBox.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientListBox">
    ///An object of the ASPxClientListBox type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientRadioButtonList.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientRadioButtonList">
    ///An object of the ASPxClientRadioButtonList type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientProgressBar.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientProgressBar">
    ///An object of the ASPxClientProgressBar type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientSpinEdit.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientSpinEdit">
    ///An object of the ASPxClientSpinEdit type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTimeEdit.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTimeEdit">
    ///An object of the ASPxClientTimeEdit type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientHyperLink.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientHyperLink">
    ///An object of the ASPxClientHyperLink type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientImage.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientImage">
    ///An object of the ASPxClientImage type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientBinaryImage.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientBinaryImage">
    ///An object of the ASPxClientBinaryImage type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientLabel.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientLabel">
    ///An object of the ASPxClientLabel type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTextBox.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTextBox">
    ///An object of the ASPxClientTextBox type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientMemo.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientMemo">
    ///An object of the ASPxClientMemo type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientButtonEdit.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientButtonEdit">
    ///An object of the ASPxClientButtonEdit type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientGaugeControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientGaugeControl">
    ///An object of the ASPxClientGaugeControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientGridView.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientGridView">
    ///An object of the ASPxClientGridView type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientGridLookup.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientGridLookup">
    ///An object of the ASPxClientGridLookup type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientHtmlEditor.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientHtmlEditor">
    ///An object of the ASPxClientHtmlEditor type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientHtmlEditor.CustomDialogComplete = function(status, data) {
    ///<summary>
    ///Programmatically closes a custom dialog, supplying it with specific parameters.
    ///</summary>
    ///<param name = "status">
    ///An object representing a custom dialog's closing status.
    ///</param>
    ///<param name = "data">
    ///An object representing custom data associated with a custom dialog.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientPivotGrid">
    ///An object of the ASPxClientPivotGrid type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientScheduler.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientScheduler">
    ///An object of the ASPxClientScheduler type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientSpellChecker.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientSpellChecker">
    ///An object of the ASPxClientSpellChecker type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTreeList.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTreeList">
    ///An object of the ASPxClientTreeList type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientUtils.FinalizeCallback = function() {
    ///<summary>
    ///Loads service resources (such as scripts, CSS files, etc.) required for DevExpress functionality to work properly after a non DevExpress callback has been processed on the server and returned back to the client.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControl.AdjustControls = function() {
    ///<summary>
    ///Modifies the controls size on the page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControl.AdjustControls = function(container) {
    ///<summary>
    ///Modifies the controls size within the specified container.
    ///</summary>
    ///<param name = "container">
    ///An object that specifies the container of the controls.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientControl">
    ///An object of the ASPxClientControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientControl.GetControlCollection = function() {
    ///<summary>
    ///Returns a collection of client web control objects.
    ///</summary>
    ///<returns type = "ASPxClientControlCollection">
    ///An ASPxClientControlCollection object representing the client-side collection of web controls.
    ///</returns>
};
ASPxClientCallback.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientCallback">
    ///An object of the ASPxClientCallback type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientCallbackPanel.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientCallbackPanel">
    ///An object of the ASPxClientCallbackPanel type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientUtils.ArrayInsert = function(array, element) {
    ///<summary>
    ///Inserts the specified item into the the specified array object.
    ///</summary>
    ///<param name = "array">
    ///An object that specifies the array to manipulate.
    ///</param>
    ///<param name = "element">
    ///An object that specifies the array item to insert.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.ArrayRemove = function(array, element) {
    ///<summary>
    ///Removes the specified item from the specified array object.
    ///</summary>
    ///<param name = "array">
    ///An object that specifies the array to manipulate.
    ///</param>
    ///<param name = "element">
    ///An object that specifies the array item to remove.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.ArrayRemoveAt = function(array, index) {
    ///<summary>
    ///Removes an item at the specified index location from the specified array object.
    ///</summary>
    ///<param name = "array">
    ///An object that specifies the array to manipulate.
    ///</param>
    ///<param name = "index">
    ///The zero-based index location of the array item to remove.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.ArrayClear = function(array) {
    ///<summary>
    ///Removes all items from the specified array object.
    ///</summary>
    ///<param name = "array">
    ///An object that specifies the array to manipulate.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.ArrayIndexOf = function(array, element) {
    ///<summary>
    ///Searches for the specified array item and returns the zero-based index of its first occurrence within the specified array object.
    ///</summary>
    ///<param name = "array">
    ///An object that specifies the array to manipulate.
    ///</param>
    ///<param name = "element">
    ///An object that specifies the array item to locate.
    ///</param>
    ///<returns>
    ///The zero-based index of the first occurrence of the specified array item within the specified array, if found; otherwise, negative one (-1).
    ///</returns>
};
ASPxClientUtils.AttachEventToElement = function(element, eventName, method) {
    ///<summary>
    ///Binds the specified function to a specific element's event, so that the function gets called whenever the event fires on the element.
    ///</summary>
    ///<param name = "element">
    ///An object specifying the required element.
    ///</param>
    ///<param name = "eventName">
    ///A string value that specifies the required event name.
    ///</param>
    ///<param name = "method">
    ///An object that specifies the event's handling function.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.DetachEventFromElement = function(element, eventName, method) {
    ///<summary>
    ///Unbinds the specified function from a specific element's event, so that the function stops receiving notifications when the event fires.
    ///</summary>
    ///<param name = "element">
    ///An object specifying the required element.
    ///</param>
    ///<param name = "eventName">
    ///A string value that specifies the required event name.
    ///</param>
    ///<param name = "method">
    ///An object that specifies the event's handling function.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.GetEventSource = function(htmlEvent) {
    ///<summary>
    ///Returns the object that fired the event.
    ///</summary>
    ///<param name = "htmlEvent">
    ///An object that represents the current event.
    ///</param>
    ///<returns>
    ///The object that receives the event that fired.
    ///</returns>
};
ASPxClientUtils.GetEventX = function(htmlEvent) {
    ///<summary>
    ///Gets the x-coordinate of the event-related mouse pointer position relative to an end-user's screen.
    ///</summary>
    ///<param name = "htmlEvent">
    ///An object specifying the required HTML event.
    ///</param>
    ///<returns>
    ///An integer value representing the x-coordinate of the event-related mouse pointer position relative to an end-user's screen.
    ///</returns>
};
ASPxClientUtils.GetEventY = function(htmlEvent) {
    ///<summary>
    ///Gets the y-coordinate of the event-related mouse pointer position relative to an end-user's screen.
    ///</summary>
    ///<param name = "htmlEvent">
    ///An object specifying the required HTML event.
    ///</param>
    ///<returns>
    ///An integer value representing the y-coordinate of the event-related mouse pointer position relative to an end-user's screen.
    ///</returns>
};
ASPxClientUtils.GetKeyCode = function(htmlEvent) {
    ///<summary>
    ///Gets the keyboard code for the specified event.
    ///</summary>
    ///<param name = "htmlEvent">
    ///An object specifying the required HTML event.
    ///</param>
    ///<returns>
    ///An integer value representing the keyboard code of the specified event.
    ///</returns>
};
ASPxClientUtils.PreventEvent = function(htmlEvent) {
    ///<summary>
    ///Cancels the default action of the specified event.
    ///</summary>
    ///<param name = "htmlEvent">
    ///An object that specifies the required HTML event.
    ///</param>
    ///<returns>
    ///Always false.
    ///</returns>
};
ASPxClientUtils.PreventEventAndBubble = function(htmlEvent) {
    ///<summary>
    ///Cancels both the specified event's default action and the event's bubbling upon the hierarchy of event handlers.
    ///</summary>
    ///<param name = "htmlEvent">
    ///An object that specifies the required HTML event.
    ///</param>
    ///<returns>
    ///Always false.
    ///</returns>
};
ASPxClientUtils.PreventDragStart = function(htmlEvent) {
    ///<summary>
    ///Removes mouse capture from the specified event's source object.
    ///</summary>
    ///<param name = "htmlEvent">
    ///An object that specifies the required HTML event.
    ///</param>
    ///<returns>
    ///Always false.
    ///</returns>
};
ASPxClientUtils.ClearSelection = function() {
    ///<summary>
    ///Clears any text selection made within the window's client reqion.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.IsExists = function(obj) {
    ///<summary>
    ///Gets a value that indicates whether the specified object exists on the client side.
    ///</summary>
    ///<param name = "obj">
    ///The object to test.
    ///</param>
    ///<returns>
    ///true if the specified object exists; otherwise, false.
    ///</returns>
};
ASPxClientUtils.IsFunction = function(obj) {
    ///<summary>
    ///Gets a value that indicates whether the specified object is a function.
    ///</summary>
    ///<param name = "obj">
    ///The object to test.
    ///</param>
    ///<returns>
    ///true if the specified object is a function; otherwise, false.
    ///</returns>
};
ASPxClientUtils.GetAbsoluteX = function(element) {
    ///<summary>
    ///Gets the x-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
    ///</summary>
    ///<param name = "element">
    ///An object identifying the HTML element whose position should be obtained.
    ///</param>
    ///<returns>
    ///An integer value representing the specified element's x-coordinate, in pixels.
    ///</returns>
};
ASPxClientUtils.GetAbsoluteY = function(element) {
    ///<summary>
    ///Gets the y-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
    ///</summary>
    ///<param name = "element">
    ///An object identifying the HTML element whose position should be obtained.
    ///</param>
    ///<returns>
    ///An integer value representing the specified element's y-coordinate, in pixels.
    ///</returns>
};
ASPxClientUtils.SetAbsoluteX = function(element, x) {
    ///<summary>
    ///Sets the x-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
    ///</summary>
    ///<param name = "element">
    ///An object identifying the HTML element whose position should be defined.
    ///</param>
    ///<param name = "x">
    ///An integer value specifying the required element's x-coordinate, in pixels.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.SetAbsoluteY = function(element, y) {
    ///<summary>
    ///Sets the y-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
    ///</summary>
    ///<param name = "element">
    ///An object identifying the HTML element whose position should be defined.
    ///</param>
    ///<param name = "y">
    ///An integer value specifying the required element's y-coordinate, in pixels.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.GetDocumentScrollTop = function() {
    ///<summary>
    ///Returns the distance between the top edge of the document and the topmost portion of the content currently visible in the window.
    ///</summary>
    ///<returns>
    ///An integer value representing the distance (in pixels) between the top edge of the document and the topmost portion of the content currently visible in the window.
    ///</returns>
};
ASPxClientUtils.GetDocumentScrollLeft = function() {
    ///<summary>
    ///Returns the distance between the left edge of the document and the leftmost portion of the content currently visible in the window.
    ///</summary>
    ///<returns>
    ///An integer value representing the distance (in pixels) between the left edge of the document and the leftmost portion of the content currently visible in the window.
    ///</returns>
};
ASPxClientUtils.GetDocumentClientWidth = function() {
    ///<summary>
    ///Gets the width of the window's client region.
    ///</summary>
    ///<returns>
    ///An integer value representing the height of the window's client region.
    ///</returns>
};
ASPxClientUtils.GetDocumentClientHeight = function() {
    ///<summary>
    ///Gets the height of the window's client region.
    ///</summary>
    ///<returns>
    ///An integer value representing the height of the window's client region.
    ///</returns>
};
ASPxClientUtils.GetIsParent = function(parentElement, element) {
    ///<summary>
    ///Gets a value indicating whether the object passed via the parentElement parameter is a parent of the object passed via the element parameter.
    ///</summary>
    ///<param name = "parentElement">
    ///An object specifying the parent HTML element.
    ///</param>
    ///<param name = "element">
    ///An object specifying the child HTML element.
    ///</param>
    ///<returns>
    ///true if the parentElement  is a parent for the element; otherwise, false.
    ///</returns>
};
ASPxClientUtils.GetParentById = function(element, id) {
    ///<summary>
    ///Returns a reference to the specified HTML element's first parent object which has an ID that matches the specified value.
    ///</summary>
    ///<param name = "element">
    ///An object specifying the child HTML element whose parent elements are searched.
    ///</param>
    ///<param name = "id">
    ///A string specifying the required parent's ID.
    ///</param>
    ///<returns>
    ///An object representing the first parent element with a matching ID or a null value if no matching element is found.
    ///</returns>
};
ASPxClientUtils.GetParentByTagName = function(element, tabName) {
    ///<summary>
    ///Returns a reference to the specified HTML element's first parent object whose element name matches the specified value.
    ///</summary>
    ///<param name = "element">
    ///An object specifying the child HTML element whose parent elements are searched.
    ///</param>
    ///<param name = "tabName">
    ///A string value specifying the element name (tag name) of the desired HTML element.
    ///</param>
    ///<returns>
    ///An object representing the first parent element with a matching element name or a null value if no matching element is found.
    ///</returns>
};
ASPxClientUtils.GetParentByClassName = function(element, className) {
    ///<summary>
    ///Returns a reference to the specified HTML element's first parent object whose class name matches the specified value.
    ///</summary>
    ///<param name = "element">
    ///An object specifying the child HTML element whose parent elements are searched.
    ///</param>
    ///<param name = "className">
    ///A string value specifying the class name of the desired HTML element.
    ///</param>
    ///<returns>
    ///An object representing the first parent element with a matching class name or a null value if no matching element is found.
    ///</returns>
};
ASPxClientUtils.GetChildById = function(element, id) {
    ///<summary>
    ///Returns a reference to the first element that has the specified ID in the parent HTML element specified.
    ///</summary>
    ///<param name = "element">
    ///An object identifying the parent HTML element to search.
    ///</param>
    ///<param name = "id">
    ///A string specifying the ID attribute value of the desired child element.
    ///</param>
    ///<returns>
    ///An object representing the first element with a matching ID or null if no matching element is found.
    ///</returns>
};
ASPxClientUtils.GetChildByTagName = function(element, tagName, index) {
    ///<summary>
    ///Returns a reference to the particular element that has the specified element name and is contained within the specified parent HTML element.
    ///</summary>
    ///<param name = "element">
    ///An object specifying the parent HTML element to search.
    ///</param>
    ///<param name = "tagName">
    ///A string value specifying the element name (tag name) of the desired HTML element.
    ///</param>
    ///<param name = "index">
    ///An integer value specifying the zero-based index of the desired element amongst all the matching elements found.
    ///</param>
    ///<returns>
    ///An object representing the matching element; a null value if no matching element is found.
    ///</returns>
};
ASPxClientUtils.SetCookie = function(name, value) {
    ///<summary>
    ///Creates or updates the HTTP cookie for the response.
    ///</summary>
    ///<param name = "name">
    ///A string value that represents the name of a cookie.
    ///</param>
    ///<param name = "value">
    ///A string representing the cookie value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.SetCookie = function(name, value, expirationDate) {
    ///<summary>
    ///Creates or updates the HTTP cookie for the response.
    ///</summary>
    ///<param name = "name">
    ///A string value that represents the name of a cookie.
    ///</param>
    ///<param name = "value">
    ///A string representing the cookie value.
    ///</param>
    ///<param name = "expirationDate">
    ///A date-time object that represents the expiration date and time for the cookie.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.GetCookie = function(name) {
    ///<summary>
    ///Retrieves a cookie with the specified name.
    ///</summary>
    ///<param name = "name">
    ///A string value that represents the name of a cookie.
    ///</param>
    ///<returns>
    ///A string value, if the cookie exists.
    ///</returns>
};
ASPxClientUtils.DeleteCookie = function(name) {
    ///<summary>
    ///Deletes a cookie with the specified name.
    ///</summary>
    ///<param name = "name">
    ///A string value that represents the name of a cookie.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.GetShortcutCode = function(keyCode, isCtrlKey, isShiftKey, isAltKey) {
    ///<summary>
    ///Returns a specifically generated code that uniquely identifies the combination of keys specified via the parameters.
    ///</summary>
    ///<param name = "keyCode">
    ///An integer value that specifies the code of the key.
    ///</param>
    ///<param name = "isCtrlKey">
    ///true if the CTRL key should be included into the key combination; otherwise, false.
    ///</param>
    ///<param name = "isShiftKey">
    ///true if the SHIFT key should be included into the key combination; otherwise, false.
    ///</param>
    ///<param name = "isAltKey">
    ///true if the ALT key should be included into the key combination; otherwise, false.
    ///</param>
    ///<returns>
    ///An integer value that represents the code uniquely identifying the key combination.
    ///</returns>
};
ASPxClientUtils.GetShortcutCodeByEvent = function(htmlEvent) {
    ///<summary>
    ///Returns a specifically generated code that uniquely identifies the pressed key combination, which is specified by the related HTML event.
    ///</summary>
    ///<param name = "htmlEvent">
    ///A DHTML event object that relates to a key combination being pressed.
    ///</param>
    ///<returns>
    ///An integer value that represents the code uniquely identifying the specified key combination.
    ///</returns>
};
ASPxClientUtils.StringToShortcutCode = function(shortcutString) {
    ///<summary>
    ///Returns a specifically generated code that uniquely identifies the combination of keys specified via the parameter.
    ///</summary>
    ///<param name = "shortcutString">
    ///A string value that specifies the key combination.
    ///</param>
    ///<returns>
    ///An integer value that represents the code uniquely identifying the key combination.
    ///</returns>
};
ASPxClientUtils.Trim = function(str) {
    ///<summary>
    ///Trims all leading and trailing whitespaces from the string.
    ///</summary>
    ///<param name = "str">
    ///A string value representing the string for trimming.
    ///</param>
    ///<returns>
    ///A string value representing the trimmed string.
    ///</returns>
};
ASPxClientUtils.TrimStart = function(str) {
    ///<summary>
    ///Trims all leading whitespaces from the string.
    ///</summary>
    ///<param name = "str">
    ///A string value representing the string for trimming.
    ///</param>
    ///<returns>
    ///A string value representing the trimmed string.
    ///</returns>
};
ASPxClientUtils.TrimEnd = function(str) {
    ///<summary>
    ///Trims all trailing whitespaces from the string.
    ///</summary>
    ///<param name = "str">
    ///A string value representing the string for trimming.
    ///</param>
    ///<returns>
    ///A string value representing the trimmed string.
    ///</returns>
};
ASPxClientCloudControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientCloudControl">
    ///An object of the ASPxClientCloudControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientDataView.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientDataView">
    ///An object of the ASPxClientDataView type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientDockManager.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientDockManager">
    ///An object of the ASPxClientDockManager type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientDockPanel.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientDockPanel">
    ///An object of the ASPxClientDockPanel type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientDockZone.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientDockZone">
    ///An object of the ASPxClientDockZone type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientFileManager.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientFileManager">
    ///An object of the ASPxClientFileManager type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientHiddenField.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientHiddenField">
    ///An object of the ASPxClientHiddenField type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientLoadingPanel.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientLoadingPanel">
    ///An object of the ASPxClientLoadingPanel type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientMenuBase.GetMenuCollection = function() {
    ///<summary>
    ///Returns a collection of client menu objects.
    ///</summary>
    ///<returns type = "ASPxClientMenuCollection">
    ///An ASPxClientMenuCollection object representing the client-side collection of menu objects.
    ///</returns>
};
ASPxClientMenu.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An object of the ASPxClientMenu type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientNavBar.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientNavBar">
    ///An object of the ASPxClientNavBar type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientNewsControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientNewsControl">
    ///An object of the ASPxClientNewsControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientObjectContainer.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientObjectContainer">
    ///An object of the ASPxClientObjectContainer type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientPanel.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientPanel">
    ///An object of the ASPxClientPanel type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientPopupControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientPopupControl">
    ///An object of the ASPxClientPopupControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientPopupControl.GetPopupControlCollection = function() {
    ///<summary>
    ///Returns a collection of client popup control objects.
    ///</summary>
    ///<returns type = "ASPxClientPopupControlCollection">
    ///An ASPxClientPopupControlCollection object that is the client-side collection of popup controls.
    ///</returns>
};
ASPxClientPopupMenu.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientPopupMenu">
    ///An object of the ASPxClientPopupMenu type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientRatingControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientRatingControl">
    ///An object of the ASPxClientRatingControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientRoundPanel.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientRoundPanel">
    ///An object of the ASPxClientRoundPanel type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientSplitter.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientSplitter">
    ///An object of the ASPxClientSplitter type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTabControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTabControl">
    ///An object of the ASPxClientTabControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientPageControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientPageControl">
    ///An object of the ASPxClientPageControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTimer.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTimer">
    ///An object of the ASPxClientTimer type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTitleIndex.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTitleIndex">
    ///An object of the ASPxClientTitleIndex type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTreeView.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTreeView">
    ///An object of the ASPxClientTreeView type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientUploadControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientUploadControl">
    ///An object of the ASPxClientUploadControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientWebChartControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientWebChartControl">
    ///An object of the ASPxClientWebChartControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientReportViewer.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientReportViewer">
    ///An object of the ASPxClientReportViewer type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};

ASPxClientButton.__class = true;
ASPxClientEditBase.__class = true;
ASPxClientEdit.__class = true;
ASPxClientCalendar.__class = true;
ASPxClientCaptcha.__class = true;
ASPxClientCheckBox.__class = true;
ASPxClientRadioButton.__class = true;
ASPxClientTextEdit.__class = true;
ASPxClientTextBoxBase.__class = true;
ASPxClientButtonEditBase.__class = true;
ASPxClientDropDownEditBase.__class = true;
ASPxClientColorEdit.__class = true;
ASPxClientDropDownEdit.__class = true;
ASPxClientDateEdit.__class = true;
ASPxClientParseDateEventArgs.__class = true;
ASPxClientParseDateEventHandler.__class = true;
ASPxClientComboBox.__class = true;
ASPxClientEditKeyEventHandler.__class = true;
ASPxClientEditKeyEventArgs.__class = true;
ASPxClientEditValidationEventHandler.__class = true;
ASPxClientEditValidationEventArgs.__class = true;
ASPxClientFilterControl.__class = true;
ASPxClientFilterAppliedEventHandler.__class = true;
ASPxClientFilterAppliedEventArgs.__class = true;
ASPxClientListEdit.__class = true;
ASPxClientListEditItem.__class = true;
ASPxClientListBox.__class = true;
ASPxClientRadioButtonList.__class = true;
ASPxClientListEditItemSelectedChangedEventHandler.__class = true;
ASPxClientListEditItemSelectedChangedEventArgs.__class = true;
ASPxClientProgressBar.__class = true;
ASPxClientSpinEditBase.__class = true;
ASPxClientSpinEdit.__class = true;
ASPxClientTimeEdit.__class = true;
ASPxClientStaticEdit.__class = true;
ASPxClientEditEventHandler.__class = true;
ASPxClientEditClickEventArgs.__class = true;
ASPxClientHyperLink.__class = true;
ASPxClientImageBase.__class = true;
ASPxClientImage.__class = true;
ASPxClientBinaryImage.__class = true;
ASPxClientLabel.__class = true;
ASPxClientTextBox.__class = true;
ASPxClientMemo.__class = true;
ASPxClientButtonEdit.__class = true;
ASPxClientButtonEditClickEventHandler.__class = true;
ASPxClientButtonEditClickEventArgs.__class = true;
ASPxClientValidationSummary.__class = true;
ASPxClientValidationSummaryVisibilityChangedEventHandler.__class = true;
ASPxClientValidationSummaryVisibilityChangedEventArgs.__class = true;
ASPxClientGaugeControl.__class = true;
ASPxClientGridLookup.__class = true;
ASPxClientGridView.__class = true;
ASPxClientGridViewColumn.__class = true;
ASPxClientGridViewValuesCallback.__class = true;
ASPxClientGridViewColumnCancelEventHandler.__class = true;
ASPxClientGridViewColumnCancelEventArgs.__class = true;
ASPxClientGridViewColumnProcessingModeEventHandler.__class = true;
ASPxClientGridViewColumnProcessingModeEventArgs.__class = true;
ASPxClientGridViewRowCancelEventHandler.__class = true;
ASPxClientGridViewRowCancelEventArgs.__class = true;
ASPxClientGridViewSelectionEventHandler.__class = true;
ASPxClientGridViewSelectionEventArgs.__class = true;
ASPxClientGridViewRowClickEventHandler.__class = true;
ASPxClientGridViewRowClickEventArgs.__class = true;
ASPxClientGridViewContextMenuEventHandler.__class = true;
ASPxClientGridViewContextMenuEventArgs.__class = true;
ASPxClientGridViewCustomButtonEventHandler.__class = true;
ASPxClientGridViewCustomButtonEventArgs.__class = true;
ASPxClientGridViewColumnMovingEventHandler.__class = true;
ASPxClientGridViewColumnMovingEventArgs.__class = true;
ASPxClientCommandConsts.__class = true;
ASPxClientHtmlEditorCommandEventHandler.__class = true;
ASPxClientHtmlEditorCommandEventArgs.__class = true;
ASPxClientHtmlEditorCustomDialogEventHandler.__class = true;
ASPxClientHtmlEditorCustomDialogEventArgs.__class = true;
ASPxClientHtmlEditorCustomDialogCloseEventArgsBase.__class = true;
ASPxClientHtmlEditorCustomDialogClosingEventHandler.__class = true;
ASPxClientHtmlEditorCustomDialogClosingEventArgs.__class = true;
ASPxClientHtmlEditorCustomDialogClosedEventHandler.__class = true;
ASPxClientHtmlEditorCustomDialogClosedEventArgs.__class = true;
ASPxClientHtmlEditorValidationEventHandler.__class = true;
ASPxClientHtmlEditorValidationEventArgs.__class = true;
ASPxClientHtmlEditor.__class = true;
ASPxClientHtmlEditorSelection.__class = true;
ASPxClientPivotGrid.__class = true;
ASPxClientClickEventHandler.__class = true;
ASPxClientClickEventArgs.__class = true;
ASPxClientPivotMenuItemClickEventHandler.__class = true;
ASPxClientPivotMenuItemClickEventArgs.__class = true;
ASPxClientPivotCustomization.__class = true;
ASPxClientAppointmentFlags.__class = true;
ASPxClientAppointment.__class = true;
ASPxClientPoint.__class = true;
ASPxClientRect.__class = true;
ASPxClientRecurrenceInfo.__class = true;
ASPxClientRecurrenceRange.__class = true;
ASPxClientRecurrenceType.__class = true;
ASPxClientWeekDays.__class = true;
ASPxClientWeekOfMonth.__class = true;
ASPxClientWeekDaysCheckEdit.__class = true;
ASPxClientRecurrenceRangeControl.__class = true;
ASPxClientRecurrenceControlBase.__class = true;
ASPxClientDailyRecurrenceControl.__class = true;
ASPxClientWeeklyRecurrenceControl.__class = true;
ASPxClientMonthlyRecurrenceControl.__class = true;
ASPxClientYearlyRecurrenceControl.__class = true;
DefaultRecurrenceRuleValuesAccessor.__class = true;
DailyRecurrenceValuesAccessor.__class = true;
WeeklyRecurrenceValuesAccessor.__class = true;
MonthlyRecurrenceValuesAccessor.__class = true;
YearlyRecurrenceValuesAccessor.__class = true;
ASPxClientFormBase.__class = true;
ASPxClientRecurrenceTypeEdit.__class = true;
AppointmentPropertyNames.__class = true;
ASPxClientTimeInterval.__class = true;
ASPxClientSchedulerRefreshAction.__class = true;
ASPxClientAppointmentOperation.__class = true;
ASPxClientScheduler.__class = true;
ASPxSchedulerViewType.__class = true;
ASPxSchedulerGroupType.__class = true;
ASPxAppointmentType.__class = true;
ASPxClientAppointmentDeletingEventHandler.__class = true;
ASPxClientAppointmentDeletingEventArgs.__class = true;
AppointmentClickEventHandler.__class = true;
AppointmentClickEventArgs.__class = true;
AppointmentsSelectionEventHandler.__class = true;
AppointmentsSelectionEventArgs.__class = true;
ActiveViewChangingEventHandler.__class = true;
ActiveViewChangingEventArgs.__class = true;
MoreButtonClickedEventHandler.__class = true;
MoreButtonClickedEventArgs.__class = true;
MenuItemClickedEventHandler.__class = true;
MenuItemClickedEventArgs.__class = true;
AppointmentDropEventHandler.__class = true;
ASPxClientAppointmentDragEventArgs.__class = true;
AppointmentResizeEventHandler.__class = true;
ASPxClientAppointmentResizeEventArgs.__class = true;
ASPxClientSpellChecker.__class = true;
ASPxClientBeforeCheckEventHandler.__class = true;
ASPxClientSpellCheckerBeforeCheckEventArgs.__class = true;
ASPxClientAfterCheckEventHandler.__class = true;
ASPxClientSpellCheckerAfterCheckEventArgs.__class = true;
ASPxClientWordChangedEventHandler.__class = true;
ASPxClientTreeList.__class = true;
ASPxClientTreeListColumn.__class = true;
ASPxClientTreeListCustomDataCallbackEventArgs.__class = true;
ASPxClientTreeListCustomDataCallbackEventHandler.__class = true;
ASPxClientTreeListNodeEventArgs.__class = true;
ASPxClientTreeListNodeEventHandler.__class = true;
ASPxClientTreeListContextMenuEventArgs.__class = true;
ASPxClientTreeListContextMenuEventHandler.__class = true;
ASPxClientTreeListStartDragNodeEventArgs.__class = true;
ASPxClientTreeListStartDragNodeEventHandler.__class = true;
ASPxClientTreeListEndDragNodeEventArgs.__class = true;
ASPxClientTreeListEndDragNodeEventHandler.__class = true;
ASPxClientTreeListCustomButtonEventArgs.__class = true;
ASPxClientTreeListCustomButtonEventHandler.__class = true;
ASPxClientTreeListValuesCallback.__class = true;
MVCxClientCallbackPanel.__class = true;
MVCxClientChart.__class = true;
MVCxClientComboBox.__class = true;
MVCxClientGridView.__class = true;
MVCxClientHtmlEditor.__class = true;
MVCxClientListBox.__class = true;
MVCxClientNavBar.__class = true;
MVCxClientReportViewer.__class = true;
MVCxClientPageControl.__class = true;
MVCxClientTreeView.__class = true;
MVCxClientUploadControl.__class = true;
MVCxClientBeginCallbackEventHandler.__class = true;
MVCxClientBeginCallbackEventArgs.__class = true;
ASPxClientUtils.__class = true;
ASPxClientControl.__class = true;
ASPxClientCallback.__class = true;
ASPxClientCallbackCompleteEventHandler.__class = true;
ASPxClientEventArgs.__class = true;
ASPxClientCallbackCompleteEventArgs.__class = true;
ASPxClientCallbackPanel.__class = true;
ASPxClientEvent.__class = true;
ASPxClientEventHandler.__class = true;
ASPxClientCancelEventHandler.__class = true;
ASPxClientCancelEventArgs.__class = true;
ASPxClientProcessingModeEventHandler.__class = true;
ASPxClientProcessingModeEventArgs.__class = true;
ASPxClientProcessingModeCancelEventHandler.__class = true;
ASPxClientProcessingModeCancelEventArgs.__class = true;
ASPxClientBeginCallbackEventHandler.__class = true;
ASPxClientBeginCallbackEventArgs.__class = true;
ASPxClientEndCallbackEventHandler.__class = true;
ASPxClientEndCallbackEventArgs.__class = true;
ASPxClientCustomDataCallbackEventHandler.__class = true;
ASPxClientCustomDataCallbackEventArgs.__class = true;
ASPxClientCallbackErrorEventHandler.__class = true;
ASPxClientCallbackErrorEventArgs.__class = true;
ASPxClientControlsInitializedEventHandler.__class = true;
ASPxClientControlsInitializedEventArgs.__class = true;
ASPxClientControlCollection.__class = true;
ASPxClientDataCallback.__class = true;
ASPxClientUtils.__class = true;
ASPxClientCloudControl.__class = true;
ASPxClientCloudControlItemEventHandler.__class = true;
ASPxClientCloudControlItemEventArgs.__class = true;
ASPxClientDataView.__class = true;
ASPxClientDockingFilterPredicate.__class = true;
ASPxClientDockManager.__class = true;
ASPxClientDockManagerProcessingModeCancelEventHandler.__class = true;
ASPxClientDockManagerProcessingModeCancelEventArgs.__class = true;
ASPxClientDockManagerProcessingModeEventHandler.__class = true;
ASPxClientDockManagerProcessingModeEventArgs.__class = true;
ASPxClientDockManagerEventHandler.__class = true;
ASPxClientDockManagerEventArgs.__class = true;
ASPxClientDockManagerCancelEventHandler.__class = true;
ASPxClientDockManagerCancelEventArgs.__class = true;
ASPxClientPopupControlBase.__class = true;
ASPxClientDockPanel.__class = true;
ASPxClientDockPanelProcessingModeCancelEventHandler.__class = true;
ASPxClientDockPanelProcessingModeCancelEventArgs.__class = true;
ASPxClientDockPanelProcessingModeEventHandler.__class = true;
ASPxClientDockPanelProcessingModeEventArgs.__class = true;
ASPxClientDockZone.__class = true;
ASPxClientDockZoneCancelEventHandler.__class = true;
ASPxClientDockZoneCancelEventArgs.__class = true;
ASPxClientDockZoneProcessingModeEventHandler.__class = true;
ASPxClientDockZoneProcessingModeEventArgs.__class = true;
ASPxClientFileManager.__class = true;
ASPxClientFileManagerFile.__class = true;
ASPxClientFileManagerFileEventHandler.__class = true;
ASPxClientFileManagerFileEventArgs.__class = true;
ASPxClientFileManagerFileOpenedEventHandler.__class = true;
ASPxClientFileManagerFileOpenedEventArgs.__class = true;
ASPxClientFileManagerActionEventArgsBase.__class = true;
ASPxClientFileManagerEditingEventHandler.__class = true;
ASPxClientFileManagerEditingEventArgs.__class = true;
ASPxClientFileManagerRenameEventHandler.__class = true;
ASPxClientFileManagerRenameEventArgs.__class = true;
ASPxClientFileManagerDeleteEventHandler.__class = true;
ASPxClientFileManagerDeleteEventArgs.__class = true;
ASPxClientFileManagerMoveEventHandler.__class = true;
ASPxClientFileManagerMoveEventArgs.__class = true;
ASPxClientFileManagerCreateEventHandler.__class = true;
ASPxClientFileManagerCreateEventArgs.__class = true;
ASPxClientFileManagerErrorEventHandler.__class = true;
ASPxClientFileManagerErrorEventArgs.__class = true;
ASPxClientFileManagerUploadEventHandler.__class = true;
ASPxClientFileManagerUploadEventArgs.__class = true;
ASPxClientFileManagerUploadedEventHandler.__class = true;
ASPxClientFileManagerUploadedEventArgs.__class = true;
ASPxClientFileManagerDownloadingEventHandler.__class = true;
ASPxClientFileManagerDownloadingEventArgs.__class = true;
ASPxClientFileManagerCommandConsts.__class = true;
ASPxClientFileManagerErrorConsts.__class = true;
ASPxClientGlobalEvents.__class = true;
ASPxClientValidationCompletedEventHandler.__class = true;
ASPxClientValidationCompletedEventArgs.__class = true;
ASPxClientHiddenField.__class = true;
ASPxClientLoadingPanel.__class = true;
ASPxClientMenuBase.__class = true;
ASPxClientMenuCollection.__class = true;
ASPxClientMenuItem.__class = true;
ASPxClientMenu.__class = true;
ASPxClientMenuItemEventHandler.__class = true;
ASPxClientMenuItemEventArgs.__class = true;
ASPxClientMenuItemMouseEventHandler.__class = true;
ASPxClientMenuItemMouseEventArgs.__class = true;
ASPxClientMenuItemClickEventHandler.__class = true;
ASPxClientMenuItemClickEventArgs.__class = true;
ASPxClientNavBar.__class = true;
ASPxClientNavBarGroup.__class = true;
ASPxClientNavBarItem.__class = true;
ASPxClientNavBarItemEventHandler.__class = true;
ASPxClientNavBarItemEventArgs.__class = true;
ASPxClientNavBarGroupEventHandler.__class = true;
ASPxClientNavBarGroupEventArgs.__class = true;
ASPxClientNavBarGroupCancelEventHandler.__class = true;
ASPxClientNavBarGroupCancelEventArgs.__class = true;
ASPxClientNavBarGroupClickEventHandler.__class = true;
ASPxClientNavBarGroupClickEventArgs.__class = true;
ASPxClientNewsControl.__class = true;
ASPxClientNewsControlItemEventHandler.__class = true;
ASPxClientNewsControlItemEventArgs.__class = true;
ASPxClientObjectContainer.__class = true;
ASPxClientFlashScriptCommandEventHandler.__class = true;
ASPxClientFlashScriptCommandEventArgs.__class = true;
ASPxClientPanel.__class = true;
ASPxClientPopupControl.__class = true;
ASPxClientPopupControlCollection.__class = true;
ASPxClientPopupWindow.__class = true;
ASPxClientPopupWindowEventHandler.__class = true;
ASPxClientPopupWindowEventArgs.__class = true;
ASPxClientPopupWindowCancelEventHandler.__class = true;
ASPxClientPopupWindowCancelEventArgs.__class = true;
ASPxClientPopupMenu.__class = true;
ASPxClientRatingControl.__class = true;
ASPxClientRatingControlItemClickEventHandler.__class = true;
ASPxClientRatingControlItemClickEventArgs.__class = true;
ASPxClientRatingControlItemMouseEventHandler.__class = true;
ASPxClientRatingControlItemMouseEventArgs.__class = true;
ASPxClientRoundPanel.__class = true;
ASPxClientSplitter.__class = true;
ASPxClientSplitterPane.__class = true;
ASPxClientSplitterPaneEventHandler.__class = true;
ASPxClientSplitterPaneEventArgs.__class = true;
ASPxClientSplitterPaneCancelEventHandler.__class = true;
ASPxClientSplitterPaneCancelEventArgs.__class = true;
ASPxClientTabControlBase.__class = true;
ASPxClientTabControl.__class = true;
ASPxClientPageControl.__class = true;
ASPxClientTab.__class = true;
ASPxClientTabControlTabEventHandler.__class = true;
ASPxClientTabControlTabEventArgs.__class = true;
ASPxClientTabControlTabCancelEventHandler.__class = true;
ASPxClientTabControlTabCancelEventArgs.__class = true;
ASPxClientTabControlTabClickEventHandler.__class = true;
ASPxClientTabControlTabClickEventArgs.__class = true;
ASPxClientTimer.__class = true;
ASPxClientTitleIndex.__class = true;
ASPxClientTitleIndexItemEventHandler.__class = true;
ASPxClientTitleIndexItemEventArgs.__class = true;
ASPxClientTreeView.__class = true;
ASPxClientTreeViewNode.__class = true;
ASPxClientTreeViewNodeProcessingModeEventHandler.__class = true;
ASPxClientTreeViewNodeProcessingModeEventArgs.__class = true;
ASPxClientTreeViewNodeClickEventHandler.__class = true;
ASPxClientTreeViewNodeClickEventArgs.__class = true;
ASPxClientTreeViewNodeEventHandler.__class = true;
ASPxClientTreeViewNodeEventArgs.__class = true;
ASPxClientTreeViewNodeCancelEventHandler.__class = true;
ASPxClientTreeViewNodeCancelEventArgs.__class = true;
ASPxClientUploadControl.__class = true;
ASPxClientUploadControlFileUploadStartEventHandler.__class = true;
ASPxClientUploadControlFileUploadStartEventArgs.__class = true;
ASPxClientUploadControlFileUploadCompleteEventHandler.__class = true;
ASPxClientUploadControlFileUploadCompleteEventArgs.__class = true;
ASPxClientUploadControlFilesUploadCompleteEventHandler.__class = true;
ASPxClientUploadControlFilesUploadCompleteEventArgs.__class = true;
ASPxClientUploadControlTextChangedEventHandler.__class = true;
ASPxClientUploadControlTextChangedEventArgs.__class = true;
ASPxClientUploadControlUploadingProgressChangedEventHandler.__class = true;
ASPxClientUploadControlUploadingProgressChangedEventArgs.__class = true;
ASPxClientWebChartControl.__class = true;
ASPxClientWebChartControlHotTrackEventHandler.__class = true;
ASPxClientWebChartControlHotTrackEventArgs.__class = true;
ASPxClientHitObject.__class = true;
ASPxClientWebChartHitInfo.__class = true;
ASPxClientDiagramCoordinates.__class = true;
ASPxClientAxisValue.__class = true;
ASPxClientControlCoordinates.__class = true;
ASPxClientWebChartElement.__class = true;
ASPxClientWebChartEmptyElement.__class = true;
ASPxClientWebChartRequiredElement.__class = true;
ASPxClientWebChartElementNamed.__class = true;
ASPxClientWebChart.__class = true;
ASPxClientSimpleDiagram.__class = true;
ASPxClientXYDiagramBase.__class = true;
ASPxClientXYDiagram2D.__class = true;
ASPxClientXYDiagram.__class = true;
ASPxClientSwiftPlotDiagram.__class = true;
ASPxClientXYDiagramPane.__class = true;
ASPxClientXYDiagram3D.__class = true;
ASPxClientRadarDiagram.__class = true;
ASPxClientAxisBase.__class = true;
ASPxClientAxis2D.__class = true;
ASPxClientAxis.__class = true;
ASPxClientSwiftPlotDiagramAxis.__class = true;
ASPxClientAxis3D.__class = true;
ASPxClientRadarAxis.__class = true;
ASPxClientAxisTitle.__class = true;
ASPxClientAxisLabelItem.__class = true;
ASPxClientAxisRange.__class = true;
ASPxClientStrip.__class = true;
ASPxClientConstantLine.__class = true;
ASPxClientSeries.__class = true;
ASPxClientSeriesLabel.__class = true;
ASPxClientSeriesPoint.__class = true;
ASPxClientLegend.__class = true;
ASPxClientTitleBase.__class = true;
ASPxClientChartTitle.__class = true;
ASPxClientSeriesTitle.__class = true;
ASPxClientIndicator.__class = true;
ASPxClientFinancialIndicator.__class = true;
ASPxClientTrendLine.__class = true;
ASPxClientFibonacciIndicator.__class = true;
ASPxClientFinancialIndicatorPoint.__class = true;
ASPxClientSingleLevelIndicator.__class = true;
ASPxClientRegressionLine.__class = true;
ASPxClientMovingAverage.__class = true;
ASPxClientSimpleMovingAverage.__class = true;
ASPxClientExponentialMovingAverage.__class = true;
ASPxClientWeightedMovingAverage.__class = true;
ASPxClientTriangularMovingAverage.__class = true;
ASPxClientAnnotation.__class = true;
ASPxClientTextAnnotation.__class = true;
ASPxClientImageAnnotation.__class = true;
ASPxClientReportViewer.__class = true;
ASPxClientEventHandler.__class = true;
ASPxClientReportViewerPageLoadEventArgs.__class = true;
